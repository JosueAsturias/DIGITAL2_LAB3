

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Fri Feb 07 22:46:08 2020

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	dabs	1,0x7E,2
    16  0000                     
    17                           ; Version 2.05
    18                           ; Generated 20/12/2018 GMT
    19                           ; 
    20                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC16F887 Definitions
    49                           ; 
    50                           ; SFR Addresses
    51  0000                     	;# 
    52  0001                     	;# 
    53  0002                     	;# 
    54  0003                     	;# 
    55  0004                     	;# 
    56  0005                     	;# 
    57  0006                     	;# 
    58  0007                     	;# 
    59  0008                     	;# 
    60  0009                     	;# 
    61  000A                     	;# 
    62  000B                     	;# 
    63  000C                     	;# 
    64  000D                     	;# 
    65  000E                     	;# 
    66  000E                     	;# 
    67  000F                     	;# 
    68  0010                     	;# 
    69  0011                     	;# 
    70  0012                     	;# 
    71  0013                     	;# 
    72  0014                     	;# 
    73  0015                     	;# 
    74  0015                     	;# 
    75  0016                     	;# 
    76  0017                     	;# 
    77  0018                     	;# 
    78  0019                     	;# 
    79  001A                     	;# 
    80  001B                     	;# 
    81  001B                     	;# 
    82  001C                     	;# 
    83  001D                     	;# 
    84  001E                     	;# 
    85  001F                     	;# 
    86  0081                     	;# 
    87  0085                     	;# 
    88  0086                     	;# 
    89  0087                     	;# 
    90  0088                     	;# 
    91  0089                     	;# 
    92  008C                     	;# 
    93  008D                     	;# 
    94  008E                     	;# 
    95  008F                     	;# 
    96  0090                     	;# 
    97  0091                     	;# 
    98  0092                     	;# 
    99  0093                     	;# 
   100  0093                     	;# 
   101  0093                     	;# 
   102  0094                     	;# 
   103  0095                     	;# 
   104  0096                     	;# 
   105  0097                     	;# 
   106  0098                     	;# 
   107  0099                     	;# 
   108  009A                     	;# 
   109  009B                     	;# 
   110  009C                     	;# 
   111  009D                     	;# 
   112  009E                     	;# 
   113  009F                     	;# 
   114  0105                     	;# 
   115  0107                     	;# 
   116  0108                     	;# 
   117  0109                     	;# 
   118  010C                     	;# 
   119  010C                     	;# 
   120  010D                     	;# 
   121  010E                     	;# 
   122  010F                     	;# 
   123  0185                     	;# 
   124  0187                     	;# 
   125  0188                     	;# 
   126  0189                     	;# 
   127  018C                     	;# 
   128  018D                     	;# 
   129  0000                     	;# 
   130  0001                     	;# 
   131  0002                     	;# 
   132  0003                     	;# 
   133  0004                     	;# 
   134  0005                     	;# 
   135  0006                     	;# 
   136  0007                     	;# 
   137  0008                     	;# 
   138  0009                     	;# 
   139  000A                     	;# 
   140  000B                     	;# 
   141  000C                     	;# 
   142  000D                     	;# 
   143  000E                     	;# 
   144  000E                     	;# 
   145  000F                     	;# 
   146  0010                     	;# 
   147  0011                     	;# 
   148  0012                     	;# 
   149  0013                     	;# 
   150  0014                     	;# 
   151  0015                     	;# 
   152  0015                     	;# 
   153  0016                     	;# 
   154  0017                     	;# 
   155  0018                     	;# 
   156  0019                     	;# 
   157  001A                     	;# 
   158  001B                     	;# 
   159  001B                     	;# 
   160  001C                     	;# 
   161  001D                     	;# 
   162  001E                     	;# 
   163  001F                     	;# 
   164  0081                     	;# 
   165  0085                     	;# 
   166  0086                     	;# 
   167  0087                     	;# 
   168  0088                     	;# 
   169  0089                     	;# 
   170  008C                     	;# 
   171  008D                     	;# 
   172  008E                     	;# 
   173  008F                     	;# 
   174  0090                     	;# 
   175  0091                     	;# 
   176  0092                     	;# 
   177  0093                     	;# 
   178  0093                     	;# 
   179  0093                     	;# 
   180  0094                     	;# 
   181  0095                     	;# 
   182  0096                     	;# 
   183  0097                     	;# 
   184  0098                     	;# 
   185  0099                     	;# 
   186  009A                     	;# 
   187  009B                     	;# 
   188  009C                     	;# 
   189  009D                     	;# 
   190  009E                     	;# 
   191  009F                     	;# 
   192  0105                     	;# 
   193  0107                     	;# 
   194  0108                     	;# 
   195  0109                     	;# 
   196  010C                     	;# 
   197  010C                     	;# 
   198  010D                     	;# 
   199  010E                     	;# 
   200  010F                     	;# 
   201  0185                     	;# 
   202  0187                     	;# 
   203  0188                     	;# 
   204  0189                     	;# 
   205  018C                     	;# 
   206  018D                     	;# 
   207  0000                     	;# 
   208  0001                     	;# 
   209  0002                     	;# 
   210  0003                     	;# 
   211  0004                     	;# 
   212  0005                     	;# 
   213  0006                     	;# 
   214  0007                     	;# 
   215  0008                     	;# 
   216  0009                     	;# 
   217  000A                     	;# 
   218  000B                     	;# 
   219  000C                     	;# 
   220  000D                     	;# 
   221  000E                     	;# 
   222  000E                     	;# 
   223  000F                     	;# 
   224  0010                     	;# 
   225  0011                     	;# 
   226  0012                     	;# 
   227  0013                     	;# 
   228  0014                     	;# 
   229  0015                     	;# 
   230  0015                     	;# 
   231  0016                     	;# 
   232  0017                     	;# 
   233  0018                     	;# 
   234  0019                     	;# 
   235  001A                     	;# 
   236  001B                     	;# 
   237  001B                     	;# 
   238  001C                     	;# 
   239  001D                     	;# 
   240  001E                     	;# 
   241  001F                     	;# 
   242  0081                     	;# 
   243  0085                     	;# 
   244  0086                     	;# 
   245  0087                     	;# 
   246  0088                     	;# 
   247  0089                     	;# 
   248  008C                     	;# 
   249  008D                     	;# 
   250  008E                     	;# 
   251  008F                     	;# 
   252  0090                     	;# 
   253  0091                     	;# 
   254  0092                     	;# 
   255  0093                     	;# 
   256  0093                     	;# 
   257  0093                     	;# 
   258  0094                     	;# 
   259  0095                     	;# 
   260  0096                     	;# 
   261  0097                     	;# 
   262  0098                     	;# 
   263  0099                     	;# 
   264  009A                     	;# 
   265  009B                     	;# 
   266  009C                     	;# 
   267  009D                     	;# 
   268  009E                     	;# 
   269  009F                     	;# 
   270  0105                     	;# 
   271  0107                     	;# 
   272  0108                     	;# 
   273  0109                     	;# 
   274  010C                     	;# 
   275  010C                     	;# 
   276  010D                     	;# 
   277  010E                     	;# 
   278  010F                     	;# 
   279  0185                     	;# 
   280  0187                     	;# 
   281  0188                     	;# 
   282  0189                     	;# 
   283  018C                     	;# 
   284  018D                     	;# 
   285  0007                     _PORTCbits	set	7
   286  0007                     _PORTC	set	7
   287  0008                     _PORTD	set	8
   288  0087                     _TRISC	set	135
   289  0088                     _TRISD	set	136
   290                           
   291                           	psect	strings
   292  0003                     __pstrings:	
   293  0003                     stringtab:	
   294  0003                     __stringtab:	
   295  0003                     stringcode:	
   296                           ;	String table - string pointers are 1 byte each
   297                           
   298  0003                     stringdir:	
   299  0003  3000               	movlw	high stringdir
   300  0004  008A               	movwf	10
   301  0005  0804               	movf	4,w
   302  0006  0A84               	incf	4,f
   303  0007  0782               	addwf	2,f
   304  0008                     __stringbase:	
   305  0008  3400               	retlw	0
   306  0009                     __end_of__stringtab:	
   307  0009                     STR_1:	
   308  0009  3453               	retlw	83	;'S'
   309  000A  3468               	retlw	104	;'h'
   310  000B  346F               	retlw	111	;'o'
   311  000C  3420               	retlw	32	;' '
   312  000D  3476               	retlw	118	;'v'
   313  000E  3469               	retlw	105	;'i'
   314  000F  3465               	retlw	101	;'e'
   315  0010  346A               	retlw	106	;'j'
   316  0011  346F               	retlw	111	;'o'
   317  0012  3400               	retlw	0
   318                           
   319                           ; #config settings
   320  0000                     
   321                           	psect	cinit
   322  07EE                     start_initialization:	
   323  07EE                     __initialization:	
   324                           
   325                           ; Clear objects allocated to BANK0
   326  07EE  1283               	bcf	3,5	;RP0=0, select bank0
   327  07EF  1303               	bcf	3,6	;RP1=0, select bank0
   328  07F0  01A0               	clrf	__pbssBANK0& (0+127)
   329  07F1  01A1               	clrf	(__pbssBANK0+1)& (0+127)
   330  07F2  01A2               	clrf	(__pbssBANK0+2)& (0+127)
   331  07F3  01A3               	clrf	(__pbssBANK0+3)& (0+127)
   332  07F4  01A4               	clrf	(__pbssBANK0+4)& (0+127)
   333  07F5  01A5               	clrf	(__pbssBANK0+5)& (0+127)
   334  07F6  01A6               	clrf	(__pbssBANK0+6)& (0+127)
   335  07F7  01A7               	clrf	(__pbssBANK0+7)& (0+127)
   336  07F8  01A8               	clrf	(__pbssBANK0+8)& (0+127)
   337  07F9  01A9               	clrf	(__pbssBANK0+9)& (0+127)
   338  07FA  01AA               	clrf	(__pbssBANK0+10)& (0+127)
   339  07FB  01AB               	clrf	(__pbssBANK0+11)& (0+127)
   340  07FC                     end_of_initialization:	
   341                           ;End of C runtime variable initialization code
   342                           
   343  07FC                     __end_of__initialization:	
   344  07FC  0183               	clrf	3
   345  07FD  120A  118A  2F46   	ljmp	_main	;jump to C main() function
   346                           
   347                           	psect	bssBANK0
   348  0020                     __pbssBANK0:	
   349  0020                     _hola:	
   350  0020                     	ds	12
   351                           
   352                           	psect	cstackCOMMON
   353  0070                     __pcstackCOMMON:	
   354  0070                     ?_LCD_init:	
   355  0070                     ?_LCD_Write_String:	
   356                           ; 1 bytes @ 0x0
   357                           
   358  0070                     ?_LCD_Write_Character:	
   359                           ; 1 bytes @ 0x0
   360                           
   361  0070                     ??_LCD_Write_Character:	
   362                           ; 1 bytes @ 0x0
   363                           
   364  0070                     ?_LCD_Cursor_rechts:	
   365                           ; 1 bytes @ 0x0
   366                           
   367  0070                     ?_main:	
   368                           ; 1 bytes @ 0x0
   369                           
   370  0070                     ?_LCD_Cmd:	
   371                           ; 1 bytes @ 0x0
   372                           
   373  0070                     ??_LCD_Cmd:	
   374                           ; 1 bytes @ 0x0
   375                           
   376                           
   377                           ; 1 bytes @ 0x0
   378  0070                     	ds	1
   379  0071                     LCD_Write_Character@caracter:	
   380                           
   381                           ; 1 bytes @ 0x1
   382  0071                     	ds	1
   383  0072                     ??_LCD_Write_String:	
   384  0072                     LCD_Cmd@comando:	
   385                           ; 1 bytes @ 0x2
   386                           
   387  0072                     LCD_Write_String@n:	
   388                           ; 1 bytes @ 0x2
   389                           
   390                           
   391                           ; 2 bytes @ 0x2
   392  0072                     	ds	1
   393  0073                     ??_LCD_init:	
   394  0073                     ?_LCD_Set_Cursor:	
   395                           ; 1 bytes @ 0x3
   396                           
   397  0073                     ??_LCD_Cursor_rechts:	
   398                           ; 1 bytes @ 0x3
   399                           
   400  0073                     LCD_Set_Cursor@columna:	
   401                           ; 1 bytes @ 0x3
   402                           
   403                           
   404                           ; 1 bytes @ 0x3
   405  0073                     	ds	1
   406  0074                     ??_LCD_Set_Cursor:	
   407  0074                     LCD_Write_String@a:	
   408                           ; 1 bytes @ 0x4
   409                           
   410  0074                     LCD_Cursor_rechts@espacios:	
   411                           ; 1 bytes @ 0x4
   412                           
   413                           
   414                           ; 1 bytes @ 0x4
   415  0074                     	ds	1
   416  0075                     LCD_Cursor_rechts@n:	
   417                           
   418                           ; 1 bytes @ 0x5
   419  0075                     	ds	1
   420  0076                     LCD_Set_Cursor@linea:	
   421                           
   422                           ; 1 bytes @ 0x6
   423  0076                     	ds	1
   424  0077                     LCD_Set_Cursor@corrimiento:	
   425                           
   426                           ; 1 bytes @ 0x7
   427  0077                     	ds	1
   428  0078                     ??_main:	
   429                           
   430                           ; 1 bytes @ 0x8
   431  0078                     	ds	3
   432                           
   433                           	psect	maintext
   434  0746                     __pmaintext:	
   435 ;;
   436 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   437 ;;
   438 ;; *************** function _main *****************
   439 ;; Defined at:
   440 ;;		line 39 in file "main.c"
   441 ;; Parameters:    Size  Location     Type
   442 ;;		None
   443 ;; Auto vars:     Size  Location     Type
   444 ;;		None
   445 ;; Return value:  Size  Location     Type
   446 ;;                  1    wreg      void 
   447 ;; Registers used:
   448 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   449 ;; Tracked objects:
   450 ;;		On entry : B00/0
   451 ;;		On exit  : 0/0
   452 ;;		Unchanged: 0/0
   453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   454 ;;      Params:         0       0       0       0       0
   455 ;;      Locals:         0       0       0       0       0
   456 ;;      Temps:          3       0       0       0       0
   457 ;;      Totals:         3       0       0       0       0
   458 ;;Total ram usage:        3 bytes
   459 ;; Hardware stack levels required when called:    2
   460 ;; This function calls:
   461 ;;		_LCD_Cursor_rechts
   462 ;;		_LCD_Set_Cursor
   463 ;;		_LCD_Write_Character
   464 ;;		_LCD_Write_String
   465 ;;		_LCD_init
   466 ;; This function is called by:
   467 ;;		Startup code after reset
   468 ;; This function uses a non-reentrant model
   469 ;;
   470                           
   471                           
   472                           ;psect for function _main
   473  0746                     _main:	
   474                           
   475                           ;main.c: 40:     TRISD = 0;
   476                           
   477                           ;incstack = 0
   478                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   479  0746  1683               	bsf	3,5	;RP0=1, select bank1
   480  0747  1303               	bcf	3,6	;RP1=0, select bank1
   481  0748  0188               	clrf	8	;volatile
   482                           
   483                           ;main.c: 41:     TRISC = 0;
   484  0749  0187               	clrf	7	;volatile
   485                           
   486                           ;main.c: 42:     PORTD = 0;
   487  074A  1283               	bcf	3,5	;RP0=0, select bank0
   488  074B  1303               	bcf	3,6	;RP1=0, select bank0
   489  074C  0188               	clrf	8	;volatile
   490                           
   491                           ;main.c: 43:     PORTC = 0;
   492  074D  0187               	clrf	7	;volatile
   493                           
   494                           ;main.c: 44:     LCD_init();
   495  074E  120A  118A  2787  120A  118A  	fcall	_LCD_init
   496                           
   497                           ;main.c: 48:     LCD_Set_Cursor(1,3);
   498  0753  3003               	movlw	3
   499  0754  00F8               	movwf	??_main
   500  0755  0878               	movf	??_main,w
   501  0756  00F3               	movwf	LCD_Set_Cursor@columna
   502  0757  3001               	movlw	1
   503  0758  120A  118A  26EB  120A  118A  	fcall	_LCD_Set_Cursor
   504                           
   505                           ;main.c: 49:     LCD_Write_String("Sho viejo");
   506  075D  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   507  075E  120A  118A  26C9  120A  118A  	fcall	_LCD_Write_String
   508                           
   509                           ;main.c: 50:     LCD_Set_Cursor(2,5);
   510  0763  3005               	movlw	5
   511  0764  00F8               	movwf	??_main
   512  0765  0878               	movf	??_main,w
   513  0766  00F3               	movwf	LCD_Set_Cursor@columna
   514  0767  3002               	movlw	2
   515  0768  120A  118A  26EB  120A  118A  	fcall	_LCD_Set_Cursor
   516  076D                     l846:	
   517                           
   518                           ;main.c: 52:         LCD_Write_Character('W');
   519  076D  3057               	movlw	87
   520  076E  120A  118A  26A9  120A  118A  	fcall	_LCD_Write_Character
   521                           
   522                           ;main.c: 53:         LCD_Cursor_rechts(1);
   523  0773  3001               	movlw	1
   524  0774  120A  118A  26B8  120A  118A  	fcall	_LCD_Cursor_rechts
   525                           
   526                           ;main.c: 56:         _delay((unsigned long)((500)*(4000000/4000.0)));
   527  0779  3003               	movlw	3
   528  077A  00FA               	movwf	??_main+2
   529  077B  308A               	movlw	138
   530  077C  00F9               	movwf	??_main+1
   531  077D  3055               	movlw	85
   532  077E  00F8               	movwf	??_main
   533  077F                     u57:	
   534  077F  0BF8               	decfsz	??_main,f
   535  0780  2F7F               	goto	u57
   536  0781  0BF9               	decfsz	??_main+1,f
   537  0782  2F7F               	goto	u57
   538  0783  0BFA               	decfsz	??_main+2,f
   539  0784  2F7F               	goto	u57
   540  0785  2F86               	nop2
   541  0786  2F6D               	goto	l846
   542  0787                     __end_of_main:	
   543                           
   544                           	psect	text1
   545  0787                     __ptext1:	
   546 ;; *************** function _LCD_init *****************
   547 ;; Defined at:
   548 ;;		line 57 in file "LCD_8bits.c"
   549 ;; Parameters:    Size  Location     Type
   550 ;;		None
   551 ;; Auto vars:     Size  Location     Type
   552 ;;		None
   553 ;; Return value:  Size  Location     Type
   554 ;;                  1    wreg      void 
   555 ;; Registers used:
   556 ;;		wreg, status,2, status,0, pclath, cstack
   557 ;; Tracked objects:
   558 ;;		On entry : 0/0
   559 ;;		On exit  : 0/0
   560 ;;		Unchanged: 0/0
   561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   562 ;;      Params:         0       0       0       0       0
   563 ;;      Locals:         0       0       0       0       0
   564 ;;      Temps:          2       0       0       0       0
   565 ;;      Totals:         2       0       0       0       0
   566 ;;Total ram usage:        2 bytes
   567 ;; Hardware stack levels used:    1
   568 ;; Hardware stack levels required when called:    1
   569 ;; This function calls:
   570 ;;		_LCD_Cmd
   571 ;; This function is called by:
   572 ;;		_main
   573 ;; This function uses a non-reentrant model
   574 ;;
   575                           
   576                           
   577                           ;psect for function _LCD_init
   578  0787                     _LCD_init:	
   579                           
   580                           ;LCD_8bits.c: 58:     _delay((unsigned long)((20)*(4000000/4000.0)));
   581                           
   582                           ;incstack = 0
   583                           ; Regs used in _LCD_init: [wreg+status,2+status,0+pclath+cstack]
   584  0787  301A               	movlw	26
   585  0788  00F4               	movwf	??_LCD_init+1
   586  0789  30F8               	movlw	248
   587  078A  00F3               	movwf	??_LCD_init
   588  078B                     u67:	
   589  078B  0BF3               	decfsz	??_LCD_init,f
   590  078C  2F8B               	goto	u67
   591  078D  0BF4               	decfsz	??_LCD_init+1,f
   592  078E  2F8B               	goto	u67
   593  078F  0000               	nop
   594                           
   595                           ;LCD_8bits.c: 59:     LCD_Cmd(0x30);
   596  0790  3030               	movlw	48
   597  0791  120A  118A  2717  120A  118A  	fcall	_LCD_Cmd
   598                           
   599                           ;LCD_8bits.c: 60:     _delay((unsigned long)((5)*(4000000/4000.0)));
   600  0796  3007               	movlw	7
   601  0797  00F4               	movwf	??_LCD_init+1
   602  0798  307D               	movlw	125
   603  0799  00F3               	movwf	??_LCD_init
   604  079A                     u77:	
   605  079A  0BF3               	decfsz	??_LCD_init,f
   606  079B  2F9A               	goto	u77
   607  079C  0BF4               	decfsz	??_LCD_init+1,f
   608  079D  2F9A               	goto	u77
   609                           
   610                           ;LCD_8bits.c: 61:     LCD_Cmd(0x30);
   611  079E  3030               	movlw	48
   612  079F  120A  118A  2717  120A  118A  	fcall	_LCD_Cmd
   613                           
   614                           ;LCD_8bits.c: 62:     _delay((unsigned long)((100)*(4000000/4000000.0)));
   615  07A4  3021               	movlw	33
   616  07A5  00F3               	movwf	??_LCD_init
   617  07A6                     u87:	
   618  07A6  0BF3               	decfsz	??_LCD_init,f
   619  07A7  2FA6               	goto	u87
   620                           
   621                           ;LCD_8bits.c: 63:     LCD_Cmd(0x30);
   622  07A8  3030               	movlw	48
   623  07A9  120A  118A  2717  120A  118A  	fcall	_LCD_Cmd
   624                           
   625                           ;LCD_8bits.c: 64:     _delay((unsigned long)((100)*(4000000/4000000.0)));
   626  07AE  3021               	movlw	33
   627  07AF  00F3               	movwf	??_LCD_init
   628  07B0                     u97:	
   629  07B0  0BF3               	decfsz	??_LCD_init,f
   630  07B1  2FB0               	goto	u97
   631                           
   632                           ;LCD_8bits.c: 65:     LCD_Cmd(0x38);
   633  07B2  3038               	movlw	56
   634  07B3  120A  118A  2717  120A  118A  	fcall	_LCD_Cmd
   635                           
   636                           ;LCD_8bits.c: 66:     _delay((unsigned long)((53)*(4000000/4000000.0)));
   637  07B8  3011               	movlw	17
   638  07B9  00F3               	movwf	??_LCD_init
   639  07BA                     u107:	
   640  07BA  0BF3               	decfsz	??_LCD_init,f
   641  07BB  2FBA               	goto	u107
   642  07BC  0000               	nop
   643                           
   644                           ;LCD_8bits.c: 67:     LCD_Cmd(0x08);
   645  07BD  3008               	movlw	8
   646  07BE  120A  118A  2717  120A  118A  	fcall	_LCD_Cmd
   647                           
   648                           ;LCD_8bits.c: 68:     _delay((unsigned long)((53)*(4000000/4000000.0)));
   649  07C3  3011               	movlw	17
   650  07C4  00F3               	movwf	??_LCD_init
   651  07C5                     u117:	
   652  07C5  0BF3               	decfsz	??_LCD_init,f
   653  07C6  2FC5               	goto	u117
   654  07C7  0000               	nop
   655                           
   656                           ;LCD_8bits.c: 69:     LCD_Cmd(0x01);
   657  07C8  3001               	movlw	1
   658  07C9  120A  118A  2717  120A  118A  	fcall	_LCD_Cmd
   659                           
   660                           ;LCD_8bits.c: 70:     _delay((unsigned long)((3)*(4000000/4000.0)));
   661  07CE  3004               	movlw	4
   662  07CF  00F4               	movwf	??_LCD_init+1
   663  07D0  30E4               	movlw	228
   664  07D1  00F3               	movwf	??_LCD_init
   665  07D2                     u127:	
   666  07D2  0BF3               	decfsz	??_LCD_init,f
   667  07D3  2FD2               	goto	u127
   668  07D4  0BF4               	decfsz	??_LCD_init+1,f
   669  07D5  2FD2               	goto	u127
   670  07D6  0000               	nop
   671                           
   672                           ;LCD_8bits.c: 71:     LCD_Cmd(0x06);
   673  07D7  3006               	movlw	6
   674  07D8  120A  118A  2717  120A  118A  	fcall	_LCD_Cmd
   675                           
   676                           ;LCD_8bits.c: 72:     _delay((unsigned long)((53)*(4000000/4000000.0)));
   677  07DD  3011               	movlw	17
   678  07DE  00F3               	movwf	??_LCD_init
   679  07DF                     u137:	
   680  07DF  0BF3               	decfsz	??_LCD_init,f
   681  07E0  2FDF               	goto	u137
   682  07E1  0000               	nop
   683                           
   684                           ;LCD_8bits.c: 73:     LCD_Cmd(0x0C);
   685  07E2  300C               	movlw	12
   686  07E3  120A  118A  2717  120A  118A  	fcall	_LCD_Cmd
   687                           
   688                           ;LCD_8bits.c: 74:     _delay((unsigned long)((53)*(4000000/4000000.0)));
   689  07E8  3011               	movlw	17
   690  07E9  00F3               	movwf	??_LCD_init
   691  07EA                     u147:	
   692  07EA  0BF3               	decfsz	??_LCD_init,f
   693  07EB  2FEA               	goto	u147
   694  07EC  0000               	nop
   695  07ED  0008               	return
   696  07EE                     __end_of_LCD_init:	
   697                           
   698                           	psect	text2
   699  06C9                     __ptext2:	
   700 ;; *************** function _LCD_Write_String *****************
   701 ;; Defined at:
   702 ;;		line 86 in file "LCD_8bits.c"
   703 ;; Parameters:    Size  Location     Type
   704 ;;  a               1    wreg     PTR unsigned char 
   705 ;;		 -> STR_1(10), 
   706 ;; Auto vars:     Size  Location     Type
   707 ;;  a               1    4[COMMON] PTR unsigned char 
   708 ;;		 -> STR_1(10), 
   709 ;;  n               2    2[COMMON] int 
   710 ;; Return value:  Size  Location     Type
   711 ;;                  1    wreg      void 
   712 ;; Registers used:
   713 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   714 ;; Tracked objects:
   715 ;;		On entry : 0/0
   716 ;;		On exit  : 0/0
   717 ;;		Unchanged: 0/0
   718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   719 ;;      Params:         0       0       0       0       0
   720 ;;      Locals:         3       0       0       0       0
   721 ;;      Temps:          0       0       0       0       0
   722 ;;      Totals:         3       0       0       0       0
   723 ;;Total ram usage:        3 bytes
   724 ;; Hardware stack levels used:    1
   725 ;; Hardware stack levels required when called:    1
   726 ;; This function calls:
   727 ;;		_LCD_Write_Character
   728 ;; This function is called by:
   729 ;;		_main
   730 ;; This function uses a non-reentrant model
   731 ;;
   732                           
   733                           
   734                           ;psect for function _LCD_Write_String
   735  06C9                     _LCD_Write_String:	
   736                           
   737                           ;incstack = 0
   738                           ; Regs used in _LCD_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   739                           ;LCD_Write_String@a stored from wreg
   740  06C9  00F4               	movwf	LCD_Write_String@a
   741                           
   742                           ;LCD_8bits.c: 87:     int n;;LCD_8bits.c: 88:     for(n = 0; a[n] != '\0'; n++){
   743  06CA  01F2               	clrf	LCD_Write_String@n
   744  06CB  01F3               	clrf	LCD_Write_String@n+1
   745  06CC                     l834:	
   746  06CC  0872               	movf	LCD_Write_String@n,w
   747  06CD  0774               	addwf	LCD_Write_String@a,w
   748  06CE  0084               	movwf	4
   749  06CF  120A  118A  2003  120A  118A  	fcall	stringdir
   750  06D4  3A00               	xorlw	0
   751  06D5  1903               	btfsc	3,2
   752  06D6  0008               	return
   753                           
   754                           ;LCD_8bits.c: 89:         LCD_Write_Character(a[n]);
   755  06D7  0872               	movf	LCD_Write_String@n,w
   756  06D8  0774               	addwf	LCD_Write_String@a,w
   757  06D9  0084               	movwf	4
   758  06DA  120A  118A  2003  120A  118A  	fcall	stringdir
   759  06DF  120A  118A  26A9  120A  118A  	fcall	_LCD_Write_Character
   760                           
   761                           ;LCD_8bits.c: 90:     }
   762  06E4  3001               	movlw	1
   763  06E5  07F2               	addwf	LCD_Write_String@n,f
   764  06E6  1803               	skipnc
   765  06E7  0AF3               	incf	LCD_Write_String@n+1,f
   766  06E8  3000               	movlw	0
   767  06E9  07F3               	addwf	LCD_Write_String@n+1,f
   768  06EA  2ECC               	goto	l834
   769  06EB                     __end_of_LCD_Write_String:	
   770                           
   771                           	psect	text3
   772  06A9                     __ptext3:	
   773 ;; *************** function _LCD_Write_Character *****************
   774 ;; Defined at:
   775 ;;		line 77 in file "LCD_8bits.c"
   776 ;; Parameters:    Size  Location     Type
   777 ;;  caracter        1    wreg     unsigned char 
   778 ;; Auto vars:     Size  Location     Type
   779 ;;  caracter        1    1[COMMON] unsigned char 
   780 ;; Return value:  Size  Location     Type
   781 ;;                  1    wreg      void 
   782 ;; Registers used:
   783 ;;		wreg
   784 ;; Tracked objects:
   785 ;;		On entry : 0/0
   786 ;;		On exit  : 0/0
   787 ;;		Unchanged: 0/0
   788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   789 ;;      Params:         0       0       0       0       0
   790 ;;      Locals:         1       0       0       0       0
   791 ;;      Temps:          1       0       0       0       0
   792 ;;      Totals:         2       0       0       0       0
   793 ;;Total ram usage:        2 bytes
   794 ;; Hardware stack levels used:    1
   795 ;; This function calls:
   796 ;;		Nothing
   797 ;; This function is called by:
   798 ;;		_main
   799 ;;		_LCD_Write_String
   800 ;; This function uses a non-reentrant model
   801 ;;
   802                           
   803                           
   804                           ;psect for function _LCD_Write_Character
   805  06A9                     _LCD_Write_Character:	
   806                           
   807                           ;incstack = 0
   808                           ; Regs used in _LCD_Write_Character: [wreg]
   809                           ;LCD_Write_Character@caracter stored from wreg
   810  06A9  00F1               	movwf	LCD_Write_Character@caracter
   811                           
   812                           ;LCD_8bits.c: 78:     PORTCbits.RC0 = 1;
   813  06AA  1283               	bcf	3,5	;RP0=0, select bank0
   814  06AB  1303               	bcf	3,6	;RP1=0, select bank0
   815  06AC  1407               	bsf	7,0	;volatile
   816                           
   817                           ;LCD_8bits.c: 80:     PORTD = caracter;
   818  06AD  0871               	movf	LCD_Write_Character@caracter,w
   819  06AE  0088               	movwf	8	;volatile
   820                           
   821                           ;LCD_8bits.c: 81:     PORTCbits.RC1 = 1;
   822  06AF  1487               	bsf	7,1	;volatile
   823                           
   824                           ;LCD_8bits.c: 82:     _delay((unsigned long)((40)*(4000000/4000000.0)));
   825  06B0  300D               	movlw	13
   826  06B1  00F0               	movwf	??_LCD_Write_Character
   827  06B2                     u157:	
   828  06B2  0BF0               	decfsz	??_LCD_Write_Character,f
   829  06B3  2EB2               	goto	u157
   830                           
   831                           ;LCD_8bits.c: 83:     PORTCbits.RC1 = 0;
   832  06B4  1283               	bcf	3,5	;RP0=0, select bank0
   833  06B5  1303               	bcf	3,6	;RP1=0, select bank0
   834  06B6  1087               	bcf	7,1	;volatile
   835  06B7  0008               	return
   836  06B8                     __end_of_LCD_Write_Character:	
   837                           
   838                           	psect	text4
   839  06EB                     __ptext4:	
   840 ;; *************** function _LCD_Set_Cursor *****************
   841 ;; Defined at:
   842 ;;		line 93 in file "LCD_8bits.c"
   843 ;; Parameters:    Size  Location     Type
   844 ;;  linea           1    wreg     unsigned char 
   845 ;;  columna         1    3[COMMON] unsigned char 
   846 ;; Auto vars:     Size  Location     Type
   847 ;;  linea           1    6[COMMON] unsigned char 
   848 ;;  corrimiento     1    7[COMMON] unsigned char 
   849 ;; Return value:  Size  Location     Type
   850 ;;                  1    wreg      void 
   851 ;; Registers used:
   852 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   853 ;; Tracked objects:
   854 ;;		On entry : 0/0
   855 ;;		On exit  : 0/0
   856 ;;		Unchanged: 0/0
   857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   858 ;;      Params:         1       0       0       0       0
   859 ;;      Locals:         2       0       0       0       0
   860 ;;      Temps:          2       0       0       0       0
   861 ;;      Totals:         5       0       0       0       0
   862 ;;Total ram usage:        5 bytes
   863 ;; Hardware stack levels used:    1
   864 ;; Hardware stack levels required when called:    1
   865 ;; This function calls:
   866 ;;		_LCD_Cmd
   867 ;; This function is called by:
   868 ;;		_main
   869 ;; This function uses a non-reentrant model
   870 ;;
   871                           
   872                           
   873                           ;psect for function _LCD_Set_Cursor
   874  06EB                     _LCD_Set_Cursor:	
   875                           
   876                           ;incstack = 0
   877                           ; Regs used in _LCD_Set_Cursor: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   878                           ;LCD_Set_Cursor@linea stored from wreg
   879  06EB  00F6               	movwf	LCD_Set_Cursor@linea
   880                           
   881                           ;LCD_8bits.c: 95:     switch (linea){
   882  06EC  2F06               	goto	l822
   883  06ED                     l812:	
   884                           
   885                           ;LCD_8bits.c: 97:             corrimiento = 0x80 + columna;
   886  06ED  0873               	movf	LCD_Set_Cursor@columna,w
   887  06EE  3E80               	addlw	128
   888  06EF  00F4               	movwf	??_LCD_Set_Cursor
   889  06F0  0874               	movf	??_LCD_Set_Cursor,w
   890  06F1  00F7               	movwf	LCD_Set_Cursor@corrimiento
   891                           
   892                           ;LCD_8bits.c: 98:             LCD_Cmd(corrimiento);
   893  06F2  0877               	movf	LCD_Set_Cursor@corrimiento,w
   894  06F3  120A  118A  2717   	fcall	_LCD_Cmd
   895                           
   896                           ;LCD_8bits.c: 99:             break;
   897  06F6  0008               	return
   898  06F7                     l816:	
   899                           
   900                           ;LCD_8bits.c: 101:             corrimiento = 0x80 + 0x40 + columna;
   901  06F7  0873               	movf	LCD_Set_Cursor@columna,w
   902  06F8  3EC0               	addlw	192
   903  06F9  00F4               	movwf	??_LCD_Set_Cursor
   904  06FA  0874               	movf	??_LCD_Set_Cursor,w
   905  06FB  00F7               	movwf	LCD_Set_Cursor@corrimiento
   906                           
   907                           ;LCD_8bits.c: 102:             LCD_Cmd(corrimiento);
   908  06FC  0877               	movf	LCD_Set_Cursor@corrimiento,w
   909  06FD  120A  118A  2717   	fcall	_LCD_Cmd
   910                           
   911                           ;LCD_8bits.c: 103:             break;
   912  0700  0008               	return
   913  0701                     l820:	
   914                           
   915                           ;LCD_8bits.c: 105:             LCD_Cmd(0x80);
   916  0701  3080               	movlw	128
   917  0702  120A  118A  2717   	fcall	_LCD_Cmd
   918                           
   919                           ;LCD_8bits.c: 106:     }
   920  0705  0008               	return
   921  0706                     l822:	
   922  0706  0876               	movf	LCD_Set_Cursor@linea,w
   923  0707  00F4               	movwf	??_LCD_Set_Cursor
   924  0708  01F5               	clrf	??_LCD_Set_Cursor+1
   925                           
   926                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   927                           ; Switch size 1, requested type "simple"
   928                           ; Number of cases is 1, Range of values is 0 to 0
   929                           ; switch strategies available:
   930                           ; Name         Instructions Cycles
   931                           ; simple_byte            4     3 (average)
   932                           ; direct_byte           11     8 (fixed)
   933                           ; jumptable            260     6 (fixed)
   934                           ;	Chosen strategy is simple_byte
   935  0709  0875               	movf	??_LCD_Set_Cursor+1,w
   936  070A  3A00               	xorlw	0	; case 0
   937  070B  1903               	skipnz
   938  070C  2F0E               	goto	l872
   939  070D  2F01               	goto	l820
   940  070E                     l872:	
   941                           
   942                           ; Switch size 1, requested type "simple"
   943                           ; Number of cases is 2, Range of values is 1 to 2
   944                           ; switch strategies available:
   945                           ; Name         Instructions Cycles
   946                           ; simple_byte            7     4 (average)
   947                           ; direct_byte           17    11 (fixed)
   948                           ; jumptable            263     9 (fixed)
   949                           ;	Chosen strategy is simple_byte
   950  070E  0874               	movf	??_LCD_Set_Cursor,w
   951  070F  3A01               	xorlw	1	; case 1
   952  0710  1903               	skipnz
   953  0711  2EED               	goto	l812
   954  0712  3A03               	xorlw	3	; case 2
   955  0713  1903               	skipnz
   956  0714  2EF7               	goto	l816
   957  0715  2F01               	goto	l820
   958  0716  0008               	return
   959  0717                     __end_of_LCD_Set_Cursor:	
   960                           
   961                           	psect	text5
   962  06B8                     __ptext5:	
   963 ;; *************** function _LCD_Cursor_rechts *****************
   964 ;; Defined at:
   965 ;;		line 117 in file "LCD_8bits.c"
   966 ;; Parameters:    Size  Location     Type
   967 ;;  espacios        1    wreg     unsigned char 
   968 ;; Auto vars:     Size  Location     Type
   969 ;;  espacios        1    4[COMMON] unsigned char 
   970 ;;  n               1    5[COMMON] unsigned char 
   971 ;; Return value:  Size  Location     Type
   972 ;;                  1    wreg      void 
   973 ;; Registers used:
   974 ;;		wreg, status,2, status,0, pclath, cstack
   975 ;; Tracked objects:
   976 ;;		On entry : 0/0
   977 ;;		On exit  : 0/0
   978 ;;		Unchanged: 0/0
   979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   980 ;;      Params:         0       0       0       0       0
   981 ;;      Locals:         2       0       0       0       0
   982 ;;      Temps:          1       0       0       0       0
   983 ;;      Totals:         3       0       0       0       0
   984 ;;Total ram usage:        3 bytes
   985 ;; Hardware stack levels used:    1
   986 ;; Hardware stack levels required when called:    1
   987 ;; This function calls:
   988 ;;		_LCD_Cmd
   989 ;; This function is called by:
   990 ;;		_main
   991 ;; This function uses a non-reentrant model
   992 ;;
   993                           
   994                           
   995                           ;psect for function _LCD_Cursor_rechts
   996  06B8                     _LCD_Cursor_rechts:	
   997                           
   998                           ;incstack = 0
   999                           ; Regs used in _LCD_Cursor_rechts: [wreg+status,2+status,0+pclath+cstack]
  1000                           ;LCD_Cursor_rechts@espacios stored from wreg
  1001  06B8  00F4               	movwf	LCD_Cursor_rechts@espacios
  1002                           
  1003                           ;LCD_8bits.c: 118:     for (uint8_t n = 0; n <= espacios; n++){
  1004  06B9  01F5               	clrf	LCD_Cursor_rechts@n
  1005  06BA                     l750:	
  1006  06BA  0875               	movf	LCD_Cursor_rechts@n,w
  1007  06BB  0274               	subwf	LCD_Cursor_rechts@espacios,w
  1008  06BC  1C03               	btfss	3,0
  1009  06BD  0008               	return
  1010                           
  1011                           ;LCD_8bits.c: 119:         LCD_Cmd(0x14);
  1012  06BE  3014               	movlw	20
  1013  06BF  120A  118A  2717  120A  118A  	fcall	_LCD_Cmd
  1014                           
  1015                           ;LCD_8bits.c: 120:     }
  1016  06C4  3001               	movlw	1
  1017  06C5  00F3               	movwf	??_LCD_Cursor_rechts
  1018  06C6  0873               	movf	??_LCD_Cursor_rechts,w
  1019  06C7  07F5               	addwf	LCD_Cursor_rechts@n,f
  1020  06C8  2EBA               	goto	l750
  1021  06C9                     __end_of_LCD_Cursor_rechts:	
  1022                           
  1023                           	psect	text6
  1024  0717                     __ptext6:	
  1025 ;; *************** function _LCD_Cmd *****************
  1026 ;; Defined at:
  1027 ;;		line 33 in file "LCD_8bits.c"
  1028 ;; Parameters:    Size  Location     Type
  1029 ;;  comando         1    wreg     unsigned char 
  1030 ;; Auto vars:     Size  Location     Type
  1031 ;;  comando         1    2[COMMON] unsigned char 
  1032 ;; Return value:  Size  Location     Type
  1033 ;;                  1    wreg      void 
  1034 ;; Registers used:
  1035 ;;		wreg
  1036 ;; Tracked objects:
  1037 ;;		On entry : 0/0
  1038 ;;		On exit  : 0/0
  1039 ;;		Unchanged: 0/0
  1040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1041 ;;      Params:         0       0       0       0       0
  1042 ;;      Locals:         1       0       0       0       0
  1043 ;;      Temps:          2       0       0       0       0
  1044 ;;      Totals:         3       0       0       0       0
  1045 ;;Total ram usage:        3 bytes
  1046 ;; Hardware stack levels used:    1
  1047 ;; This function calls:
  1048 ;;		Nothing
  1049 ;; This function is called by:
  1050 ;;		_LCD_init
  1051 ;;		_LCD_Set_Cursor
  1052 ;;		_LCD_Cursor_rechts
  1053 ;;		_LCD_clear
  1054 ;;		_LCD_home
  1055 ;;		_LCD_Shift_links
  1056 ;;		_LCD_Shift_rechts
  1057 ;;		_LCD_Cursor_links
  1058 ;; This function uses a non-reentrant model
  1059 ;;
  1060                           
  1061                           
  1062                           ;psect for function _LCD_Cmd
  1063  0717                     _LCD_Cmd:	
  1064                           
  1065                           ;incstack = 0
  1066                           ; Regs used in _LCD_Cmd: [wreg]
  1067                           ;LCD_Cmd@comando stored from wreg
  1068  0717  00F2               	movwf	LCD_Cmd@comando
  1069                           
  1070                           ;LCD_8bits.c: 34:     PORTCbits.RC0 = 0;
  1071  0718  1283               	bcf	3,5	;RP0=0, select bank0
  1072  0719  1303               	bcf	3,6	;RP1=0, select bank0
  1073  071A  1007               	bcf	7,0	;volatile
  1074                           
  1075                           ;LCD_8bits.c: 35:     _delay((unsigned long)((5)*(4000000/4000.0)));
  1076  071B  3007               	movlw	7
  1077  071C  00F1               	movwf	??_LCD_Cmd+1
  1078  071D  307D               	movlw	125
  1079  071E  00F0               	movwf	??_LCD_Cmd
  1080  071F                     u167:	
  1081  071F  0BF0               	decfsz	??_LCD_Cmd,f
  1082  0720  2F1F               	goto	u167
  1083  0721  0BF1               	decfsz	??_LCD_Cmd+1,f
  1084  0722  2F1F               	goto	u167
  1085                           
  1086                           ;LCD_8bits.c: 36:     PORTCbits.RC1 = 1;
  1087  0723  1283               	bcf	3,5	;RP0=0, select bank0
  1088  0724  1303               	bcf	3,6	;RP1=0, select bank0
  1089  0725  1487               	bsf	7,1	;volatile
  1090                           
  1091                           ;LCD_8bits.c: 37:     _delay((unsigned long)((5)*(4000000/4000.0)));
  1092  0726  3007               	movlw	7
  1093  0727  00F1               	movwf	??_LCD_Cmd+1
  1094  0728  307D               	movlw	125
  1095  0729  00F0               	movwf	??_LCD_Cmd
  1096  072A                     u177:	
  1097  072A  0BF0               	decfsz	??_LCD_Cmd,f
  1098  072B  2F2A               	goto	u177
  1099  072C  0BF1               	decfsz	??_LCD_Cmd+1,f
  1100  072D  2F2A               	goto	u177
  1101                           
  1102                           ;LCD_8bits.c: 39:     PORTD = comando;
  1103  072E  0872               	movf	LCD_Cmd@comando,w
  1104  072F  1283               	bcf	3,5	;RP0=0, select bank0
  1105  0730  1303               	bcf	3,6	;RP1=0, select bank0
  1106  0731  0088               	movwf	8	;volatile
  1107                           
  1108                           ;LCD_8bits.c: 40:     _delay((unsigned long)((5)*(4000000/4000.0)));
  1109  0732  3007               	movlw	7
  1110  0733  00F1               	movwf	??_LCD_Cmd+1
  1111  0734  307D               	movlw	125
  1112  0735  00F0               	movwf	??_LCD_Cmd
  1113  0736                     u187:	
  1114  0736  0BF0               	decfsz	??_LCD_Cmd,f
  1115  0737  2F36               	goto	u187
  1116  0738  0BF1               	decfsz	??_LCD_Cmd+1,f
  1117  0739  2F36               	goto	u187
  1118                           
  1119                           ;LCD_8bits.c: 41:     PORTCbits.RC1 = 0;
  1120  073A  1283               	bcf	3,5	;RP0=0, select bank0
  1121  073B  1303               	bcf	3,6	;RP1=0, select bank0
  1122  073C  1087               	bcf	7,1	;volatile
  1123                           
  1124                           ;LCD_8bits.c: 42:     _delay((unsigned long)((5)*(4000000/4000.0)));
  1125  073D  3007               	movlw	7
  1126  073E  00F1               	movwf	??_LCD_Cmd+1
  1127  073F  307D               	movlw	125
  1128  0740  00F0               	movwf	??_LCD_Cmd
  1129  0741                     u197:	
  1130  0741  0BF0               	decfsz	??_LCD_Cmd,f
  1131  0742  2F41               	goto	u197
  1132  0743  0BF1               	decfsz	??_LCD_Cmd+1,f
  1133  0744  2F41               	goto	u197
  1134  0745  0008               	return
  1135  0746                     __end_of_LCD_Cmd:	
  1136  007E                     btemp	set	126	;btemp
  1137  007E                     wtemp0	set	126


Data Sizes:
    Strings     10
    Constant    0
    Data        0
    BSS         12
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      11
    BANK0            80      0      12
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    LCD_Write_String@a	PTR unsigned char  size(1) Largest target is 10
		 -> STR_1(CODE[10]), 


Critical Paths under _main in COMMON

    _main->_LCD_Set_Cursor
    _LCD_init->_LCD_Cmd
    _LCD_Write_String->_LCD_Write_Character
    _LCD_Set_Cursor->_LCD_Cmd
    _LCD_Cursor_rechts->_LCD_Cmd

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0     493
                                              8 COMMON     3     3      0
                  _LCD_Cursor_rechts
                     _LCD_Set_Cursor
                _LCD_Write_Character
                   _LCD_Write_String
                           _LCD_init
 ---------------------------------------------------------------------------------
 (1) _LCD_init                                             2     2      0      15
                                              3 COMMON     2     2      0
                            _LCD_Cmd
 ---------------------------------------------------------------------------------
 (1) _LCD_Write_String                                     3     3      0     138
                                              2 COMMON     3     3      0
                _LCD_Write_Character
 ---------------------------------------------------------------------------------
 (2) _LCD_Write_Character                                  2     2      0      15
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _LCD_Set_Cursor                                       5     4      1     280
                                              3 COMMON     5     4      1
                            _LCD_Cmd
 ---------------------------------------------------------------------------------
 (1) _LCD_Cursor_rechts                                    3     3      0      45
                                              3 COMMON     3     3      0
                            _LCD_Cmd
 ---------------------------------------------------------------------------------
 (2) _LCD_Cmd                                              3     3      0      15
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_Cursor_rechts
     _LCD_Cmd
   _LCD_Set_Cursor
     _LCD_Cmd
   _LCD_Write_Character
   _LCD_Write_String
     _LCD_Write_Character
   _LCD_init
     _LCD_Cmd

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      B       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      17       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       C       5       15.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      17      12        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Fri Feb 07 22:46:08 2020

                           pc 0002                   __CFG_CP$OFF 0000                            u57 077F  
                          u67 078B                            u77 079A                            u87 07A6  
                          u97 07B0                            fsr 0004                           l820 0701  
                         l812 06ED                           l750 06BA                           l822 0706  
                         l816 06F7                           l834 06CC                           l846 076D  
                         l872 070E                           u107 07BA                           u117 07C5  
                         u127 07D2                           u137 07DF                           u147 07EA  
                         u157 06B2                           u167 071F                           u177 072A  
                __CFG_CPD$OFF 0000                           u187 0736                           u197 0741  
                         fsr0 0004  __size_of_LCD_Write_Character 000F               __end_of_LCD_Cmd 0746  
                __CFG_LVP$OFF 0000                _LCD_Set_Cursor 06EB                          STR_1 0009  
                __CFG_WRT$OFF 0000             ?_LCD_Write_String 0070                          _main 0746  
                        _hola 0020                          btemp 007E                          start 0000  
          ??_LCD_Write_String 0072                 __CFG_IESO$OFF 0000             _LCD_Cursor_rechts 06B8  
            __end_of_LCD_init 07EE            ?_LCD_Cursor_rechts 0070                         ?_main 0070  
               __CFG_WDTE$OFF 0000                         _PORTC 0007                         _PORTD 0008  
                       _TRISC 0087                         _TRISD 0088                __CFG_FCMEN$OFF 0000  
      __end_of_LCD_Set_Cursor 0717           ??_LCD_Cursor_rechts 0073                __CFG_BOREN$OFF 0000  
                       pclath 000A                         status 0003                         wtemp0 007E  
              __CFG_MCLRE$OFF 0000               __initialization 07EE     __end_of_LCD_Cursor_rechts 06C9  
                __end_of_main 0787                        ??_main 0078                     ??_LCD_Cmd 0070  
             ?_LCD_Set_Cursor 0073   LCD_Write_Character@caracter 0071                __CFG_PWRTE$OFF 0000  
     __end_of__initialization 07FC                     ?_LCD_init 0070    __size_of_LCD_Cursor_rechts 0011  
              __pcstackCOMMON 0070           _LCD_Write_Character 06A9          ?_LCD_Write_Character 0070  
              LCD_Cmd@comando 0072                    __pbssBANK0 0020     LCD_Set_Cursor@corrimiento 0077  
                  ??_LCD_init 0073                    __pmaintext 0746     __size_of_LCD_Write_String 0022  
                     _LCD_Cmd 0717         ??_LCD_Write_Character 0070                    __stringtab 0003  
            ??_LCD_Set_Cursor 0074                       __ptext1 0787                       __ptext2 06C9  
                     __ptext3 06A9                       __ptext4 06EB                       __ptext5 06B8  
                     __ptext6 0717          end_of_initialization 07FC                     _PORTCbits 0007  
           LCD_Write_String@a 0074             LCD_Write_String@n 0072             __size_of_LCD_init 0067  
       LCD_Set_Cursor@columna 0073              _LCD_Write_String 06C9           start_initialization 07EE  
    __CFG_FOSC$INTRC_NOCLKOUT 0000                      ?_LCD_Cmd 0070                     ___latbits 0002  
                   __pstrings 0003   __end_of_LCD_Write_Character 06B8                      _LCD_init 0787  
                 __stringbase 0008              __size_of_LCD_Cmd 002F      __end_of_LCD_Write_String 06EB  
          __end_of__stringtab 0009             __CFG_BOR4V$BOR40V 0000       __size_of_LCD_Set_Cursor 002C  
               __size_of_main 0041           LCD_Set_Cursor@linea 0076     LCD_Cursor_rechts@espacios 0074  
                   stringcode 0003            LCD_Cursor_rechts@n 0075                      stringdir 0003  
                    stringtab 0003  
