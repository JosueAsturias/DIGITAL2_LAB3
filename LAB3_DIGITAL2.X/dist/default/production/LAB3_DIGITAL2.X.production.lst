

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sun Feb 09 22:33:45 2020

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	intentry,global,class=CODE,delta=2
    32                           	dabs	1,0x7E,2
    33  0000                     
    34                           ; Version 2.05
    35                           ; Generated 20/12/2018 GMT
    36                           ; 
    37                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    38                           ; All rights reserved.
    39                           ; 
    40                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    41                           ; 
    42                           ; Redistribution and use in source and binary forms, with or without modification, are
    43                           ; permitted provided that the following conditions are met:
    44                           ; 
    45                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    46                           ;        conditions and the following disclaimer.
    47                           ; 
    48                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    49                           ;        of conditions and the following disclaimer in the documentation and/or other
    50                           ;        materials provided with the distribution.
    51                           ; 
    52                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    53                           ;        software without specific prior written permission.
    54                           ; 
    55                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    56                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    57                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    58                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    59                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    60                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    61                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    62                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    63                           ; 
    64                           ; 
    65                           ; Code-generator required, PIC16F887 Definitions
    66                           ; 
    67                           ; SFR Addresses
    68  0000                     	;# 
    69  0001                     	;# 
    70  0002                     	;# 
    71  0003                     	;# 
    72  0004                     	;# 
    73  0005                     	;# 
    74  0006                     	;# 
    75  0007                     	;# 
    76  0008                     	;# 
    77  0009                     	;# 
    78  000A                     	;# 
    79  000B                     	;# 
    80  000C                     	;# 
    81  000D                     	;# 
    82  000E                     	;# 
    83  000E                     	;# 
    84  000F                     	;# 
    85  0010                     	;# 
    86  0011                     	;# 
    87  0012                     	;# 
    88  0013                     	;# 
    89  0014                     	;# 
    90  0015                     	;# 
    91  0015                     	;# 
    92  0016                     	;# 
    93  0017                     	;# 
    94  0018                     	;# 
    95  0019                     	;# 
    96  001A                     	;# 
    97  001B                     	;# 
    98  001B                     	;# 
    99  001C                     	;# 
   100  001D                     	;# 
   101  001E                     	;# 
   102  001F                     	;# 
   103  0081                     	;# 
   104  0085                     	;# 
   105  0086                     	;# 
   106  0087                     	;# 
   107  0088                     	;# 
   108  0089                     	;# 
   109  008C                     	;# 
   110  008D                     	;# 
   111  008E                     	;# 
   112  008F                     	;# 
   113  0090                     	;# 
   114  0091                     	;# 
   115  0092                     	;# 
   116  0093                     	;# 
   117  0093                     	;# 
   118  0093                     	;# 
   119  0094                     	;# 
   120  0095                     	;# 
   121  0096                     	;# 
   122  0097                     	;# 
   123  0098                     	;# 
   124  0099                     	;# 
   125  009A                     	;# 
   126  009B                     	;# 
   127  009C                     	;# 
   128  009D                     	;# 
   129  009E                     	;# 
   130  009F                     	;# 
   131  0105                     	;# 
   132  0107                     	;# 
   133  0108                     	;# 
   134  0109                     	;# 
   135  010C                     	;# 
   136  010C                     	;# 
   137  010D                     	;# 
   138  010E                     	;# 
   139  010F                     	;# 
   140  0185                     	;# 
   141  0187                     	;# 
   142  0188                     	;# 
   143  0189                     	;# 
   144  018C                     	;# 
   145  018D                     	;# 
   146  0000                     	;# 
   147  0001                     	;# 
   148  0002                     	;# 
   149  0003                     	;# 
   150  0004                     	;# 
   151  0005                     	;# 
   152  0006                     	;# 
   153  0007                     	;# 
   154  0008                     	;# 
   155  0009                     	;# 
   156  000A                     	;# 
   157  000B                     	;# 
   158  000C                     	;# 
   159  000D                     	;# 
   160  000E                     	;# 
   161  000E                     	;# 
   162  000F                     	;# 
   163  0010                     	;# 
   164  0011                     	;# 
   165  0012                     	;# 
   166  0013                     	;# 
   167  0014                     	;# 
   168  0015                     	;# 
   169  0015                     	;# 
   170  0016                     	;# 
   171  0017                     	;# 
   172  0018                     	;# 
   173  0019                     	;# 
   174  001A                     	;# 
   175  001B                     	;# 
   176  001B                     	;# 
   177  001C                     	;# 
   178  001D                     	;# 
   179  001E                     	;# 
   180  001F                     	;# 
   181  0081                     	;# 
   182  0085                     	;# 
   183  0086                     	;# 
   184  0087                     	;# 
   185  0088                     	;# 
   186  0089                     	;# 
   187  008C                     	;# 
   188  008D                     	;# 
   189  008E                     	;# 
   190  008F                     	;# 
   191  0090                     	;# 
   192  0091                     	;# 
   193  0092                     	;# 
   194  0093                     	;# 
   195  0093                     	;# 
   196  0093                     	;# 
   197  0094                     	;# 
   198  0095                     	;# 
   199  0096                     	;# 
   200  0097                     	;# 
   201  0098                     	;# 
   202  0099                     	;# 
   203  009A                     	;# 
   204  009B                     	;# 
   205  009C                     	;# 
   206  009D                     	;# 
   207  009E                     	;# 
   208  009F                     	;# 
   209  0105                     	;# 
   210  0107                     	;# 
   211  0108                     	;# 
   212  0109                     	;# 
   213  010C                     	;# 
   214  010C                     	;# 
   215  010D                     	;# 
   216  010E                     	;# 
   217  010F                     	;# 
   218  0185                     	;# 
   219  0187                     	;# 
   220  0188                     	;# 
   221  0189                     	;# 
   222  018C                     	;# 
   223  018D                     	;# 
   224  0000                     	;# 
   225  0001                     	;# 
   226  0002                     	;# 
   227  0003                     	;# 
   228  0004                     	;# 
   229  0005                     	;# 
   230  0006                     	;# 
   231  0007                     	;# 
   232  0008                     	;# 
   233  0009                     	;# 
   234  000A                     	;# 
   235  000B                     	;# 
   236  000C                     	;# 
   237  000D                     	;# 
   238  000E                     	;# 
   239  000E                     	;# 
   240  000F                     	;# 
   241  0010                     	;# 
   242  0011                     	;# 
   243  0012                     	;# 
   244  0013                     	;# 
   245  0014                     	;# 
   246  0015                     	;# 
   247  0015                     	;# 
   248  0016                     	;# 
   249  0017                     	;# 
   250  0018                     	;# 
   251  0019                     	;# 
   252  001A                     	;# 
   253  001B                     	;# 
   254  001B                     	;# 
   255  001C                     	;# 
   256  001D                     	;# 
   257  001E                     	;# 
   258  001F                     	;# 
   259  0081                     	;# 
   260  0085                     	;# 
   261  0086                     	;# 
   262  0087                     	;# 
   263  0088                     	;# 
   264  0089                     	;# 
   265  008C                     	;# 
   266  008D                     	;# 
   267  008E                     	;# 
   268  008F                     	;# 
   269  0090                     	;# 
   270  0091                     	;# 
   271  0092                     	;# 
   272  0093                     	;# 
   273  0093                     	;# 
   274  0093                     	;# 
   275  0094                     	;# 
   276  0095                     	;# 
   277  0096                     	;# 
   278  0097                     	;# 
   279  0098                     	;# 
   280  0099                     	;# 
   281  009A                     	;# 
   282  009B                     	;# 
   283  009C                     	;# 
   284  009D                     	;# 
   285  009E                     	;# 
   286  009F                     	;# 
   287  0105                     	;# 
   288  0107                     	;# 
   289  0108                     	;# 
   290  0109                     	;# 
   291  010C                     	;# 
   292  010C                     	;# 
   293  010D                     	;# 
   294  010E                     	;# 
   295  010F                     	;# 
   296  0185                     	;# 
   297  0187                     	;# 
   298  0188                     	;# 
   299  0189                     	;# 
   300  018C                     	;# 
   301  018D                     	;# 
   302  0000                     	;# 
   303  0001                     	;# 
   304  0002                     	;# 
   305  0003                     	;# 
   306  0004                     	;# 
   307  0005                     	;# 
   308  0006                     	;# 
   309  0007                     	;# 
   310  0008                     	;# 
   311  0009                     	;# 
   312  000A                     	;# 
   313  000B                     	;# 
   314  000C                     	;# 
   315  000D                     	;# 
   316  000E                     	;# 
   317  000E                     	;# 
   318  000F                     	;# 
   319  0010                     	;# 
   320  0011                     	;# 
   321  0012                     	;# 
   322  0013                     	;# 
   323  0014                     	;# 
   324  0015                     	;# 
   325  0015                     	;# 
   326  0016                     	;# 
   327  0017                     	;# 
   328  0018                     	;# 
   329  0019                     	;# 
   330  001A                     	;# 
   331  001B                     	;# 
   332  001B                     	;# 
   333  001C                     	;# 
   334  001D                     	;# 
   335  001E                     	;# 
   336  001F                     	;# 
   337  0081                     	;# 
   338  0085                     	;# 
   339  0086                     	;# 
   340  0087                     	;# 
   341  0088                     	;# 
   342  0089                     	;# 
   343  008C                     	;# 
   344  008D                     	;# 
   345  008E                     	;# 
   346  008F                     	;# 
   347  0090                     	;# 
   348  0091                     	;# 
   349  0092                     	;# 
   350  0093                     	;# 
   351  0093                     	;# 
   352  0093                     	;# 
   353  0094                     	;# 
   354  0095                     	;# 
   355  0096                     	;# 
   356  0097                     	;# 
   357  0098                     	;# 
   358  0099                     	;# 
   359  009A                     	;# 
   360  009B                     	;# 
   361  009C                     	;# 
   362  009D                     	;# 
   363  009E                     	;# 
   364  009F                     	;# 
   365  0105                     	;# 
   366  0107                     	;# 
   367  0108                     	;# 
   368  0109                     	;# 
   369  010C                     	;# 
   370  010C                     	;# 
   371  010D                     	;# 
   372  010E                     	;# 
   373  010F                     	;# 
   374  0185                     	;# 
   375  0187                     	;# 
   376  0188                     	;# 
   377  0189                     	;# 
   378  018C                     	;# 
   379  018D                     	;# 
   380  0000                     	;# 
   381  0001                     	;# 
   382  0002                     	;# 
   383  0003                     	;# 
   384  0004                     	;# 
   385  0005                     	;# 
   386  0006                     	;# 
   387  0007                     	;# 
   388  0008                     	;# 
   389  0009                     	;# 
   390  000A                     	;# 
   391  000B                     	;# 
   392  000C                     	;# 
   393  000D                     	;# 
   394  000E                     	;# 
   395  000E                     	;# 
   396  000F                     	;# 
   397  0010                     	;# 
   398  0011                     	;# 
   399  0012                     	;# 
   400  0013                     	;# 
   401  0014                     	;# 
   402  0015                     	;# 
   403  0015                     	;# 
   404  0016                     	;# 
   405  0017                     	;# 
   406  0018                     	;# 
   407  0019                     	;# 
   408  001A                     	;# 
   409  001B                     	;# 
   410  001B                     	;# 
   411  001C                     	;# 
   412  001D                     	;# 
   413  001E                     	;# 
   414  001F                     	;# 
   415  0081                     	;# 
   416  0085                     	;# 
   417  0086                     	;# 
   418  0087                     	;# 
   419  0088                     	;# 
   420  0089                     	;# 
   421  008C                     	;# 
   422  008D                     	;# 
   423  008E                     	;# 
   424  008F                     	;# 
   425  0090                     	;# 
   426  0091                     	;# 
   427  0092                     	;# 
   428  0093                     	;# 
   429  0093                     	;# 
   430  0093                     	;# 
   431  0094                     	;# 
   432  0095                     	;# 
   433  0096                     	;# 
   434  0097                     	;# 
   435  0098                     	;# 
   436  0099                     	;# 
   437  009A                     	;# 
   438  009B                     	;# 
   439  009C                     	;# 
   440  009D                     	;# 
   441  009E                     	;# 
   442  009F                     	;# 
   443  0105                     	;# 
   444  0107                     	;# 
   445  0108                     	;# 
   446  0109                     	;# 
   447  010C                     	;# 
   448  010C                     	;# 
   449  010D                     	;# 
   450  010E                     	;# 
   451  010F                     	;# 
   452  0185                     	;# 
   453  0187                     	;# 
   454  0188                     	;# 
   455  0189                     	;# 
   456  018C                     	;# 
   457  018D                     	;# 
   458                           
   459                           	psect	idataBANK0
   460  07AA                     __pidataBANK0:	
   461                           
   462                           ;initializer for _valorSerial
   463  07AA  3445               	retlw	69
   464                           
   465                           ;initializer for _banderaADC
   466  07AB  3401               	retlw	1
   467  001A                     _RCREG	set	26
   468  0018                     _RCSTAbits	set	24
   469  001E                     _ADRESH	set	30
   470  000B                     _INTCONbits	set	11
   471  0007                     _PORTCbits	set	7
   472  001F                     _ADCON0bits	set	31
   473  0007                     _PORTC	set	7
   474  0008                     _PORTD	set	8
   475  000C                     _PIR1bits	set	12
   476  0099                     _SPBRG	set	153
   477  0098                     _TXSTAbits	set	152
   478  009E                     _ADRESL	set	158
   479  0089                     _TRISEbits	set	137
   480  0085                     _TRISAbits	set	133
   481  009F                     _ADCON1bits	set	159
   482  0087                     _TRISC	set	135
   483  0088                     _TRISD	set	136
   484  008C                     _PIE1bits	set	140
   485  0188                     _ANSELbits	set	392
   486                           
   487                           	psect	strings
   488  075E                     __pstrings:	
   489  075E                     stringtab:	
   490  075E                     __stringtab:	
   491  075E                     stringcode:	
   492                           ;	String table - string pointers are 1 byte each
   493                           
   494  075E                     stringdir:	
   495  075E  3007               	movlw	high stringdir
   496  075F  008A               	movwf	10
   497  0760  0804               	movf	4,w
   498  0761  0A84               	incf	4,f
   499  0762  0782               	addwf	2,f
   500  0763                     __stringbase:	
   501  0763  3400               	retlw	0
   502  0764                     __end_of__stringtab:	
   503  0764                     STR_1:	
   504  0764  3453               	retlw	83	;'S'
   505  0765  3431               	retlw	49	;'1'
   506  0766  3420               	retlw	32	;' '
   507  0767  3420               	retlw	32	;' '
   508  0768  3420               	retlw	32	;' '
   509  0769  3420               	retlw	32	;' '
   510  076A  3453               	retlw	83	;'S'
   511  076B  3432               	retlw	50	;'2'
   512  076C  3420               	retlw	32	;' '
   513  076D  3420               	retlw	32	;' '
   514  076E  3420               	retlw	32	;' '
   515  076F  3420               	retlw	32	;' '
   516  0770  3453               	retlw	83	;'S'
   517  0771  3433               	retlw	51	;'3'
   518  0772  3400               	retlw	0
   519                           
   520                           ; #config settings
   521  0000                     
   522                           	psect	cinit
   523  000F                     start_initialization:	
   524  000F                     __initialization:	
   525                           
   526                           ; Initialize objects allocated to BANK0
   527  000F  120A  118A  27AA  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   528  0014  00D7               	movwf	__pdataBANK0& (0+127)
   529  0015  120A  118A  27AB  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   530  001A  00D8               	movwf	(__pdataBANK0+1)& (0+127)
   531                           
   532                           ; Clear objects allocated to BANK0
   533  001B  1383               	bcf	3,7	;select IRP bank0
   534  001C  3020               	movlw	low __pbssBANK0
   535  001D  0084               	movwf	4
   536  001E  303D               	movlw	low (__pbssBANK0+29)
   537  001F  120A  118A  27A2   	fcall	clear_ram0
   538                           
   539                           ; Clear objects allocated to COMMON
   540  0022  01FA               	clrf	__pbssCOMMON& (0+127)
   541  0023  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
   542  0024                     end_of_initialization:	
   543                           ;End of C runtime variable initialization code
   544                           
   545  0024                     __end_of__initialization:	
   546  0024  0183               	clrf	3
   547  0025  120A  118A  2828   	ljmp	_main	;jump to C main() function
   548                           
   549                           	psect	bssCOMMON
   550  007A                     __pbssCOMMON:	
   551  007A                     _num2:	
   552  007A                     	ds	1
   553  007B                     _num1:	
   554  007B                     	ds	1
   555                           
   556                           	psect	bssBANK0
   557  0020                     __pbssBANK0:	
   558  0020                     _linea2:	
   559  0020                     	ds	12
   560  002C                     uint_to_array@F1341:	
   561  002C                     	ds	6
   562  0032                     mapear@F1346:	
   563  0032                     	ds	6
   564  0038                     _contador:	
   565  0038                     	ds	1
   566  0039                     _banderaSerial:	
   567  0039                     	ds	1
   568  003A                     _num3:	
   569  003A                     	ds	1
   570  003B                     _valorADC_CH0:	
   571  003B                     	ds	1
   572  003C                     _valorADC_CH5:	
   573  003C                     	ds	1
   574                           
   575                           	psect	dataBANK0
   576  0057                     __pdataBANK0:	
   577  0057                     _valorSerial:	
   578  0057                     	ds	1
   579  0058                     _banderaADC:	
   580  0058                     	ds	1
   581                           
   582                           	psect	clrtext
   583  07A2                     clear_ram0:	
   584                           ;	Called with FSR containing the base address, and
   585                           ;	W with the last address+1
   586                           
   587  07A2  0064               	clrwdt	;clear the watchdog before getting into this loop
   588  07A3                     clrloop0:	
   589  07A3  0180               	clrf	0	;clear RAM location pointed to by FSR
   590  07A4  0A84               	incf	4,f	;increment pointer
   591  07A5  0604               	xorwf	4,w	;XOR with final address
   592  07A6  1903               	btfsc	3,2	;have we reached the end yet?
   593  07A7  3400               	retlw	0	;all done for this memory range, return
   594  07A8  0604               	xorwf	4,w	;XOR again to restore value
   595  07A9  2FA3               	goto	clrloop0	;do the next byte
   596                           
   597                           	psect	cstackCOMMON
   598  0070                     __pcstackCOMMON:	
   599  0070                     ?_LCD_init:	
   600  0070                     ?_LCD_Write_String:	
   601                           ; 1 bytes @ 0x0
   602                           
   603  0070                     ?_uartRC_Read:	
   604                           ; 1 bytes @ 0x0
   605                           
   606  0070                     ?_AnalogRead_8:	
   607                           ; 1 bytes @ 0x0
   608                           
   609  0070                     ?_ADC_CHselect:	
   610                           ; 1 bytes @ 0x0
   611                           
   612  0070                     ?_LCD_Write_Character:	
   613                           ; 1 bytes @ 0x0
   614                           
   615  0070                     ?_uint_to_char:	
   616                           ; 1 bytes @ 0x0
   617                           
   618  0070                     ?_uint_to_array:	
   619                           ; 1 bytes @ 0x0
   620                           
   621  0070                     ?_ISR_ADC:	
   622                           ; 1 bytes @ 0x0
   623                           
   624  0070                     ??_ISR_ADC:	
   625                           ; 1 bytes @ 0x0
   626                           
   627  0070                     ?_main:	
   628                           ; 1 bytes @ 0x0
   629                           
   630  0070                     ?_LCD_Cmd:	
   631                           ; 1 bytes @ 0x0
   632                           
   633                           
   634                           ; 1 bytes @ 0x0
   635  0070                     	ds	2
   636  0072                     ?_ADConfig:	
   637  0072                     ??_uartRC_Read:	
   638                           ; 1 bytes @ 0x2
   639                           
   640  0072                     ??_AnalogRead_8:	
   641                           ; 1 bytes @ 0x2
   642                           
   643  0072                     ??_ADC_CHselect:	
   644                           ; 1 bytes @ 0x2
   645                           
   646  0072                     ??_LCD_Write_Character:	
   647                           ; 1 bytes @ 0x2
   648                           
   649  0072                     ??_uint_to_char:	
   650                           ; 1 bytes @ 0x2
   651                           
   652  0072                     ??_LCD_Cmd:	
   653                           ; 1 bytes @ 0x2
   654                           
   655  0072                     ?___wmul:	
   656                           ; 1 bytes @ 0x2
   657                           
   658  0072                     ?___aldiv:	
   659                           ; 2 bytes @ 0x2
   660                           
   661  0072                     ADConfig@canal:	
   662                           ; 4 bytes @ 0x2
   663                           
   664  0072                     ___wmul@multiplier:	
   665                           ; 1 bytes @ 0x2
   666                           
   667  0072                     ___aldiv@divisor:	
   668                           ; 2 bytes @ 0x2
   669                           
   670                           
   671                           ; 4 bytes @ 0x2
   672  0072                     	ds	1
   673  0073                     LCD_Write_Character@caracter:	
   674  0073                     ADConfig@justificado:	
   675                           ; 1 bytes @ 0x3
   676                           
   677                           
   678                           ; 1 bytes @ 0x3
   679  0073                     	ds	1
   680  0074                     ??_ADConfig:	
   681  0074                     ??_LCD_Write_String:	
   682                           ; 1 bytes @ 0x4
   683                           
   684  0074                     LCD_Cmd@comando:	
   685                           ; 1 bytes @ 0x4
   686                           
   687  0074                     uint_to_char@numero:	
   688                           ; 1 bytes @ 0x4
   689                           
   690  0074                     AnalogRead_8@just:	
   691                           ; 1 bytes @ 0x4
   692                           
   693  0074                     ADC_CHselect@canal:	
   694                           ; 1 bytes @ 0x4
   695                           
   696  0074                     LCD_Write_String@n:	
   697                           ; 1 bytes @ 0x4
   698                           
   699  0074                     ___wmul@multiplicand:	
   700                           ; 2 bytes @ 0x4
   701                           
   702                           
   703                           ; 2 bytes @ 0x4
   704  0074                     	ds	1
   705  0075                     ??_LCD_init:	
   706  0075                     ?_LCD_Set_Cursor:	
   707                           ; 1 bytes @ 0x5
   708                           
   709  0075                     LCD_Set_Cursor@columna:	
   710                           ; 1 bytes @ 0x5
   711                           
   712  0075                     uint_to_char@numChr:	
   713                           ; 1 bytes @ 0x5
   714                           
   715  0075                     AnalogRead_8@conversion:	
   716                           ; 1 bytes @ 0x5
   717                           
   718                           
   719                           ; 1 bytes @ 0x5
   720  0075                     	ds	1
   721  0076                     ??_LCD_Set_Cursor:	
   722  0076                     ??___wmul:	
   723                           ; 1 bytes @ 0x6
   724                           
   725  0076                     LCD_Write_String@a:	
   726                           ; 1 bytes @ 0x6
   727                           
   728  0076                     ADConfig@oscFreq:	
   729                           ; 1 bytes @ 0x6
   730                           
   731  0076                     ___wmul@product:	
   732                           ; 1 bytes @ 0x6
   733                           
   734  0076                     ___aldiv@dividend:	
   735                           ; 2 bytes @ 0x6
   736                           
   737                           
   738                           ; 4 bytes @ 0x6
   739  0076                     	ds	2
   740  0078                     ?_mapear:	
   741  0078                     ??___awdiv:	
   742                           ; 1 bytes @ 0x8
   743                           
   744  0078                     mapear@limReal:	
   745                           ; 1 bytes @ 0x8
   746                           
   747  0078                     LCD_Set_Cursor@linea:	
   748                           ; 1 bytes @ 0x8
   749                           
   750                           
   751                           ; 1 bytes @ 0x8
   752  0078                     	ds	1
   753  0079                     mapear@limSup:	
   754  0079                     LCD_Set_Cursor@corrimiento:	
   755                           ; 1 bytes @ 0x9
   756                           
   757                           
   758                           ; 1 bytes @ 0x9
   759  0079                     	ds	1
   760                           
   761                           	psect	cstackBANK0
   762  003D                     __pcstackBANK0:	
   763  003D                     ??_mapear:	
   764  003D                     ??___aldiv:	
   765                           ; 1 bytes @ 0x0
   766                           
   767  003D                     ?___awdiv:	
   768                           ; 1 bytes @ 0x0
   769                           
   770  003D                     ___awdiv@divisor:	
   771                           ; 2 bytes @ 0x0
   772                           
   773                           
   774                           ; 2 bytes @ 0x0
   775  003D                     	ds	1
   776  003E                     ___aldiv@counter:	
   777                           
   778                           ; 1 bytes @ 0x1
   779  003E                     	ds	1
   780  003F                     ___aldiv@sign:	
   781  003F                     ___awdiv@dividend:	
   782                           ; 1 bytes @ 0x2
   783                           
   784                           
   785                           ; 2 bytes @ 0x2
   786  003F                     	ds	1
   787  0040                     ___aldiv@quotient:	
   788                           
   789                           ; 4 bytes @ 0x3
   790  0040                     	ds	1
   791  0041                     mapear@valor:	
   792  0041                     ___awdiv@counter:	
   793                           ; 1 bytes @ 0x4
   794                           
   795                           
   796                           ; 1 bytes @ 0x4
   797  0041                     	ds	1
   798  0042                     ___awdiv@sign:	
   799  0042                     mapear@resultado:	
   800                           ; 1 bytes @ 0x5
   801                           
   802                           
   803                           ; 6 bytes @ 0x5
   804  0042                     	ds	1
   805  0043                     ___awdiv@quotient:	
   806                           
   807                           ; 2 bytes @ 0x6
   808  0043                     	ds	1
   809  0044                     ?_uartRC_init:	
   810  0044                     uartRC_init@baudrate:	
   811                           ; 1 bytes @ 0x7
   812                           
   813                           
   814                           ; 2 bytes @ 0x7
   815  0044                     	ds	1
   816  0045                     ??_uint_to_array:	
   817                           
   818                           ; 1 bytes @ 0x8
   819  0045                     	ds	1
   820  0046                     ??_uartRC_init:	
   821                           
   822                           ; 1 bytes @ 0x9
   823  0046                     	ds	2
   824  0048                     mapear@dividendo:	
   825                           
   826                           ; 2 bytes @ 0xB
   827  0048                     	ds	3
   828  004B                     uint_to_array@decenas:	
   829                           
   830                           ; 1 bytes @ 0xE
   831  004B                     	ds	1
   832  004C                     uint_to_array@resultado:	
   833                           
   834                           ; 6 bytes @ 0xF
   835  004C                     	ds	6
   836  0052                     uint_to_array@centenas:	
   837  0052                     uartRC_init@n:	
   838                           ; 1 bytes @ 0x15
   839                           
   840                           
   841                           ; 2 bytes @ 0x15
   842  0052                     	ds	1
   843  0053                     uint_to_array@numero:	
   844                           
   845                           ; 1 bytes @ 0x16
   846  0053                     	ds	1
   847  0054                     ??_main:	
   848                           
   849                           ; 1 bytes @ 0x17
   850  0054                     	ds	3
   851                           
   852                           	psect	maintext
   853  0028                     __pmaintext:	
   854 ;;
   855 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   856 ;;
   857 ;; *************** function _main *****************
   858 ;; Defined at:
   859 ;;		line 58 in file "main.c"
   860 ;; Parameters:    Size  Location     Type
   861 ;;		None
   862 ;; Auto vars:     Size  Location     Type
   863 ;;		None
   864 ;; Return value:  Size  Location     Type
   865 ;;                  1    wreg      void 
   866 ;; Registers used:
   867 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   868 ;; Tracked objects:
   869 ;;		On entry : B00/0
   870 ;;		On exit  : 0/0
   871 ;;		Unchanged: 0/0
   872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   873 ;;      Params:         0       0       0       0       0
   874 ;;      Locals:         0       0       0       0       0
   875 ;;      Temps:          0       3       0       0       0
   876 ;;      Totals:         0       3       0       0       0
   877 ;;Total ram usage:        3 bytes
   878 ;; Hardware stack levels required when called:    3
   879 ;; This function calls:
   880 ;;		_ADC_CHselect
   881 ;;		_ADConfig
   882 ;;		_AnalogRead_8
   883 ;;		_LCD_Set_Cursor
   884 ;;		_LCD_Write_Character
   885 ;;		_LCD_Write_String
   886 ;;		_LCD_init
   887 ;;		_mapear
   888 ;;		_uartRC_Read
   889 ;;		_uartRC_init
   890 ;;		_uint_to_array
   891 ;;		_uint_to_char
   892 ;; This function is called by:
   893 ;;		Startup code after reset
   894 ;; This function uses a non-reentrant model
   895 ;;
   896                           
   897                           
   898                           ;psect for function _main
   899  0028                     _main:	
   900                           
   901                           ;main.c: 59:     TRISD = 0;
   902                           
   903                           ;incstack = 0
   904                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   905  0028  1683               	bsf	3,5	;RP0=1, select bank1
   906  0029  1303               	bcf	3,6	;RP1=0, select bank1
   907  002A  0188               	clrf	8	;volatile
   908                           
   909                           ;main.c: 60:     TRISC = 0;
   910  002B  0187               	clrf	7	;volatile
   911                           
   912                           ;main.c: 61:     PORTD = 0;
   913  002C  1283               	bcf	3,5	;RP0=0, select bank0
   914  002D  1303               	bcf	3,6	;RP1=0, select bank0
   915  002E  0188               	clrf	8	;volatile
   916                           
   917                           ;main.c: 62:     PORTC = 0;
   918  002F  0187               	clrf	7	;volatile
   919                           
   920                           ;main.c: 63:     LCD_init();
   921  0030  120A  118A  259C  120A  118A  	fcall	_LCD_init
   922                           
   923                           ;main.c: 64:     ADConfig(4, 5, 'H');
   924  0035  3005               	movlw	5
   925  0036  1283               	bcf	3,5	;RP0=0, select bank0
   926  0037  1303               	bcf	3,6	;RP1=0, select bank0
   927  0038  00D4               	movwf	??_main
   928  0039  0854               	movf	??_main,w
   929  003A  00F2               	movwf	ADConfig@canal
   930  003B  3048               	movlw	72
   931  003C  00D5               	movwf	??_main+1
   932  003D  0855               	movf	??_main+1,w
   933  003E  00F3               	movwf	ADConfig@justificado
   934  003F  3004               	movlw	4
   935  0040  120A  118A  21CE  120A  118A  	fcall	_ADConfig
   936                           
   937                           ;main.c: 65:     LCD_Set_Cursor(1,1);
   938  0045  01F5               	clrf	LCD_Set_Cursor@columna
   939  0046  0AF5               	incf	LCD_Set_Cursor@columna,f
   940  0047  3001               	movlw	1
   941  0048  120A  118A  26D2  120A  118A  	fcall	_LCD_Set_Cursor
   942                           
   943                           ;main.c: 66:     LCD_Write_String("S1    S2    S3");
   944  004D  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   945  004E  120A  118A  26FE  120A  118A  	fcall	_LCD_Write_String
   946                           
   947                           ;main.c: 67:     uartRC_init(300);
   948  0053  302C               	movlw	44
   949  0054  1283               	bcf	3,5	;RP0=0, select bank0
   950  0055  1303               	bcf	3,6	;RP1=0, select bank0
   951  0056  00C4               	movwf	uartRC_init@baudrate
   952  0057  3001               	movlw	1
   953  0058  00C5               	movwf	uartRC_init@baudrate+1
   954  0059  120A  118A  2298  120A  118A  	fcall	_uartRC_init
   955  005E                     l2377:	
   956                           
   957                           ;main.c: 69:         if(PIR1bits.RCIF == 1){
   958  005E  1283               	bcf	3,5	;RP0=0, select bank0
   959  005F  1303               	bcf	3,6	;RP1=0, select bank0
   960  0060  1E8C               	btfss	12,5	;volatile
   961  0061  2877               	goto	l2383
   962                           
   963                           ;main.c: 70:             valorSerial = uartRC_Read();
   964  0062  120A  118A  2796  120A  118A  	fcall	_uartRC_Read
   965  0067  1283               	bcf	3,5	;RP0=0, select bank0
   966  0068  1303               	bcf	3,6	;RP1=0, select bank0
   967  0069  00D4               	movwf	??_main
   968  006A  0854               	movf	??_main,w
   969  006B  00D7               	movwf	_valorSerial
   970                           
   971                           ;main.c: 71:             _delay((unsigned long)((5)*(4000000/4000.0)));
   972  006C  3007               	movlw	7
   973  006D  1283               	bcf	3,5	;RP0=0, select bank0
   974  006E  1303               	bcf	3,6	;RP1=0, select bank0
   975  006F  00D5               	movwf	??_main+1
   976  0070  307C               	movlw	124
   977  0071  00D4               	movwf	??_main
   978  0072                     u1147:	
   979  0072  0BD4               	decfsz	??_main,f
   980  0073  2872               	goto	u1147
   981  0074  0BD5               	decfsz	??_main+1,f
   982  0075  2872               	goto	u1147
   983  0076  0000               	nop
   984  0077                     l2383:	
   985                           
   986                           ;main.c: 73:         if (banderaADC == 1){
   987  0077  1283               	bcf	3,5	;RP0=0, select bank0
   988  0078  1303               	bcf	3,6	;RP1=0, select bank0
   989  0079  0358               	decf	_banderaADC,w
   990  007A  1903               	btfsc	3,2
   991  007B  294F               	goto	l2421
   992  007C  2976               	goto	l2439
   993  007D                     l2387:	
   994                           
   995                           ;main.c: 76:                     valorADC_CH5 = AnalogRead_8('H');
   996  007D  3048               	movlw	72
   997  007E  120A  118A  2741  120A  118A  	fcall	_AnalogRead_8
   998  0083  1283               	bcf	3,5	;RP0=0, select bank0
   999  0084  1303               	bcf	3,6	;RP1=0, select bank0
  1000  0085  00D4               	movwf	??_main
  1001  0086  0854               	movf	??_main,w
  1002  0087  00BC               	movwf	_valorADC_CH5
  1003                           
  1004                           ;main.c: 77:                     ADC_CHselect(0);
  1005  0088  3000               	movlw	0
  1006  0089  120A  118A  248C  120A  118A  	fcall	_ADC_CHselect
  1007                           
  1008                           ;main.c: 78:                     num1 = mapear(valorADC_CH5, 255, 5);
  1009  008E  30FF               	movlw	255
  1010  008F  1283               	bcf	3,5	;RP0=0, select bank0
  1011  0090  1303               	bcf	3,6	;RP1=0, select bank0
  1012  0091  00D4               	movwf	??_main
  1013  0092  0854               	movf	??_main,w
  1014  0093  00F8               	movwf	mapear@limReal
  1015  0094  3005               	movlw	5
  1016  0095  00D5               	movwf	??_main+1
  1017  0096  0855               	movf	??_main+1,w
  1018  0097  00F9               	movwf	mapear@limSup
  1019  0098  083C               	movf	_valorADC_CH5,w
  1020  0099  120A  118A  235F  120A  118A  	fcall	_mapear
  1021  009E  1283               	bcf	3,5	;RP0=0, select bank0
  1022  009F  1303               	bcf	3,6	;RP1=0, select bank0
  1023  00A0  00D6               	movwf	??_main+2
  1024  00A1  0856               	movf	??_main+2,w
  1025  00A2  00FB               	movwf	_num1
  1026                           
  1027                           ;main.c: 79:                     LCD_Set_Cursor(2, 0);
  1028  00A3  01F5               	clrf	LCD_Set_Cursor@columna
  1029  00A4  3002               	movlw	2
  1030  00A5  120A  118A  26D2  120A  118A  	fcall	_LCD_Set_Cursor
  1031                           
  1032                           ;main.c: 80:                     LCD_Write_Character(uint_to_char(num1[0]));
  1033  00AA  087B               	movf	_num1,w
  1034  00AB  0084               	movwf	4
  1035  00AC  1383               	bcf	3,7	;select IRP bank0
  1036  00AD  0800               	movf	0,w
  1037  00AE  120A  118A  265E  120A  118A  	fcall	_uint_to_char
  1038  00B3  120A  118A  2787  120A  118A  	fcall	_LCD_Write_Character
  1039                           
  1040                           ;main.c: 81:                     LCD_Write_Character('.');
  1041  00B8  302E               	movlw	46
  1042  00B9  120A  118A  2787  120A  118A  	fcall	_LCD_Write_Character
  1043                           
  1044                           ;main.c: 82:                     LCD_Write_Character(uint_to_char(num1[1]));
  1045  00BE  087B               	movf	_num1,w
  1046  00BF  3E02               	addlw	2
  1047  00C0  0084               	movwf	4
  1048  00C1  1383               	bcf	3,7	;select IRP bank0
  1049  00C2  0800               	movf	0,w
  1050  00C3  120A  118A  265E  120A  118A  	fcall	_uint_to_char
  1051  00C8  120A  118A  2787  120A  118A  	fcall	_LCD_Write_Character
  1052                           
  1053                           ;main.c: 83:                     LCD_Write_Character(uint_to_char(num1[2]));
  1054  00CD  087B               	movf	_num1,w
  1055  00CE  3E04               	addlw	4
  1056  00CF  0084               	movwf	4
  1057  00D0  1383               	bcf	3,7	;select IRP bank0
  1058  00D1  0800               	movf	0,w
  1059  00D2  120A  118A  265E  120A  118A  	fcall	_uint_to_char
  1060  00D7  120A  118A  2787  120A  118A  	fcall	_LCD_Write_Character
  1061                           
  1062                           ;main.c: 84:                     LCD_Write_Character('V');
  1063  00DC  3056               	movlw	86
  1064  00DD  120A  118A  2787  120A  118A  	fcall	_LCD_Write_Character
  1065                           
  1066                           ;main.c: 85:                     break;
  1067  00E2  2962               	goto	l2423
  1068  00E3                     l2403:	
  1069                           
  1070                           ;main.c: 87:                     valorADC_CH0 = AnalogRead_8('H');
  1071  00E3  3048               	movlw	72
  1072  00E4  120A  118A  2741  120A  118A  	fcall	_AnalogRead_8
  1073  00E9  1283               	bcf	3,5	;RP0=0, select bank0
  1074  00EA  1303               	bcf	3,6	;RP1=0, select bank0
  1075  00EB  00D4               	movwf	??_main
  1076  00EC  0854               	movf	??_main,w
  1077  00ED  00BB               	movwf	_valorADC_CH0
  1078                           
  1079                           ;main.c: 88:                     ADC_CHselect(5);
  1080  00EE  3005               	movlw	5
  1081  00EF  120A  118A  248C  120A  118A  	fcall	_ADC_CHselect
  1082                           
  1083                           ;main.c: 89:                     num2 = mapear(valorADC_CH0, 255, 5);
  1084  00F4  30FF               	movlw	255
  1085  00F5  1283               	bcf	3,5	;RP0=0, select bank0
  1086  00F6  1303               	bcf	3,6	;RP1=0, select bank0
  1087  00F7  00D4               	movwf	??_main
  1088  00F8  0854               	movf	??_main,w
  1089  00F9  00F8               	movwf	mapear@limReal
  1090  00FA  3005               	movlw	5
  1091  00FB  00D5               	movwf	??_main+1
  1092  00FC  0855               	movf	??_main+1,w
  1093  00FD  00F9               	movwf	mapear@limSup
  1094  00FE  083B               	movf	_valorADC_CH0,w
  1095  00FF  120A  118A  235F  120A  118A  	fcall	_mapear
  1096  0104  1283               	bcf	3,5	;RP0=0, select bank0
  1097  0105  1303               	bcf	3,6	;RP1=0, select bank0
  1098  0106  00D6               	movwf	??_main+2
  1099  0107  0856               	movf	??_main+2,w
  1100  0108  00FA               	movwf	_num2
  1101                           
  1102                           ;main.c: 90:                     LCD_Set_Cursor(2, 6);
  1103  0109  3006               	movlw	6
  1104  010A  00D4               	movwf	??_main
  1105  010B  0854               	movf	??_main,w
  1106  010C  00F5               	movwf	LCD_Set_Cursor@columna
  1107  010D  3002               	movlw	2
  1108  010E  120A  118A  26D2  120A  118A  	fcall	_LCD_Set_Cursor
  1109                           
  1110                           ;main.c: 91:                     LCD_Write_Character(uint_to_char(num2[0]));
  1111  0113  087A               	movf	_num2,w
  1112  0114  0084               	movwf	4
  1113  0115  1383               	bcf	3,7	;select IRP bank0
  1114  0116  0800               	movf	0,w
  1115  0117  120A  118A  265E  120A  118A  	fcall	_uint_to_char
  1116  011C  120A  118A  2787  120A  118A  	fcall	_LCD_Write_Character
  1117                           
  1118                           ;main.c: 92:                     LCD_Write_Character('.');
  1119  0121  302E               	movlw	46
  1120  0122  120A  118A  2787  120A  118A  	fcall	_LCD_Write_Character
  1121                           
  1122                           ;main.c: 93:                     LCD_Write_Character(uint_to_char(num2[1]));
  1123  0127  087A               	movf	_num2,w
  1124  0128  3E02               	addlw	2
  1125  0129  0084               	movwf	4
  1126  012A  1383               	bcf	3,7	;select IRP bank0
  1127  012B  0800               	movf	0,w
  1128  012C  120A  118A  265E  120A  118A  	fcall	_uint_to_char
  1129  0131  120A  118A  2787  120A  118A  	fcall	_LCD_Write_Character
  1130                           
  1131                           ;main.c: 94:                     LCD_Write_Character(uint_to_char(num2[2]));
  1132  0136  087A               	movf	_num2,w
  1133  0137  3E04               	addlw	4
  1134  0138  0084               	movwf	4
  1135  0139  1383               	bcf	3,7	;select IRP bank0
  1136  013A  0800               	movf	0,w
  1137  013B  120A  118A  265E  120A  118A  	fcall	_uint_to_char
  1138  0140  120A  118A  2787  120A  118A  	fcall	_LCD_Write_Character
  1139                           
  1140                           ;main.c: 95:                     LCD_Write_Character('V');
  1141  0145  3056               	movlw	86
  1142  0146  120A  118A  2787  120A  118A  	fcall	_LCD_Write_Character
  1143                           
  1144                           ;main.c: 96:                     break;
  1145  014B  2962               	goto	l2423
  1146  014C                     l2419:	
  1147                           
  1148                           ;main.c: 98:                     valorADC_CH0 = 0;
  1149  014C  01BB               	clrf	_valorADC_CH0
  1150                           
  1151                           ;main.c: 99:                     valorADC_CH5 = 0;
  1152  014D  01BC               	clrf	_valorADC_CH5
  1153                           
  1154                           ;main.c: 100:             }
  1155  014E  2962               	goto	l2423
  1156  014F                     l2421:	
  1157  014F  0C1F               	rrf	31,w	;volatile
  1158  0150  00D4               	movwf	??_main
  1159  0151  0C54               	rrf	??_main,w
  1160  0152  390F               	andlw	15
  1161  0153  00D5               	movwf	??_main+1
  1162  0154  01D6               	clrf	??_main+2
  1163                           
  1164                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1165                           ; Switch size 1, requested type "simple"
  1166                           ; Number of cases is 1, Range of values is 0 to 0
  1167                           ; switch strategies available:
  1168                           ; Name         Instructions Cycles
  1169                           ; simple_byte            4     3 (average)
  1170                           ; direct_byte           11     8 (fixed)
  1171                           ; jumptable            260     6 (fixed)
  1172                           ;	Chosen strategy is simple_byte
  1173  0155  0856               	movf	??_main+2,w
  1174  0156  3A00               	xorlw	0	; case 0
  1175  0157  1903               	skipnz
  1176  0158  295A               	goto	l2663
  1177  0159  294C               	goto	l2419
  1178  015A                     l2663:	
  1179                           
  1180                           ; Switch size 1, requested type "simple"
  1181                           ; Number of cases is 2, Range of values is 0 to 5
  1182                           ; switch strategies available:
  1183                           ; Name         Instructions Cycles
  1184                           ; simple_byte            7     4 (average)
  1185                           ; direct_byte           26     8 (fixed)
  1186                           ; jumptable            260     6 (fixed)
  1187                           ;	Chosen strategy is simple_byte
  1188  015A  0855               	movf	??_main+1,w
  1189  015B  3A00               	xorlw	0	; case 0
  1190  015C  1903               	skipnz
  1191  015D  28E3               	goto	l2403
  1192  015E  3A05               	xorlw	5	; case 5
  1193  015F  1903               	skipnz
  1194  0160  287D               	goto	l2387
  1195  0161  294C               	goto	l2419
  1196  0162                     l2423:	
  1197                           
  1198                           ;main.c: 101:             banderaADC = 0;
  1199  0162  1283               	bcf	3,5	;RP0=0, select bank0
  1200  0163  1303               	bcf	3,6	;RP1=0, select bank0
  1201  0164  01D8               	clrf	_banderaADC
  1202                           
  1203                           ;main.c: 102:             PIR1bits.ADIF = 0;
  1204  0165  130C               	bcf	12,6	;volatile
  1205                           
  1206                           ;main.c: 103:             PIE1bits.ADIE = 1;
  1207  0166  1683               	bsf	3,5	;RP0=1, select bank1
  1208  0167  1303               	bcf	3,6	;RP1=0, select bank1
  1209  0168  170C               	bsf	12,6	;volatile
  1210                           
  1211                           ;main.c: 104:             ADCON0bits.GO_nDONE = 1;
  1212  0169  1283               	bcf	3,5	;RP0=0, select bank0
  1213  016A  1303               	bcf	3,6	;RP1=0, select bank0
  1214  016B  149F               	bsf	31,1	;volatile
  1215  016C  2976               	goto	l2439
  1216  016D                     l2431:	
  1217                           
  1218                           ;main.c: 108:                     contador ++;
  1219  016D  3001               	movlw	1
  1220  016E  00D4               	movwf	??_main
  1221  016F  0854               	movf	??_main,w
  1222  0170  07B8               	addwf	_contador,f
  1223  0171                     l2433:	
  1224                           
  1225                           ;main.c: 109:                     valorSerial = 0;
  1226  0171  01D7               	clrf	_valorSerial
  1227                           
  1228                           ;main.c: 110:                     break;
  1229  0172  2986               	goto	l2441
  1230  0173                     l2435:	
  1231                           
  1232                           ;main.c: 112:                     contador --;
  1233  0173  3001               	movlw	1
  1234  0174  02B8               	subwf	_contador,f
  1235  0175  2971               	goto	l2433
  1236  0176                     l2439:	
  1237  0176  0857               	movf	_valorSerial,w
  1238  0177  00D4               	movwf	??_main
  1239  0178  01D5               	clrf	??_main+1
  1240                           
  1241                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1242                           ; Switch size 1, requested type "simple"
  1243                           ; Number of cases is 1, Range of values is 0 to 0
  1244                           ; switch strategies available:
  1245                           ; Name         Instructions Cycles
  1246                           ; simple_byte            4     3 (average)
  1247                           ; direct_byte           11     8 (fixed)
  1248                           ; jumptable            260     6 (fixed)
  1249                           ;	Chosen strategy is simple_byte
  1250  0179  0855               	movf	??_main+1,w
  1251  017A  3A00               	xorlw	0	; case 0
  1252  017B  1903               	skipnz
  1253  017C  297E               	goto	l2665
  1254  017D  2986               	goto	l2441
  1255  017E                     l2665:	
  1256                           
  1257                           ; Switch size 1, requested type "simple"
  1258                           ; Number of cases is 2, Range of values is 43 to 45
  1259                           ; switch strategies available:
  1260                           ; Name         Instructions Cycles
  1261                           ; simple_byte            7     4 (average)
  1262                           ; direct_byte           20    11 (fixed)
  1263                           ; jumptable            263     9 (fixed)
  1264                           ;	Chosen strategy is simple_byte
  1265  017E  0854               	movf	??_main,w
  1266  017F  3A2B               	xorlw	43	; case 43
  1267  0180  1903               	skipnz
  1268  0181  296D               	goto	l2431
  1269  0182  3A06               	xorlw	6	; case 45
  1270  0183  1903               	skipnz
  1271  0184  2973               	goto	l2435
  1272  0185  2986               	goto	l2441
  1273  0186                     l2441:	
  1274                           
  1275                           ;main.c: 119:             num3 = uint_to_array(contador);
  1276  0186  0838               	movf	_contador,w
  1277  0187  120A  118A  2517  120A  118A  	fcall	_uint_to_array
  1278  018C  1283               	bcf	3,5	;RP0=0, select bank0
  1279  018D  1303               	bcf	3,6	;RP1=0, select bank0
  1280  018E  00D4               	movwf	??_main
  1281  018F  0854               	movf	??_main,w
  1282  0190  00BA               	movwf	_num3
  1283                           
  1284                           ;main.c: 120:             LCD_Set_Cursor(2,13);
  1285  0191  300D               	movlw	13
  1286  0192  00D4               	movwf	??_main
  1287  0193  0854               	movf	??_main,w
  1288  0194  00F5               	movwf	LCD_Set_Cursor@columna
  1289  0195  3002               	movlw	2
  1290  0196  120A  118A  26D2  120A  118A  	fcall	_LCD_Set_Cursor
  1291                           
  1292                           ;main.c: 121:             LCD_Write_Character(uint_to_char(num3[0]));
  1293  019B  1283               	bcf	3,5	;RP0=0, select bank0
  1294  019C  1303               	bcf	3,6	;RP1=0, select bank0
  1295  019D  083A               	movf	_num3,w
  1296  019E  0084               	movwf	4
  1297  019F  1383               	bcf	3,7	;select IRP bank0
  1298  01A0  0800               	movf	0,w
  1299  01A1  120A  118A  265E  120A  118A  	fcall	_uint_to_char
  1300  01A6  120A  118A  2787  120A  118A  	fcall	_LCD_Write_Character
  1301                           
  1302                           ;main.c: 122:             LCD_Write_Character(uint_to_char(num3[1]));
  1303  01AB  1283               	bcf	3,5	;RP0=0, select bank0
  1304  01AC  1303               	bcf	3,6	;RP1=0, select bank0
  1305  01AD  083A               	movf	_num3,w
  1306  01AE  3E02               	addlw	2
  1307  01AF  0084               	movwf	4
  1308  01B0  1383               	bcf	3,7	;select IRP bank0
  1309  01B1  0800               	movf	0,w
  1310  01B2  120A  118A  265E  120A  118A  	fcall	_uint_to_char
  1311  01B7  120A  118A  2787  120A  118A  	fcall	_LCD_Write_Character
  1312                           
  1313                           ;main.c: 123:             LCD_Write_Character(uint_to_char(num3[2]));
  1314  01BC  1283               	bcf	3,5	;RP0=0, select bank0
  1315  01BD  1303               	bcf	3,6	;RP1=0, select bank0
  1316  01BE  083A               	movf	_num3,w
  1317  01BF  3E04               	addlw	4
  1318  01C0  0084               	movwf	4
  1319  01C1  1383               	bcf	3,7	;select IRP bank0
  1320  01C2  0800               	movf	0,w
  1321  01C3  120A  118A  265E  120A  118A  	fcall	_uint_to_char
  1322  01C8  120A  118A  2787  120A  118A  	fcall	_LCD_Write_Character
  1323  01CD  285E               	goto	l2377
  1324  01CE                     __end_of_main:	
  1325                           
  1326                           	psect	text1
  1327  065E                     __ptext1:	
  1328 ;; *************** function _uint_to_char *****************
  1329 ;; Defined at:
  1330 ;;		line 116 in file "LCD_8bits.c"
  1331 ;; Parameters:    Size  Location     Type
  1332 ;;  numero          1    wreg     unsigned char 
  1333 ;; Auto vars:     Size  Location     Type
  1334 ;;  numero          1    4[COMMON] unsigned char 
  1335 ;;  numChr          1    5[COMMON] unsigned char 
  1336 ;; Return value:  Size  Location     Type
  1337 ;;                  1    wreg      unsigned char 
  1338 ;; Registers used:
  1339 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1340 ;; Tracked objects:
  1341 ;;		On entry : 0/0
  1342 ;;		On exit  : 0/0
  1343 ;;		Unchanged: 0/0
  1344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1345 ;;      Params:         0       0       0       0       0
  1346 ;;      Locals:         2       0       0       0       0
  1347 ;;      Temps:          2       0       0       0       0
  1348 ;;      Totals:         4       0       0       0       0
  1349 ;;Total ram usage:        4 bytes
  1350 ;; Hardware stack levels used:    1
  1351 ;; Hardware stack levels required when called:    1
  1352 ;; This function calls:
  1353 ;;		Nothing
  1354 ;; This function is called by:
  1355 ;;		_main
  1356 ;; This function uses a non-reentrant model
  1357 ;;
  1358                           
  1359                           
  1360                           ;psect for function _uint_to_char
  1361  065E                     _uint_to_char:	
  1362                           
  1363                           ;incstack = 0
  1364                           ; Regs used in _uint_to_char: [wreg-fsr0h+status,2+status,0]
  1365                           ;uint_to_char@numero stored from wreg
  1366  065E  00F4               	movwf	uint_to_char@numero
  1367                           
  1368                           ;LCD_8bits.c: 118:     switch (numero){
  1369  065F  2E79               	goto	l1885
  1370  0660                     l1863:	
  1371                           
  1372                           ;LCD_8bits.c: 120:             numChr = 48;
  1373  0660  3030               	movlw	48
  1374  0661  2E75               	goto	L10
  1375  0662                     l1865:	
  1376                           ;LCD_8bits.c: 121:             break;
  1377                           
  1378                           
  1379                           ;LCD_8bits.c: 123:             numChr = 49;
  1380  0662  3031               	movlw	49
  1381  0663  2E75               	goto	L10
  1382  0664                     l1867:	
  1383                           ;LCD_8bits.c: 124:             break;
  1384                           
  1385                           
  1386                           ;LCD_8bits.c: 126:             numChr = 50;
  1387  0664  3032               	movlw	50
  1388  0665  2E75               	goto	L10
  1389  0666                     l1869:	
  1390                           ;LCD_8bits.c: 127:             break;
  1391                           
  1392                           
  1393                           ;LCD_8bits.c: 129:             numChr = 51;
  1394  0666  3033               	movlw	51
  1395  0667  2E75               	goto	L10
  1396  0668                     l1871:	
  1397                           ;LCD_8bits.c: 130:             break;
  1398                           
  1399                           
  1400                           ;LCD_8bits.c: 132:             numChr = 52;
  1401  0668  3034               	movlw	52
  1402  0669  2E75               	goto	L10
  1403  066A                     l1873:	
  1404                           ;LCD_8bits.c: 133:             break;
  1405                           
  1406                           
  1407                           ;LCD_8bits.c: 135:             numChr = 53;
  1408  066A  3035               	movlw	53
  1409  066B  2E75               	goto	L10
  1410  066C                     l1875:	
  1411                           ;LCD_8bits.c: 136:             break;
  1412                           
  1413                           
  1414                           ;LCD_8bits.c: 138:             numChr = 54;
  1415  066C  3036               	movlw	54
  1416  066D  2E75               	goto	L10
  1417  066E                     l1877:	
  1418                           ;LCD_8bits.c: 139:             break;
  1419                           
  1420                           
  1421                           ;LCD_8bits.c: 141:             numChr = 55;
  1422  066E  3037               	movlw	55
  1423  066F  2E75               	goto	L10
  1424  0670                     l1879:	
  1425                           ;LCD_8bits.c: 142:             break;
  1426                           
  1427                           
  1428                           ;LCD_8bits.c: 144:             numChr = 56;
  1429  0670  3038               	movlw	56
  1430  0671  2E75               	goto	L10
  1431  0672                     l1881:	
  1432                           ;LCD_8bits.c: 145:             break;
  1433                           
  1434                           
  1435                           ;LCD_8bits.c: 147:             numChr = 57;
  1436  0672  3039               	movlw	57
  1437  0673  2E75               	goto	L10
  1438  0674                     l1883:	
  1439                           ;LCD_8bits.c: 148:             break;
  1440                           
  1441                           
  1442                           ;LCD_8bits.c: 150:             numChr = 214;
  1443  0674  30D6               	movlw	214
  1444  0675                     L10:	
  1445  0675  00F2               	movwf	??_uint_to_char
  1446  0676  0872               	movf	??_uint_to_char,w
  1447  0677  00F5               	movwf	uint_to_char@numChr
  1448                           
  1449                           ;LCD_8bits.c: 151:     }
  1450  0678  2EA1               	goto	l1887
  1451  0679                     l1885:	
  1452  0679  0874               	movf	uint_to_char@numero,w
  1453  067A  00F2               	movwf	??_uint_to_char
  1454  067B  01F3               	clrf	??_uint_to_char+1
  1455                           
  1456                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1457                           ; Switch size 1, requested type "simple"
  1458                           ; Number of cases is 1, Range of values is 0 to 0
  1459                           ; switch strategies available:
  1460                           ; Name         Instructions Cycles
  1461                           ; simple_byte            4     3 (average)
  1462                           ; direct_byte           11     8 (fixed)
  1463                           ; jumptable            260     6 (fixed)
  1464                           ;	Chosen strategy is simple_byte
  1465  067C  0873               	movf	??_uint_to_char+1,w
  1466  067D  3A00               	xorlw	0	; case 0
  1467  067E  1903               	skipnz
  1468  067F  2E81               	goto	l2667
  1469  0680  2E74               	goto	l1883
  1470  0681                     l2667:	
  1471                           
  1472                           ; Switch size 1, requested type "simple"
  1473                           ; Number of cases is 10, Range of values is 0 to 9
  1474                           ; switch strategies available:
  1475                           ; Name         Instructions Cycles
  1476                           ; simple_byte           31    16 (average)
  1477                           ; direct_byte           38     8 (fixed)
  1478                           ; jumptable            260     6 (fixed)
  1479                           ;	Chosen strategy is simple_byte
  1480  0681  0872               	movf	??_uint_to_char,w
  1481  0682  3A00               	xorlw	0	; case 0
  1482  0683  1903               	skipnz
  1483  0684  2E60               	goto	l1863
  1484  0685  3A01               	xorlw	1	; case 1
  1485  0686  1903               	skipnz
  1486  0687  2E62               	goto	l1865
  1487  0688  3A03               	xorlw	3	; case 2
  1488  0689  1903               	skipnz
  1489  068A  2E64               	goto	l1867
  1490  068B  3A01               	xorlw	1	; case 3
  1491  068C  1903               	skipnz
  1492  068D  2E66               	goto	l1869
  1493  068E  3A07               	xorlw	7	; case 4
  1494  068F  1903               	skipnz
  1495  0690  2E68               	goto	l1871
  1496  0691  3A01               	xorlw	1	; case 5
  1497  0692  1903               	skipnz
  1498  0693  2E6A               	goto	l1873
  1499  0694  3A03               	xorlw	3	; case 6
  1500  0695  1903               	skipnz
  1501  0696  2E6C               	goto	l1875
  1502  0697  3A01               	xorlw	1	; case 7
  1503  0698  1903               	skipnz
  1504  0699  2E6E               	goto	l1877
  1505  069A  3A0F               	xorlw	15	; case 8
  1506  069B  1903               	skipnz
  1507  069C  2E70               	goto	l1879
  1508  069D  3A01               	xorlw	1	; case 9
  1509  069E  1903               	skipnz
  1510  069F  2E72               	goto	l1881
  1511  06A0  2E74               	goto	l1883
  1512  06A1                     l1887:	
  1513                           
  1514                           ;LCD_8bits.c: 152:     return(numChr);
  1515  06A1  0875               	movf	uint_to_char@numChr,w
  1516  06A2  0008               	return
  1517  06A3                     __end_of_uint_to_char:	
  1518                           
  1519                           	psect	text2
  1520  0517                     __ptext2:	
  1521 ;; *************** function _uint_to_array *****************
  1522 ;; Defined at:
  1523 ;;		line 155 in file "LCD_8bits.c"
  1524 ;; Parameters:    Size  Location     Type
  1525 ;;  numero          1    wreg     unsigned char 
  1526 ;; Auto vars:     Size  Location     Type
  1527 ;;  numero          1   22[BANK0 ] unsigned char 
  1528 ;;  resultado       6   15[BANK0 ] unsigned int [3]
  1529 ;;  centenas        1   21[BANK0 ] unsigned char 
  1530 ;;  decenas         1   14[BANK0 ] unsigned char 
  1531 ;; Return value:  Size  Location     Type
  1532 ;;                  1    wreg      PTR unsigned int 
  1533 ;; Registers used:
  1534 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1535 ;; Tracked objects:
  1536 ;;		On entry : 0/0
  1537 ;;		On exit  : 0/0
  1538 ;;		Unchanged: 0/0
  1539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1540 ;;      Params:         0       0       0       0       0
  1541 ;;      Locals:         0       9       0       0       0
  1542 ;;      Temps:          0       6       0       0       0
  1543 ;;      Totals:         0      15       0       0       0
  1544 ;;Total ram usage:       15 bytes
  1545 ;; Hardware stack levels used:    1
  1546 ;; Hardware stack levels required when called:    2
  1547 ;; This function calls:
  1548 ;;		___awdiv
  1549 ;;		___wmul
  1550 ;; This function is called by:
  1551 ;;		_main
  1552 ;; This function uses a non-reentrant model
  1553 ;;
  1554                           
  1555                           
  1556                           ;psect for function _uint_to_array
  1557  0517                     _uint_to_array:	
  1558                           
  1559                           ;incstack = 0
  1560                           ; Regs used in _uint_to_array: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1561                           ;uint_to_array@numero stored from wreg
  1562  0517  1283               	bcf	3,5	;RP0=0, select bank0
  1563  0518  1303               	bcf	3,6	;RP1=0, select bank0
  1564  0519  00D3               	movwf	uint_to_array@numero
  1565                           
  1566                           ;LCD_8bits.c: 156:     uint16_t resultado[3] = {0,0,0};
  1567  051A  304C               	movlw	uint_to_array@resultado& (0+255)
  1568  051B  0084               	movwf	4
  1569  051C  3006               	movlw	6
  1570  051D  00FF               	movwf	127
  1571  051E                     u1110:	
  1572  051E  1383               	bcf	3,7	;select IRP bank0
  1573  051F  0180               	clrf	0
  1574  0520  0A84               	incf	4,f
  1575  0521  0BFF               	decfsz	127,f
  1576  0522  2D1E               	goto	u1110
  1577                           
  1578                           ;LCD_8bits.c: 157:     resultado[0] = numero/100;
  1579  0523  3064               	movlw	100
  1580  0524  00BD               	movwf	___awdiv@divisor
  1581  0525  3000               	movlw	0
  1582  0526  00BE               	movwf	___awdiv@divisor+1
  1583  0527  0853               	movf	uint_to_array@numero,w
  1584  0528  00C5               	movwf	??_uint_to_array
  1585  0529  01C6               	clrf	??_uint_to_array+1
  1586  052A  0845               	movf	??_uint_to_array,w
  1587  052B  00BF               	movwf	___awdiv@dividend
  1588  052C  0846               	movf	??_uint_to_array+1,w
  1589  052D  00C0               	movwf	___awdiv@dividend+1
  1590  052E  120A  118A  2603  120A  118A  	fcall	___awdiv
  1591  0533  1283               	bcf	3,5	;RP0=0, select bank0
  1592  0534  1303               	bcf	3,6	;RP1=0, select bank0
  1593  0535  083E               	movf	?___awdiv+1,w
  1594  0536  00CD               	movwf	uint_to_array@resultado+1
  1595  0537  083D               	movf	?___awdiv,w
  1596  0538  00CC               	movwf	uint_to_array@resultado
  1597                           
  1598                           ;LCD_8bits.c: 158:     uint8_t centenas = resultado[0];
  1599  0539  084C               	movf	uint_to_array@resultado,w
  1600  053A  00C5               	movwf	??_uint_to_array
  1601  053B  0845               	movf	??_uint_to_array,w
  1602  053C  00D2               	movwf	uint_to_array@centenas
  1603                           
  1604                           ;LCD_8bits.c: 159:     resultado[1] = (numero - (centenas *100))/10;
  1605  053D  300A               	movlw	10
  1606  053E  00BD               	movwf	___awdiv@divisor
  1607  053F  3000               	movlw	0
  1608  0540  00BE               	movwf	___awdiv@divisor+1
  1609  0541  0852               	movf	uint_to_array@centenas,w
  1610  0542  00C5               	movwf	??_uint_to_array
  1611  0543  01C6               	clrf	??_uint_to_array+1
  1612  0544  0845               	movf	??_uint_to_array,w
  1613  0545  00F2               	movwf	___wmul@multiplier
  1614  0546  0846               	movf	??_uint_to_array+1,w
  1615  0547  00F3               	movwf	___wmul@multiplier+1
  1616  0548  309C               	movlw	156
  1617  0549  00F4               	movwf	___wmul@multiplicand
  1618  054A  30FF               	movlw	255
  1619  054B  00F5               	movwf	___wmul@multiplicand+1
  1620  054C  120A  118A  2720  120A  118A  	fcall	___wmul
  1621  0551  1283               	bcf	3,5	;RP0=0, select bank0
  1622  0552  1303               	bcf	3,6	;RP1=0, select bank0
  1623  0553  0853               	movf	uint_to_array@numero,w
  1624  0554  0772               	addwf	?___wmul,w
  1625  0555  00BF               	movwf	___awdiv@dividend
  1626  0556  0873               	movf	?___wmul+1,w
  1627  0557  1803               	skipnc
  1628  0558  0A73               	incf	?___wmul+1,w
  1629  0559  00C0               	movwf	___awdiv@dividend+1
  1630  055A  120A  118A  2603  120A  118A  	fcall	___awdiv
  1631  055F  1283               	bcf	3,5	;RP0=0, select bank0
  1632  0560  1303               	bcf	3,6	;RP1=0, select bank0
  1633  0561  083E               	movf	?___awdiv+1,w
  1634  0562  00CF               	movwf	uint_to_array@resultado+3
  1635  0563  083D               	movf	?___awdiv,w
  1636  0564  00CE               	movwf	uint_to_array@resultado+2
  1637                           
  1638                           ;LCD_8bits.c: 160:     uint8_t decenas = resultado[1];
  1639  0565  084E               	movf	uint_to_array@resultado+2,w
  1640  0566  00C5               	movwf	??_uint_to_array
  1641  0567  0845               	movf	??_uint_to_array,w
  1642  0568  00CB               	movwf	uint_to_array@decenas
  1643                           
  1644                           ;LCD_8bits.c: 161:     resultado[2] = numero -(centenas*100+decenas*10);
  1645  0569  0852               	movf	uint_to_array@centenas,w
  1646  056A  00C5               	movwf	??_uint_to_array
  1647  056B  01C6               	clrf	??_uint_to_array+1
  1648  056C  0845               	movf	??_uint_to_array,w
  1649  056D  00F2               	movwf	___wmul@multiplier
  1650  056E  0846               	movf	??_uint_to_array+1,w
  1651  056F  00F3               	movwf	___wmul@multiplier+1
  1652  0570  309C               	movlw	156
  1653  0571  00F4               	movwf	___wmul@multiplicand
  1654  0572  30FF               	movlw	255
  1655  0573  00F5               	movwf	___wmul@multiplicand+1
  1656  0574  120A  118A  2720  120A  118A  	fcall	___wmul
  1657  0579  1283               	bcf	3,5	;RP0=0, select bank0
  1658  057A  1303               	bcf	3,6	;RP1=0, select bank0
  1659  057B  0853               	movf	uint_to_array@numero,w
  1660  057C  0772               	addwf	?___wmul,w
  1661  057D  00C7               	movwf	??_uint_to_array+2
  1662  057E  0873               	movf	?___wmul+1,w
  1663  057F  1803               	skipnc
  1664  0580  0A73               	incf	?___wmul+1,w
  1665  0581  00C8               	movwf	??_uint_to_array+3
  1666  0582  084B               	movf	uint_to_array@decenas,w
  1667  0583  00C9               	movwf	??_uint_to_array+4
  1668  0584  01CA               	clrf	??_uint_to_array+5
  1669  0585  0849               	movf	??_uint_to_array+4,w
  1670  0586  00F2               	movwf	___wmul@multiplier
  1671  0587  084A               	movf	??_uint_to_array+5,w
  1672  0588  00F3               	movwf	___wmul@multiplier+1
  1673  0589  30F6               	movlw	246
  1674  058A  00F4               	movwf	___wmul@multiplicand
  1675  058B  30FF               	movlw	255
  1676  058C  00F5               	movwf	___wmul@multiplicand+1
  1677  058D  120A  118A  2720   	fcall	___wmul
  1678  0590  0872               	movf	?___wmul,w
  1679  0591  1283               	bcf	3,5	;RP0=0, select bank0
  1680  0592  1303               	bcf	3,6	;RP1=0, select bank0
  1681  0593  0747               	addwf	??_uint_to_array+2,w
  1682  0594  00D0               	movwf	uint_to_array@resultado+4
  1683  0595  0873               	movf	?___wmul+1,w
  1684  0596  1803               	skipnc
  1685  0597  0A73               	incf	?___wmul+1,w
  1686  0598  0748               	addwf	??_uint_to_array+3,w
  1687  0599  00D1               	movwf	uint_to_array@resultado+5
  1688                           
  1689                           ;LCD_8bits.c: 162:     return(resultado);
  1690  059A  304C               	movlw	(low (uint_to_array@resultado| 0))& (0+255)
  1691  059B  0008               	return
  1692  059C                     __end_of_uint_to_array:	
  1693                           
  1694                           	psect	text3
  1695  0603                     __ptext3:	
  1696 ;; *************** function ___awdiv *****************
  1697 ;; Defined at:
  1698 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\awdiv.c"
  1699 ;; Parameters:    Size  Location     Type
  1700 ;;  divisor         2    0[BANK0 ] int 
  1701 ;;  dividend        2    2[BANK0 ] int 
  1702 ;; Auto vars:     Size  Location     Type
  1703 ;;  quotient        2    6[BANK0 ] int 
  1704 ;;  sign            1    5[BANK0 ] unsigned char 
  1705 ;;  counter         1    4[BANK0 ] unsigned char 
  1706 ;; Return value:  Size  Location     Type
  1707 ;;                  2    0[BANK0 ] int 
  1708 ;; Registers used:
  1709 ;;		wreg, status,2, status,0
  1710 ;; Tracked objects:
  1711 ;;		On entry : 0/0
  1712 ;;		On exit  : 0/0
  1713 ;;		Unchanged: 0/0
  1714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1715 ;;      Params:         0       4       0       0       0
  1716 ;;      Locals:         0       4       0       0       0
  1717 ;;      Temps:          1       0       0       0       0
  1718 ;;      Totals:         1       8       0       0       0
  1719 ;;Total ram usage:        9 bytes
  1720 ;; Hardware stack levels used:    1
  1721 ;; Hardware stack levels required when called:    1
  1722 ;; This function calls:
  1723 ;;		Nothing
  1724 ;; This function is called by:
  1725 ;;		_uint_to_array
  1726 ;; This function uses a non-reentrant model
  1727 ;;
  1728                           
  1729                           
  1730                           ;psect for function ___awdiv
  1731  0603                     ___awdiv:	
  1732                           
  1733                           ;incstack = 0
  1734                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  1735  0603  1283               	bcf	3,5	;RP0=0, select bank0
  1736  0604  1303               	bcf	3,6	;RP1=0, select bank0
  1737  0605  01C2               	clrf	___awdiv@sign
  1738  0606  1FBE               	btfss	___awdiv@divisor+1,7
  1739  0607  2E0F               	goto	l2291
  1740  0608  09BD               	comf	___awdiv@divisor,f
  1741  0609  09BE               	comf	___awdiv@divisor+1,f
  1742  060A  0ABD               	incf	___awdiv@divisor,f
  1743  060B  1903               	skipnz
  1744  060C  0ABE               	incf	___awdiv@divisor+1,f
  1745  060D  01C2               	clrf	___awdiv@sign
  1746  060E  0AC2               	incf	___awdiv@sign,f
  1747  060F                     l2291:	
  1748  060F  1FC0               	btfss	___awdiv@dividend+1,7
  1749  0610  2E1A               	goto	l2297
  1750  0611  09BF               	comf	___awdiv@dividend,f
  1751  0612  09C0               	comf	___awdiv@dividend+1,f
  1752  0613  0ABF               	incf	___awdiv@dividend,f
  1753  0614  1903               	skipnz
  1754  0615  0AC0               	incf	___awdiv@dividend+1,f
  1755  0616  3001               	movlw	1
  1756  0617  00F8               	movwf	??___awdiv
  1757  0618  0878               	movf	??___awdiv,w
  1758  0619  06C2               	xorwf	___awdiv@sign,f
  1759  061A                     l2297:	
  1760  061A  01C3               	clrf	___awdiv@quotient
  1761  061B  01C4               	clrf	___awdiv@quotient+1
  1762  061C  083D               	movf	___awdiv@divisor,w
  1763  061D  043E               	iorwf	___awdiv@divisor+1,w
  1764  061E  1903               	btfsc	3,2
  1765  061F  2E51               	goto	l2319
  1766  0620  01C1               	clrf	___awdiv@counter
  1767  0621  0AC1               	incf	___awdiv@counter,f
  1768  0622                     l2307:	
  1769  0622  1BBE               	btfsc	___awdiv@divisor+1,7
  1770  0623  2E30               	goto	l2309
  1771  0624  3001               	movlw	1
  1772  0625                     u985:	
  1773  0625  1003               	clrc
  1774  0626  0DBD               	rlf	___awdiv@divisor,f
  1775  0627  0DBE               	rlf	___awdiv@divisor+1,f
  1776  0628  3EFF               	addlw	-1
  1777  0629  1D03               	skipz
  1778  062A  2E25               	goto	u985
  1779  062B  3001               	movlw	1
  1780  062C  00F8               	movwf	??___awdiv
  1781  062D  0878               	movf	??___awdiv,w
  1782  062E  07C1               	addwf	___awdiv@counter,f
  1783  062F  2E22               	goto	l2307
  1784  0630                     l2309:	
  1785  0630  3001               	movlw	1
  1786  0631                     u1005:	
  1787  0631  1003               	clrc
  1788  0632  0DC3               	rlf	___awdiv@quotient,f
  1789  0633  0DC4               	rlf	___awdiv@quotient+1,f
  1790  0634  3EFF               	addlw	-1
  1791  0635  1D03               	skipz
  1792  0636  2E31               	goto	u1005
  1793  0637  083E               	movf	___awdiv@divisor+1,w
  1794  0638  0240               	subwf	___awdiv@dividend+1,w
  1795  0639  1D03               	skipz
  1796  063A  2E3D               	goto	u1015
  1797  063B  083D               	movf	___awdiv@divisor,w
  1798  063C  023F               	subwf	___awdiv@dividend,w
  1799  063D                     u1015:	
  1800  063D  1C03               	skipc
  1801  063E  2E46               	goto	l2315
  1802  063F  083D               	movf	___awdiv@divisor,w
  1803  0640  02BF               	subwf	___awdiv@dividend,f
  1804  0641  083E               	movf	___awdiv@divisor+1,w
  1805  0642  1C03               	skipc
  1806  0643  03C0               	decf	___awdiv@dividend+1,f
  1807  0644  02C0               	subwf	___awdiv@dividend+1,f
  1808  0645  1443               	bsf	___awdiv@quotient,0
  1809  0646                     l2315:	
  1810  0646  3001               	movlw	1
  1811  0647                     u1025:	
  1812  0647  1003               	clrc
  1813  0648  0CBE               	rrf	___awdiv@divisor+1,f
  1814  0649  0CBD               	rrf	___awdiv@divisor,f
  1815  064A  3EFF               	addlw	-1
  1816  064B  1D03               	skipz
  1817  064C  2E47               	goto	u1025
  1818  064D  3001               	movlw	1
  1819  064E  02C1               	subwf	___awdiv@counter,f
  1820  064F  1D03               	btfss	3,2
  1821  0650  2E30               	goto	l2309
  1822  0651                     l2319:	
  1823  0651  0842               	movf	___awdiv@sign,w
  1824  0652  1903               	btfsc	3,2
  1825  0653  2E59               	goto	l2323
  1826  0654  09C3               	comf	___awdiv@quotient,f
  1827  0655  09C4               	comf	___awdiv@quotient+1,f
  1828  0656  0AC3               	incf	___awdiv@quotient,f
  1829  0657  1903               	skipnz
  1830  0658  0AC4               	incf	___awdiv@quotient+1,f
  1831  0659                     l2323:	
  1832  0659  0844               	movf	___awdiv@quotient+1,w
  1833  065A  00BE               	movwf	?___awdiv+1
  1834  065B  0843               	movf	___awdiv@quotient,w
  1835  065C  00BD               	movwf	?___awdiv
  1836  065D  0008               	return
  1837  065E                     __end_of___awdiv:	
  1838                           
  1839                           	psect	text4
  1840  0298                     __ptext4:	
  1841 ;; *************** function _uartRC_init *****************
  1842 ;; Defined at:
  1843 ;;		line 13 in file "UART.c"
  1844 ;; Parameters:    Size  Location     Type
  1845 ;;  baudrate        2    7[BANK0 ] unsigned int 
  1846 ;; Auto vars:     Size  Location     Type
  1847 ;;  n               2   21[BANK0 ] unsigned int 
  1848 ;; Return value:  Size  Location     Type
  1849 ;;                  1    wreg      unsigned char 
  1850 ;; Registers used:
  1851 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1852 ;; Tracked objects:
  1853 ;;		On entry : 0/0
  1854 ;;		On exit  : 0/0
  1855 ;;		Unchanged: 0/0
  1856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1857 ;;      Params:         0       2       0       0       0
  1858 ;;      Locals:         0       2       0       0       0
  1859 ;;      Temps:          0      12       0       0       0
  1860 ;;      Totals:         0      16       0       0       0
  1861 ;;Total ram usage:       16 bytes
  1862 ;; Hardware stack levels used:    1
  1863 ;; Hardware stack levels required when called:    2
  1864 ;; This function calls:
  1865 ;;		___aldiv
  1866 ;; This function is called by:
  1867 ;;		_main
  1868 ;; This function uses a non-reentrant model
  1869 ;;
  1870                           
  1871                           
  1872                           ;psect for function _uartRC_init
  1873  0298                     _uartRC_init:	
  1874                           
  1875                           ;UART.c: 14:     uint16_t n;;UART.c: 15:     n = (4000000 - baudrate*64)/(baudrate*64);
  1876                           
  1877                           ;incstack = 0
  1878                           ; Regs used in _uartRC_init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1879  0298  1283               	bcf	3,5	;RP0=0, select bank0
  1880  0299  1303               	bcf	3,6	;RP1=0, select bank0
  1881  029A  0845               	movf	uartRC_init@baudrate+1,w
  1882  029B  00C7               	movwf	??_uartRC_init+1
  1883  029C  0844               	movf	uartRC_init@baudrate,w
  1884  029D  00C6               	movwf	??_uartRC_init
  1885  029E  3006               	movlw	6
  1886  029F  00FF               	movwf	127
  1887  02A0                     u1055:	
  1888  02A0  1003               	clrc
  1889  02A1  0DC6               	rlf	??_uartRC_init,f
  1890  02A2  0DC7               	rlf	??_uartRC_init+1,f
  1891  02A3  0BFF               	decfsz	127,f
  1892  02A4  2AA0               	goto	u1055
  1893  02A5  0846               	movf	??_uartRC_init,w
  1894  02A6  00F2               	movwf	___aldiv@divisor
  1895  02A7  0847               	movf	??_uartRC_init+1,w
  1896  02A8  00F3               	movwf	___aldiv@divisor+1
  1897  02A9  01F4               	clrf	___aldiv@divisor+2
  1898  02AA  01F5               	clrf	___aldiv@divisor+3
  1899  02AB  0845               	movf	uartRC_init@baudrate+1,w
  1900  02AC  00C9               	movwf	??_uartRC_init+3
  1901  02AD  0844               	movf	uartRC_init@baudrate,w
  1902  02AE  00C8               	movwf	??_uartRC_init+2
  1903  02AF  3006               	movlw	6
  1904  02B0  00FF               	movwf	127
  1905  02B1                     u1065:	
  1906  02B1  1003               	clrc
  1907  02B2  0DC8               	rlf	??_uartRC_init+2,f
  1908  02B3  0DC9               	rlf	??_uartRC_init+3,f
  1909  02B4  0BFF               	decfsz	127,f
  1910  02B5  2AB1               	goto	u1065
  1911  02B6  0848               	movf	??_uartRC_init+2,w
  1912  02B7  00CA               	movwf	??_uartRC_init+4
  1913  02B8  0849               	movf	??_uartRC_init+3,w
  1914  02B9  00CB               	movwf	??_uartRC_init+5
  1915  02BA  01CC               	clrf	??_uartRC_init+6
  1916  02BB  01CD               	clrf	??_uartRC_init+7
  1917  02BC  3000               	movlw	0
  1918  02BD  00CE               	movwf	??_uartRC_init+8
  1919  02BE  3009               	movlw	9
  1920  02BF  00CF               	movwf	??_uartRC_init+9
  1921  02C0  303D               	movlw	61
  1922  02C1  00D0               	movwf	??_uartRC_init+10
  1923  02C2  3000               	movlw	0
  1924  02C3  00D1               	movwf	??_uartRC_init+11
  1925  02C4  084A               	movf	??_uartRC_init+4,w
  1926  02C5  02CE               	subwf	??_uartRC_init+8,f
  1927  02C6  084B               	movf	??_uartRC_init+5,w
  1928  02C7  1C03               	skipc
  1929  02C8  0F4B               	incfsz	??_uartRC_init+5,w
  1930  02C9  2ACB               	goto	u1071
  1931  02CA  2ACC               	goto	u1072
  1932  02CB                     u1071:	
  1933  02CB  02CF               	subwf	??_uartRC_init+9,f
  1934  02CC                     u1072:	
  1935  02CC  084C               	movf	??_uartRC_init+6,w
  1936  02CD  1C03               	skipc
  1937  02CE  0F4C               	incfsz	??_uartRC_init+6,w
  1938  02CF  2AD1               	goto	u1073
  1939  02D0  2AD2               	goto	u1074
  1940  02D1                     u1073:	
  1941  02D1  02D0               	subwf	??_uartRC_init+10,f
  1942  02D2                     u1074:	
  1943  02D2  084D               	movf	??_uartRC_init+7,w
  1944  02D3  1C03               	skipc
  1945  02D4  0F4D               	incfsz	??_uartRC_init+7,w
  1946  02D5  2AD7               	goto	u1075
  1947  02D6  2AD8               	goto	u1076
  1948  02D7                     u1075:	
  1949  02D7  02D1               	subwf	??_uartRC_init+11,f
  1950  02D8                     u1076:	
  1951  02D8  0851               	movf	??_uartRC_init+11,w
  1952  02D9  00F9               	movwf	___aldiv@dividend+3
  1953  02DA  0850               	movf	??_uartRC_init+10,w
  1954  02DB  00F8               	movwf	___aldiv@dividend+2
  1955  02DC  084F               	movf	??_uartRC_init+9,w
  1956  02DD  00F7               	movwf	___aldiv@dividend+1
  1957  02DE  084E               	movf	??_uartRC_init+8,w
  1958  02DF  00F6               	movwf	___aldiv@dividend
  1959  02E0  120A  118A  23FD  120A  118A  	fcall	___aldiv
  1960  02E5  0873               	movf	?___aldiv+1,w
  1961  02E6  1283               	bcf	3,5	;RP0=0, select bank0
  1962  02E7  1303               	bcf	3,6	;RP1=0, select bank0
  1963  02E8  00D3               	movwf	uartRC_init@n+1
  1964  02E9  0872               	movf	?___aldiv,w
  1965  02EA  00D2               	movwf	uartRC_init@n
  1966                           
  1967                           ;UART.c: 16:     if (n > 255){
  1968  02EB  3001               	movlw	1
  1969  02EC  0253               	subwf	uartRC_init@n+1,w
  1970  02ED  3000               	movlw	0
  1971  02EE  1903               	skipnz
  1972  02EF  0252               	subwf	uartRC_init@n,w
  1973  02F0  1C03               	skipc
  1974  02F1  2B4A               	goto	l2335
  1975                           
  1976                           ;UART.c: 17:         n = (4000000 - baudrate*16)/(baudrate*16);
  1977  02F2  0845               	movf	uartRC_init@baudrate+1,w
  1978  02F3  00C7               	movwf	??_uartRC_init+1
  1979  02F4  0844               	movf	uartRC_init@baudrate,w
  1980  02F5  00C6               	movwf	??_uartRC_init
  1981  02F6  0EC6               	swapf	??_uartRC_init,f
  1982  02F7  0EC7               	swapf	??_uartRC_init+1,f
  1983  02F8  30F0               	movlw	240
  1984  02F9  05C7               	andwf	??_uartRC_init+1,f
  1985  02FA  0846               	movf	??_uartRC_init,w
  1986  02FB  390F               	andlw	15
  1987  02FC  04C7               	iorwf	??_uartRC_init+1,f
  1988  02FD  30F0               	movlw	240
  1989  02FE  05C6               	andwf	??_uartRC_init,f
  1990  02FF  0846               	movf	??_uartRC_init,w
  1991  0300  00F2               	movwf	___aldiv@divisor
  1992  0301  0847               	movf	??_uartRC_init+1,w
  1993  0302  00F3               	movwf	___aldiv@divisor+1
  1994  0303  01F4               	clrf	___aldiv@divisor+2
  1995  0304  01F5               	clrf	___aldiv@divisor+3
  1996  0305  0845               	movf	uartRC_init@baudrate+1,w
  1997  0306  00C9               	movwf	??_uartRC_init+3
  1998  0307  0844               	movf	uartRC_init@baudrate,w
  1999  0308  00C8               	movwf	??_uartRC_init+2
  2000  0309  0EC8               	swapf	??_uartRC_init+2,f
  2001  030A  0EC9               	swapf	??_uartRC_init+3,f
  2002  030B  30F0               	movlw	240
  2003  030C  05C9               	andwf	??_uartRC_init+3,f
  2004  030D  0848               	movf	??_uartRC_init+2,w
  2005  030E  390F               	andlw	15
  2006  030F  04C9               	iorwf	??_uartRC_init+3,f
  2007  0310  30F0               	movlw	240
  2008  0311  05C8               	andwf	??_uartRC_init+2,f
  2009  0312  0848               	movf	??_uartRC_init+2,w
  2010  0313  00CA               	movwf	??_uartRC_init+4
  2011  0314  0849               	movf	??_uartRC_init+3,w
  2012  0315  00CB               	movwf	??_uartRC_init+5
  2013  0316  01CC               	clrf	??_uartRC_init+6
  2014  0317  01CD               	clrf	??_uartRC_init+7
  2015  0318  3000               	movlw	0
  2016  0319  00CE               	movwf	??_uartRC_init+8
  2017  031A  3009               	movlw	9
  2018  031B  00CF               	movwf	??_uartRC_init+9
  2019  031C  303D               	movlw	61
  2020  031D  00D0               	movwf	??_uartRC_init+10
  2021  031E  3000               	movlw	0
  2022  031F  00D1               	movwf	??_uartRC_init+11
  2023  0320  084A               	movf	??_uartRC_init+4,w
  2024  0321  02CE               	subwf	??_uartRC_init+8,f
  2025  0322  084B               	movf	??_uartRC_init+5,w
  2026  0323  1C03               	skipc
  2027  0324  0F4B               	incfsz	??_uartRC_init+5,w
  2028  0325  2B27               	goto	u1091
  2029  0326  2B28               	goto	u1092
  2030  0327                     u1091:	
  2031  0327  02CF               	subwf	??_uartRC_init+9,f
  2032  0328                     u1092:	
  2033  0328  084C               	movf	??_uartRC_init+6,w
  2034  0329  1C03               	skipc
  2035  032A  0F4C               	incfsz	??_uartRC_init+6,w
  2036  032B  2B2D               	goto	u1093
  2037  032C  2B2E               	goto	u1094
  2038  032D                     u1093:	
  2039  032D  02D0               	subwf	??_uartRC_init+10,f
  2040  032E                     u1094:	
  2041  032E  084D               	movf	??_uartRC_init+7,w
  2042  032F  1C03               	skipc
  2043  0330  0F4D               	incfsz	??_uartRC_init+7,w
  2044  0331  2B33               	goto	u1095
  2045  0332  2B34               	goto	u1096
  2046  0333                     u1095:	
  2047  0333  02D1               	subwf	??_uartRC_init+11,f
  2048  0334                     u1096:	
  2049  0334  0851               	movf	??_uartRC_init+11,w
  2050  0335  00F9               	movwf	___aldiv@dividend+3
  2051  0336  0850               	movf	??_uartRC_init+10,w
  2052  0337  00F8               	movwf	___aldiv@dividend+2
  2053  0338  084F               	movf	??_uartRC_init+9,w
  2054  0339  00F7               	movwf	___aldiv@dividend+1
  2055  033A  084E               	movf	??_uartRC_init+8,w
  2056  033B  00F6               	movwf	___aldiv@dividend
  2057  033C  120A  118A  23FD  120A  118A  	fcall	___aldiv
  2058  0341  0873               	movf	?___aldiv+1,w
  2059  0342  1283               	bcf	3,5	;RP0=0, select bank0
  2060  0343  1303               	bcf	3,6	;RP1=0, select bank0
  2061  0344  00D3               	movwf	uartRC_init@n+1
  2062  0345  0872               	movf	?___aldiv,w
  2063  0346  00D2               	movwf	uartRC_init@n
  2064                           
  2065                           ;UART.c: 18:         TXSTAbits.BRGH = 1;
  2066  0347  1683               	bsf	3,5	;RP0=1, select bank1
  2067  0348  1303               	bcf	3,6	;RP1=0, select bank1
  2068  0349  1518               	bsf	24,2	;volatile
  2069  034A                     l2335:	
  2070                           
  2071                           ;UART.c: 20:     if (n < 256){
  2072  034A  3001               	movlw	1
  2073  034B  1283               	bcf	3,5	;RP0=0, select bank0
  2074  034C  0253               	subwf	uartRC_init@n+1,w
  2075  034D  3000               	movlw	0
  2076  034E  1903               	skipnz
  2077  034F  0252               	subwf	uartRC_init@n,w
  2078  0350  1803               	skipnc
  2079  0351  0008               	return
  2080                           
  2081                           ;UART.c: 21:         SPBRG = n;
  2082  0352  0852               	movf	uartRC_init@n,w
  2083  0353  1683               	bsf	3,5	;RP0=1, select bank1
  2084  0354  1303               	bcf	3,6	;RP1=0, select bank1
  2085  0355  0099               	movwf	25	;volatile
  2086                           
  2087                           ;UART.c: 22:         TXSTAbits.SYNC = 0;
  2088  0356  1218               	bcf	24,4	;volatile
  2089                           
  2090                           ;UART.c: 23:         RCSTAbits.SPEN = 1;
  2091  0357  1283               	bcf	3,5	;RP0=0, select bank0
  2092  0358  1303               	bcf	3,6	;RP1=0, select bank0
  2093  0359  1798               	bsf	24,7	;volatile
  2094                           
  2095                           ;UART.c: 24:         RCSTAbits.CREN = 1;
  2096  035A  1618               	bsf	24,4	;volatile
  2097                           
  2098                           ;UART.c: 25:         TXSTAbits.TXEN = 1;
  2099  035B  1683               	bsf	3,5	;RP0=1, select bank1
  2100  035C  1303               	bcf	3,6	;RP1=0, select bank1
  2101  035D  1698               	bsf	24,5	;volatile
  2102  035E  0008               	return
  2103  035F                     __end_of_uartRC_init:	
  2104                           
  2105                           	psect	text5
  2106  03FD                     __ptext5:	
  2107 ;; *************** function ___aldiv *****************
  2108 ;; Defined at:
  2109 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\aldiv.c"
  2110 ;; Parameters:    Size  Location     Type
  2111 ;;  divisor         4    2[COMMON] long 
  2112 ;;  dividend        4    6[COMMON] long 
  2113 ;; Auto vars:     Size  Location     Type
  2114 ;;  quotient        4    3[BANK0 ] long 
  2115 ;;  sign            1    2[BANK0 ] unsigned char 
  2116 ;;  counter         1    1[BANK0 ] unsigned char 
  2117 ;; Return value:  Size  Location     Type
  2118 ;;                  4    2[COMMON] long 
  2119 ;; Registers used:
  2120 ;;		wreg, status,2, status,0
  2121 ;; Tracked objects:
  2122 ;;		On entry : 0/0
  2123 ;;		On exit  : 0/0
  2124 ;;		Unchanged: 0/0
  2125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2126 ;;      Params:         8       0       0       0       0
  2127 ;;      Locals:         0       6       0       0       0
  2128 ;;      Temps:          0       1       0       0       0
  2129 ;;      Totals:         8       7       0       0       0
  2130 ;;Total ram usage:       15 bytes
  2131 ;; Hardware stack levels used:    1
  2132 ;; Hardware stack levels required when called:    1
  2133 ;; This function calls:
  2134 ;;		Nothing
  2135 ;; This function is called by:
  2136 ;;		_uartRC_init
  2137 ;; This function uses a non-reentrant model
  2138 ;;
  2139                           
  2140                           
  2141                           ;psect for function ___aldiv
  2142  03FD                     ___aldiv:	
  2143                           
  2144                           ;incstack = 0
  2145                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  2146  03FD  1283               	bcf	3,5	;RP0=0, select bank0
  2147  03FE  1303               	bcf	3,6	;RP1=0, select bank0
  2148  03FF  01BF               	clrf	___aldiv@sign
  2149  0400  1FF5               	btfss	___aldiv@divisor+3,7
  2150  0401  2C0F               	goto	l414
  2151  0402  09F2               	comf	___aldiv@divisor,f
  2152  0403  09F3               	comf	___aldiv@divisor+1,f
  2153  0404  09F4               	comf	___aldiv@divisor+2,f
  2154  0405  09F5               	comf	___aldiv@divisor+3,f
  2155  0406  0AF2               	incf	___aldiv@divisor,f
  2156  0407  1903               	skipnz
  2157  0408  0AF3               	incf	___aldiv@divisor+1,f
  2158  0409  1903               	skipnz
  2159  040A  0AF4               	incf	___aldiv@divisor+2,f
  2160  040B  1903               	skipnz
  2161  040C  0AF5               	incf	___aldiv@divisor+3,f
  2162  040D  01BF               	clrf	___aldiv@sign
  2163  040E  0ABF               	incf	___aldiv@sign,f
  2164  040F                     l414:	
  2165  040F  1FF9               	btfss	___aldiv@dividend+3,7
  2166  0410  2C20               	goto	l2253
  2167  0411  09F6               	comf	___aldiv@dividend,f
  2168  0412  09F7               	comf	___aldiv@dividend+1,f
  2169  0413  09F8               	comf	___aldiv@dividend+2,f
  2170  0414  09F9               	comf	___aldiv@dividend+3,f
  2171  0415  0AF6               	incf	___aldiv@dividend,f
  2172  0416  1903               	skipnz
  2173  0417  0AF7               	incf	___aldiv@dividend+1,f
  2174  0418  1903               	skipnz
  2175  0419  0AF8               	incf	___aldiv@dividend+2,f
  2176  041A  1903               	skipnz
  2177  041B  0AF9               	incf	___aldiv@dividend+3,f
  2178  041C  3001               	movlw	1
  2179  041D  00BD               	movwf	??___aldiv
  2180  041E  083D               	movf	??___aldiv,w
  2181  041F  06BF               	xorwf	___aldiv@sign,f
  2182  0420                     l2253:	
  2183  0420  3000               	movlw	0
  2184  0421  00C3               	movwf	___aldiv@quotient+3
  2185  0422  3000               	movlw	0
  2186  0423  00C2               	movwf	___aldiv@quotient+2
  2187  0424  3000               	movlw	0
  2188  0425  00C1               	movwf	___aldiv@quotient+1
  2189  0426  3000               	movlw	0
  2190  0427  00C0               	movwf	___aldiv@quotient
  2191  0428  0875               	movf	___aldiv@divisor+3,w
  2192  0429  0474               	iorwf	___aldiv@divisor+2,w
  2193  042A  0473               	iorwf	___aldiv@divisor+1,w
  2194  042B  0472               	iorwf	___aldiv@divisor,w
  2195  042C  1903               	skipnz
  2196  042D  2C75               	goto	l2275
  2197  042E  01BE               	clrf	___aldiv@counter
  2198  042F  0ABE               	incf	___aldiv@counter,f
  2199  0430                     l2261:	
  2200  0430  1BF5               	btfsc	___aldiv@divisor+3,7
  2201  0431  2C40               	goto	l2263
  2202  0432  3001               	movlw	1
  2203  0433  00BD               	movwf	??___aldiv
  2204  0434                     u885:	
  2205  0434  1003               	clrc
  2206  0435  0DF2               	rlf	___aldiv@divisor,f
  2207  0436  0DF3               	rlf	___aldiv@divisor+1,f
  2208  0437  0DF4               	rlf	___aldiv@divisor+2,f
  2209  0438  0DF5               	rlf	___aldiv@divisor+3,f
  2210  0439  0BBD               	decfsz	??___aldiv,f
  2211  043A  2C34               	goto	u885
  2212  043B  3001               	movlw	1
  2213  043C  00BD               	movwf	??___aldiv
  2214  043D  083D               	movf	??___aldiv,w
  2215  043E  07BE               	addwf	___aldiv@counter,f
  2216  043F  2C30               	goto	l2261
  2217  0440                     l2263:	
  2218  0440  3001               	movlw	1
  2219  0441  00BD               	movwf	??___aldiv
  2220  0442                     u905:	
  2221  0442  1003               	clrc
  2222  0443  0DC0               	rlf	___aldiv@quotient,f
  2223  0444  0DC1               	rlf	___aldiv@quotient+1,f
  2224  0445  0DC2               	rlf	___aldiv@quotient+2,f
  2225  0446  0DC3               	rlf	___aldiv@quotient+3,f
  2226  0447  0BBD               	decfsz	??___aldiv,f
  2227  0448  2C42               	goto	u905
  2228  0449  0875               	movf	___aldiv@divisor+3,w
  2229  044A  0279               	subwf	___aldiv@dividend+3,w
  2230  044B  1D03               	skipz
  2231  044C  2C57               	goto	u915
  2232  044D  0874               	movf	___aldiv@divisor+2,w
  2233  044E  0278               	subwf	___aldiv@dividend+2,w
  2234  044F  1D03               	skipz
  2235  0450  2C57               	goto	u915
  2236  0451  0873               	movf	___aldiv@divisor+1,w
  2237  0452  0277               	subwf	___aldiv@dividend+1,w
  2238  0453  1D03               	skipz
  2239  0454  2C57               	goto	u915
  2240  0455  0872               	movf	___aldiv@divisor,w
  2241  0456  0276               	subwf	___aldiv@dividend,w
  2242  0457                     u915:	
  2243  0457  1C03               	skipc
  2244  0458  2C68               	goto	l2271
  2245  0459  0872               	movf	___aldiv@divisor,w
  2246  045A  02F6               	subwf	___aldiv@dividend,f
  2247  045B  0873               	movf	___aldiv@divisor+1,w
  2248  045C  1C03               	skipc
  2249  045D  0F73               	incfsz	___aldiv@divisor+1,w
  2250  045E  02F7               	subwf	___aldiv@dividend+1,f
  2251  045F  0874               	movf	___aldiv@divisor+2,w
  2252  0460  1C03               	skipc
  2253  0461  0F74               	incfsz	___aldiv@divisor+2,w
  2254  0462  02F8               	subwf	___aldiv@dividend+2,f
  2255  0463  0875               	movf	___aldiv@divisor+3,w
  2256  0464  1C03               	skipc
  2257  0465  0F75               	incfsz	___aldiv@divisor+3,w
  2258  0466  02F9               	subwf	___aldiv@dividend+3,f
  2259  0467  1440               	bsf	___aldiv@quotient,0
  2260  0468                     l2271:	
  2261  0468  3001               	movlw	1
  2262  0469                     u925:	
  2263  0469  1003               	clrc
  2264  046A  0CF5               	rrf	___aldiv@divisor+3,f
  2265  046B  0CF4               	rrf	___aldiv@divisor+2,f
  2266  046C  0CF3               	rrf	___aldiv@divisor+1,f
  2267  046D  0CF2               	rrf	___aldiv@divisor,f
  2268  046E  3EFF               	addlw	-1
  2269  046F  1D03               	skipz
  2270  0470  2C69               	goto	u925
  2271  0471  3001               	movlw	1
  2272  0472  02BE               	subwf	___aldiv@counter,f
  2273  0473  1D03               	btfss	3,2
  2274  0474  2C40               	goto	l2263
  2275  0475                     l2275:	
  2276  0475  083F               	movf	___aldiv@sign,w
  2277  0476  1903               	btfsc	3,2
  2278  0477  2C83               	goto	l2279
  2279  0478  09C0               	comf	___aldiv@quotient,f
  2280  0479  09C1               	comf	___aldiv@quotient+1,f
  2281  047A  09C2               	comf	___aldiv@quotient+2,f
  2282  047B  09C3               	comf	___aldiv@quotient+3,f
  2283  047C  0AC0               	incf	___aldiv@quotient,f
  2284  047D  1903               	skipnz
  2285  047E  0AC1               	incf	___aldiv@quotient+1,f
  2286  047F  1903               	skipnz
  2287  0480  0AC2               	incf	___aldiv@quotient+2,f
  2288  0481  1903               	skipnz
  2289  0482  0AC3               	incf	___aldiv@quotient+3,f
  2290  0483                     l2279:	
  2291  0483  0843               	movf	___aldiv@quotient+3,w
  2292  0484  00F5               	movwf	?___aldiv+3
  2293  0485  0842               	movf	___aldiv@quotient+2,w
  2294  0486  00F4               	movwf	?___aldiv+2
  2295  0487  0841               	movf	___aldiv@quotient+1,w
  2296  0488  00F3               	movwf	?___aldiv+1
  2297  0489  0840               	movf	___aldiv@quotient,w
  2298  048A  00F2               	movwf	?___aldiv
  2299  048B  0008               	return
  2300  048C                     __end_of___aldiv:	
  2301                           
  2302                           	psect	text6
  2303  0796                     __ptext6:	
  2304 ;; *************** function _uartRC_Read *****************
  2305 ;; Defined at:
  2306 ;;		line 31 in file "UART.c"
  2307 ;; Parameters:    Size  Location     Type
  2308 ;;		None
  2309 ;; Auto vars:     Size  Location     Type
  2310 ;;  lectura         1    0        unsigned char 
  2311 ;; Return value:  Size  Location     Type
  2312 ;;                  1    wreg      unsigned char 
  2313 ;; Registers used:
  2314 ;;		wreg
  2315 ;; Tracked objects:
  2316 ;;		On entry : 0/0
  2317 ;;		On exit  : 0/0
  2318 ;;		Unchanged: 0/0
  2319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2320 ;;      Params:         0       0       0       0       0
  2321 ;;      Locals:         1       0       0       0       0
  2322 ;;      Temps:          2       0       0       0       0
  2323 ;;      Totals:         3       0       0       0       0
  2324 ;;Total ram usage:        3 bytes
  2325 ;; Hardware stack levels used:    1
  2326 ;; Hardware stack levels required when called:    1
  2327 ;; This function calls:
  2328 ;;		Nothing
  2329 ;; This function is called by:
  2330 ;;		_main
  2331 ;; This function uses a non-reentrant model
  2332 ;;
  2333                           
  2334                           
  2335                           ;psect for function _uartRC_Read
  2336  0796                     _uartRC_Read:	
  2337                           
  2338                           ;UART.c: 32:     _delay((unsigned long)((5)*(4000000/4000.0)));
  2339                           
  2340                           ;incstack = 0
  2341                           ; Regs used in _uartRC_Read: [wreg]
  2342  0796  3007               	movlw	7
  2343  0797  00F3               	movwf	??_uartRC_Read+1
  2344  0798  307D               	movlw	125
  2345  0799  00F2               	movwf	??_uartRC_Read
  2346  079A                     u1157:	
  2347  079A  0BF2               	decfsz	??_uartRC_Read,f
  2348  079B  2F9A               	goto	u1157
  2349  079C  0BF3               	decfsz	??_uartRC_Read+1,f
  2350  079D  2F9A               	goto	u1157
  2351  079E  1283               	bcf	3,5	;RP0=0, select bank0
  2352  079F  1303               	bcf	3,6	;RP1=0, select bank0
  2353  07A0  081A               	movf	26,w	;volatile
  2354  07A1  0008               	return
  2355  07A2                     __end_of_uartRC_Read:	
  2356                           
  2357                           	psect	text7
  2358  035F                     __ptext7:	
  2359 ;; *************** function _mapear *****************
  2360 ;; Defined at:
  2361 ;;		line 132 in file "main.c"
  2362 ;; Parameters:    Size  Location     Type
  2363 ;;  valor           1    wreg     unsigned char 
  2364 ;;  limReal         1    8[COMMON] unsigned char 
  2365 ;;  limSup          1    9[COMMON] unsigned char 
  2366 ;; Auto vars:     Size  Location     Type
  2367 ;;  valor           1    4[BANK0 ] unsigned char 
  2368 ;;  resultado       6    5[BANK0 ] unsigned int [3]
  2369 ;;  dividendo       2   11[BANK0 ] unsigned int 
  2370 ;; Return value:  Size  Location     Type
  2371 ;;                  1    wreg      PTR unsigned int 
  2372 ;; Registers used:
  2373 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2374 ;; Tracked objects:
  2375 ;;		On entry : 0/0
  2376 ;;		On exit  : 0/0
  2377 ;;		Unchanged: 0/0
  2378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2379 ;;      Params:         2       0       0       0       0
  2380 ;;      Locals:         0       9       0       0       0
  2381 ;;      Temps:          0       4       0       0       0
  2382 ;;      Totals:         2      13       0       0       0
  2383 ;;Total ram usage:       15 bytes
  2384 ;; Hardware stack levels used:    1
  2385 ;; Hardware stack levels required when called:    2
  2386 ;; This function calls:
  2387 ;;		___wmul
  2388 ;; This function is called by:
  2389 ;;		_main
  2390 ;; This function uses a non-reentrant model
  2391 ;;
  2392                           
  2393                           
  2394                           ;psect for function _mapear
  2395  035F                     _mapear:	
  2396                           
  2397                           ;incstack = 0
  2398                           ; Regs used in _mapear: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2399                           ;mapear@valor stored from wreg
  2400  035F  1283               	bcf	3,5	;RP0=0, select bank0
  2401  0360  1303               	bcf	3,6	;RP1=0, select bank0
  2402  0361  00C1               	movwf	mapear@valor
  2403                           
  2404                           ;main.c: 133:     uint16_t resultado[3] = {0,0,0};
  2405  0362  3042               	movlw	mapear@resultado& (0+255)
  2406  0363  0084               	movwf	4
  2407  0364  3006               	movlw	6
  2408  0365  00FF               	movwf	127
  2409  0366                     u740:	
  2410  0366  1383               	bcf	3,7	;select IRP bank0
  2411  0367  0180               	clrf	0
  2412  0368  0A84               	incf	4,f
  2413  0369  0BFF               	decfsz	127,f
  2414  036A  2B66               	goto	u740
  2415                           
  2416                           ;main.c: 134:     uint16_t dividendo = valor*limSup;
  2417  036B  0841               	movf	mapear@valor,w
  2418  036C  00BD               	movwf	??_mapear
  2419  036D  01BE               	clrf	??_mapear+1
  2420  036E  083D               	movf	??_mapear,w
  2421  036F  00F2               	movwf	___wmul@multiplier
  2422  0370  083E               	movf	??_mapear+1,w
  2423  0371  00F3               	movwf	___wmul@multiplier+1
  2424  0372  0879               	movf	mapear@limSup,w
  2425  0373  00BF               	movwf	??_mapear+2
  2426  0374  01C0               	clrf	??_mapear+3
  2427  0375  083F               	movf	??_mapear+2,w
  2428  0376  00F4               	movwf	___wmul@multiplicand
  2429  0377  0840               	movf	??_mapear+3,w
  2430  0378  00F5               	movwf	___wmul@multiplicand+1
  2431  0379  120A  118A  2720  120A  118A  	fcall	___wmul
  2432  037E  0873               	movf	?___wmul+1,w
  2433  037F  1283               	bcf	3,5	;RP0=0, select bank0
  2434  0380  1303               	bcf	3,6	;RP1=0, select bank0
  2435  0381  00C9               	movwf	mapear@dividendo+1
  2436  0382  0872               	movf	?___wmul,w
  2437  0383  00C8               	movwf	mapear@dividendo
  2438  0384                     l1843:	
  2439                           ;main.c: 135:     while (limReal <= dividendo){
  2440                           
  2441                           
  2442                           ;main.c: 135:     while (limReal <= dividendo){
  2443  0384  0878               	movf	mapear@limReal,w
  2444  0385  00BD               	movwf	??_mapear
  2445  0386  01BE               	clrf	??_mapear+1
  2446  0387  083E               	movf	??_mapear+1,w
  2447  0388  0249               	subwf	mapear@dividendo+1,w
  2448  0389  1D03               	skipz
  2449  038A  2B8D               	goto	u755
  2450  038B  083D               	movf	??_mapear,w
  2451  038C  0248               	subwf	mapear@dividendo,w
  2452  038D                     u755:	
  2453  038D  1C03               	btfss	3,0
  2454  038E  2B9F               	goto	l1845
  2455                           
  2456                           ;main.c: 136:         resultado[0] = resultado[0] + 1;
  2457  038F  0842               	movf	mapear@resultado,w
  2458  0390  3E01               	addlw	1
  2459  0391  00C2               	movwf	mapear@resultado
  2460  0392  0843               	movf	mapear@resultado+1,w
  2461  0393  1803               	skipnc
  2462  0394  3E01               	addlw	1
  2463  0395  3E00               	addlw	0
  2464  0396  00C3               	movwf	mapear@resultado+1
  2465                           
  2466                           ;main.c: 137:         dividendo = dividendo - limReal;
  2467  0397  0878               	movf	mapear@limReal,w
  2468  0398  0248               	subwf	mapear@dividendo,w
  2469  0399  00C8               	movwf	mapear@dividendo
  2470  039A  0849               	movf	mapear@dividendo+1,w
  2471  039B  1C03               	skipc
  2472  039C  0349               	decf	mapear@dividendo+1,w
  2473  039D  00C9               	movwf	mapear@dividendo+1
  2474  039E  2B84               	goto	l1843
  2475  039F                     l1845:	
  2476                           
  2477                           ;main.c: 139:     dividendo = dividendo *10;
  2478  039F  0849               	movf	mapear@dividendo+1,w
  2479  03A0  00F3               	movwf	___wmul@multiplier+1
  2480  03A1  0848               	movf	mapear@dividendo,w
  2481  03A2  00F2               	movwf	___wmul@multiplier
  2482  03A3  300A               	movlw	10
  2483  03A4  00F4               	movwf	___wmul@multiplicand
  2484  03A5  3000               	movlw	0
  2485  03A6  00F5               	movwf	___wmul@multiplicand+1
  2486  03A7  120A  118A  2720  120A  118A  	fcall	___wmul
  2487  03AC  0873               	movf	?___wmul+1,w
  2488  03AD  1283               	bcf	3,5	;RP0=0, select bank0
  2489  03AE  1303               	bcf	3,6	;RP1=0, select bank0
  2490  03AF  00C9               	movwf	mapear@dividendo+1
  2491  03B0  0872               	movf	?___wmul,w
  2492  03B1  00C8               	movwf	mapear@dividendo
  2493  03B2                     l1849:	
  2494                           ;main.c: 140:     while (limReal <= dividendo){
  2495                           
  2496                           
  2497                           ;main.c: 140:     while (limReal <= dividendo){
  2498  03B2  0878               	movf	mapear@limReal,w
  2499  03B3  00BD               	movwf	??_mapear
  2500  03B4  01BE               	clrf	??_mapear+1
  2501  03B5  083E               	movf	??_mapear+1,w
  2502  03B6  0249               	subwf	mapear@dividendo+1,w
  2503  03B7  1D03               	skipz
  2504  03B8  2BBB               	goto	u765
  2505  03B9  083D               	movf	??_mapear,w
  2506  03BA  0248               	subwf	mapear@dividendo,w
  2507  03BB                     u765:	
  2508  03BB  1C03               	btfss	3,0
  2509  03BC  2BCD               	goto	l1851
  2510                           
  2511                           ;main.c: 141:         resultado[1] = resultado[1] +1;
  2512  03BD  0844               	movf	mapear@resultado+2,w
  2513  03BE  3E01               	addlw	1
  2514  03BF  00C4               	movwf	mapear@resultado+2
  2515  03C0  0845               	movf	mapear@resultado+3,w
  2516  03C1  1803               	skipnc
  2517  03C2  3E01               	addlw	1
  2518  03C3  3E00               	addlw	0
  2519  03C4  00C5               	movwf	mapear@resultado+3
  2520                           
  2521                           ;main.c: 142:         dividendo = dividendo - limReal;
  2522  03C5  0878               	movf	mapear@limReal,w
  2523  03C6  0248               	subwf	mapear@dividendo,w
  2524  03C7  00C8               	movwf	mapear@dividendo
  2525  03C8  0849               	movf	mapear@dividendo+1,w
  2526  03C9  1C03               	skipc
  2527  03CA  0349               	decf	mapear@dividendo+1,w
  2528  03CB  00C9               	movwf	mapear@dividendo+1
  2529  03CC  2BB2               	goto	l1849
  2530  03CD                     l1851:	
  2531                           
  2532                           ;main.c: 144:     dividendo = dividendo *10;
  2533  03CD  0849               	movf	mapear@dividendo+1,w
  2534  03CE  00F3               	movwf	___wmul@multiplier+1
  2535  03CF  0848               	movf	mapear@dividendo,w
  2536  03D0  00F2               	movwf	___wmul@multiplier
  2537  03D1  300A               	movlw	10
  2538  03D2  00F4               	movwf	___wmul@multiplicand
  2539  03D3  3000               	movlw	0
  2540  03D4  00F5               	movwf	___wmul@multiplicand+1
  2541  03D5  120A  118A  2720  120A  118A  	fcall	___wmul
  2542  03DA  0873               	movf	?___wmul+1,w
  2543  03DB  1283               	bcf	3,5	;RP0=0, select bank0
  2544  03DC  1303               	bcf	3,6	;RP1=0, select bank0
  2545  03DD  00C9               	movwf	mapear@dividendo+1
  2546  03DE  0872               	movf	?___wmul,w
  2547  03DF  00C8               	movwf	mapear@dividendo
  2548  03E0                     l1855:	
  2549                           ;main.c: 145:     while (limReal <= dividendo){
  2550                           
  2551                           
  2552                           ;main.c: 145:     while (limReal <= dividendo){
  2553  03E0  0878               	movf	mapear@limReal,w
  2554  03E1  00BD               	movwf	??_mapear
  2555  03E2  01BE               	clrf	??_mapear+1
  2556  03E3  083E               	movf	??_mapear+1,w
  2557  03E4  0249               	subwf	mapear@dividendo+1,w
  2558  03E5  1D03               	skipz
  2559  03E6  2BE9               	goto	u775
  2560  03E7  083D               	movf	??_mapear,w
  2561  03E8  0248               	subwf	mapear@dividendo,w
  2562  03E9                     u775:	
  2563  03E9  1C03               	btfss	3,0
  2564  03EA  2BFB               	goto	l1857
  2565                           
  2566                           ;main.c: 146:         resultado[2] = resultado[2] +1;
  2567  03EB  0846               	movf	mapear@resultado+4,w
  2568  03EC  3E01               	addlw	1
  2569  03ED  00C6               	movwf	mapear@resultado+4
  2570  03EE  0847               	movf	mapear@resultado+5,w
  2571  03EF  1803               	skipnc
  2572  03F0  3E01               	addlw	1
  2573  03F1  3E00               	addlw	0
  2574  03F2  00C7               	movwf	mapear@resultado+5
  2575                           
  2576                           ;main.c: 147:         dividendo = dividendo - limReal;
  2577  03F3  0878               	movf	mapear@limReal,w
  2578  03F4  0248               	subwf	mapear@dividendo,w
  2579  03F5  00C8               	movwf	mapear@dividendo
  2580  03F6  0849               	movf	mapear@dividendo+1,w
  2581  03F7  1C03               	skipc
  2582  03F8  0349               	decf	mapear@dividendo+1,w
  2583  03F9  00C9               	movwf	mapear@dividendo+1
  2584  03FA  2BE0               	goto	l1855
  2585  03FB                     l1857:	
  2586                           
  2587                           ;main.c: 150:     return resultado;
  2588  03FB  3042               	movlw	(low (mapear@resultado| 0))& (0+255)
  2589  03FC  0008               	return
  2590  03FD                     __end_of_mapear:	
  2591                           
  2592                           	psect	text8
  2593  0720                     __ptext8:	
  2594 ;; *************** function ___wmul *****************
  2595 ;; Defined at:
  2596 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul16.c"
  2597 ;; Parameters:    Size  Location     Type
  2598 ;;  multiplier      2    2[COMMON] unsigned int 
  2599 ;;  multiplicand    2    4[COMMON] unsigned int 
  2600 ;; Auto vars:     Size  Location     Type
  2601 ;;  product         2    6[COMMON] unsigned int 
  2602 ;; Return value:  Size  Location     Type
  2603 ;;                  2    2[COMMON] unsigned int 
  2604 ;; Registers used:
  2605 ;;		wreg, status,2, status,0
  2606 ;; Tracked objects:
  2607 ;;		On entry : 0/0
  2608 ;;		On exit  : 0/0
  2609 ;;		Unchanged: 0/0
  2610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2611 ;;      Params:         4       0       0       0       0
  2612 ;;      Locals:         2       0       0       0       0
  2613 ;;      Temps:          0       0       0       0       0
  2614 ;;      Totals:         6       0       0       0       0
  2615 ;;Total ram usage:        6 bytes
  2616 ;; Hardware stack levels used:    1
  2617 ;; Hardware stack levels required when called:    1
  2618 ;; This function calls:
  2619 ;;		Nothing
  2620 ;; This function is called by:
  2621 ;;		_mapear
  2622 ;;		_uint_to_array
  2623 ;; This function uses a non-reentrant model
  2624 ;;
  2625                           
  2626                           
  2627                           ;psect for function ___wmul
  2628  0720                     ___wmul:	
  2629                           
  2630                           ;incstack = 0
  2631                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2632  0720  01F6               	clrf	___wmul@product
  2633  0721  01F7               	clrf	___wmul@product+1
  2634  0722                     l1571:	
  2635  0722  1C72               	btfss	___wmul@multiplier,0
  2636  0723  2F2A               	goto	l349
  2637  0724  0874               	movf	___wmul@multiplicand,w
  2638  0725  07F6               	addwf	___wmul@product,f
  2639  0726  1803               	skipnc
  2640  0727  0AF7               	incf	___wmul@product+1,f
  2641  0728  0875               	movf	___wmul@multiplicand+1,w
  2642  0729  07F7               	addwf	___wmul@product+1,f
  2643  072A                     l349:	
  2644  072A  3001               	movlw	1
  2645  072B                     u445:	
  2646  072B  1003               	clrc
  2647  072C  0DF4               	rlf	___wmul@multiplicand,f
  2648  072D  0DF5               	rlf	___wmul@multiplicand+1,f
  2649  072E  3EFF               	addlw	-1
  2650  072F  1D03               	skipz
  2651  0730  2F2B               	goto	u445
  2652  0731  3001               	movlw	1
  2653  0732                     u455:	
  2654  0732  1003               	clrc
  2655  0733  0CF3               	rrf	___wmul@multiplier+1,f
  2656  0734  0CF2               	rrf	___wmul@multiplier,f
  2657  0735  3EFF               	addlw	-1
  2658  0736  1D03               	skipz
  2659  0737  2F32               	goto	u455
  2660  0738  0872               	movf	___wmul@multiplier,w
  2661  0739  0473               	iorwf	___wmul@multiplier+1,w
  2662  073A  1D03               	btfss	3,2
  2663  073B  2F22               	goto	l1571
  2664  073C  0877               	movf	___wmul@product+1,w
  2665  073D  00F3               	movwf	?___wmul+1
  2666  073E  0876               	movf	___wmul@product,w
  2667  073F  00F2               	movwf	?___wmul
  2668  0740  0008               	return
  2669  0741                     __end_of___wmul:	
  2670                           
  2671                           	psect	text9
  2672  059C                     __ptext9:	
  2673 ;; *************** function _LCD_init *****************
  2674 ;; Defined at:
  2675 ;;		line 44 in file "LCD_8bits.c"
  2676 ;; Parameters:    Size  Location     Type
  2677 ;;		None
  2678 ;; Auto vars:     Size  Location     Type
  2679 ;;		None
  2680 ;; Return value:  Size  Location     Type
  2681 ;;                  1    wreg      void 
  2682 ;; Registers used:
  2683 ;;		wreg, status,2, status,0, pclath, cstack
  2684 ;; Tracked objects:
  2685 ;;		On entry : 0/0
  2686 ;;		On exit  : 0/0
  2687 ;;		Unchanged: 0/0
  2688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2689 ;;      Params:         0       0       0       0       0
  2690 ;;      Locals:         0       0       0       0       0
  2691 ;;      Temps:          2       0       0       0       0
  2692 ;;      Totals:         2       0       0       0       0
  2693 ;;Total ram usage:        2 bytes
  2694 ;; Hardware stack levels used:    1
  2695 ;; Hardware stack levels required when called:    2
  2696 ;; This function calls:
  2697 ;;		_LCD_Cmd
  2698 ;; This function is called by:
  2699 ;;		_main
  2700 ;; This function uses a non-reentrant model
  2701 ;;
  2702                           
  2703                           
  2704                           ;psect for function _LCD_init
  2705  059C                     _LCD_init:	
  2706                           
  2707                           ;LCD_8bits.c: 45:     _delay((unsigned long)((20)*(4000000/4000.0)));
  2708                           
  2709                           ;incstack = 0
  2710                           ; Regs used in _LCD_init: [wreg+status,2+status,0+pclath+cstack]
  2711  059C  301A               	movlw	26
  2712  059D  00F6               	movwf	??_LCD_init+1
  2713  059E  30F8               	movlw	248
  2714  059F  00F5               	movwf	??_LCD_init
  2715  05A0                     u1167:	
  2716  05A0  0BF5               	decfsz	??_LCD_init,f
  2717  05A1  2DA0               	goto	u1167
  2718  05A2  0BF6               	decfsz	??_LCD_init+1,f
  2719  05A3  2DA0               	goto	u1167
  2720  05A4  0000               	nop
  2721                           
  2722                           ;LCD_8bits.c: 46:     LCD_Cmd(0x30);
  2723  05A5  3030               	movlw	48
  2724  05A6  120A  118A  26A3  120A  118A  	fcall	_LCD_Cmd
  2725                           
  2726                           ;LCD_8bits.c: 47:     _delay((unsigned long)((5)*(4000000/4000.0)));
  2727  05AB  3007               	movlw	7
  2728  05AC  00F6               	movwf	??_LCD_init+1
  2729  05AD  307D               	movlw	125
  2730  05AE  00F5               	movwf	??_LCD_init
  2731  05AF                     u1177:	
  2732  05AF  0BF5               	decfsz	??_LCD_init,f
  2733  05B0  2DAF               	goto	u1177
  2734  05B1  0BF6               	decfsz	??_LCD_init+1,f
  2735  05B2  2DAF               	goto	u1177
  2736                           
  2737                           ;LCD_8bits.c: 48:     LCD_Cmd(0x30);
  2738  05B3  3030               	movlw	48
  2739  05B4  120A  118A  26A3  120A  118A  	fcall	_LCD_Cmd
  2740                           
  2741                           ;LCD_8bits.c: 49:     _delay((unsigned long)((100)*(4000000/4000000.0)));
  2742  05B9  3021               	movlw	33
  2743  05BA  00F5               	movwf	??_LCD_init
  2744  05BB                     u1187:	
  2745  05BB  0BF5               	decfsz	??_LCD_init,f
  2746  05BC  2DBB               	goto	u1187
  2747                           
  2748                           ;LCD_8bits.c: 50:     LCD_Cmd(0x30);
  2749  05BD  3030               	movlw	48
  2750  05BE  120A  118A  26A3  120A  118A  	fcall	_LCD_Cmd
  2751                           
  2752                           ;LCD_8bits.c: 51:     _delay((unsigned long)((100)*(4000000/4000000.0)));
  2753  05C3  3021               	movlw	33
  2754  05C4  00F5               	movwf	??_LCD_init
  2755  05C5                     u1197:	
  2756  05C5  0BF5               	decfsz	??_LCD_init,f
  2757  05C6  2DC5               	goto	u1197
  2758                           
  2759                           ;LCD_8bits.c: 52:     LCD_Cmd(0x38);
  2760  05C7  3038               	movlw	56
  2761  05C8  120A  118A  26A3  120A  118A  	fcall	_LCD_Cmd
  2762                           
  2763                           ;LCD_8bits.c: 53:     _delay((unsigned long)((53)*(4000000/4000000.0)));
  2764  05CD  3011               	movlw	17
  2765  05CE  00F5               	movwf	??_LCD_init
  2766  05CF                     u1207:	
  2767  05CF  0BF5               	decfsz	??_LCD_init,f
  2768  05D0  2DCF               	goto	u1207
  2769  05D1  0000               	nop
  2770                           
  2771                           ;LCD_8bits.c: 54:     LCD_Cmd(0x08);
  2772  05D2  3008               	movlw	8
  2773  05D3  120A  118A  26A3  120A  118A  	fcall	_LCD_Cmd
  2774                           
  2775                           ;LCD_8bits.c: 55:     _delay((unsigned long)((53)*(4000000/4000000.0)));
  2776  05D8  3011               	movlw	17
  2777  05D9  00F5               	movwf	??_LCD_init
  2778  05DA                     u1217:	
  2779  05DA  0BF5               	decfsz	??_LCD_init,f
  2780  05DB  2DDA               	goto	u1217
  2781  05DC  0000               	nop
  2782                           
  2783                           ;LCD_8bits.c: 56:     LCD_Cmd(0x01);
  2784  05DD  3001               	movlw	1
  2785  05DE  120A  118A  26A3  120A  118A  	fcall	_LCD_Cmd
  2786                           
  2787                           ;LCD_8bits.c: 57:     _delay((unsigned long)((3)*(4000000/4000.0)));
  2788  05E3  3004               	movlw	4
  2789  05E4  00F6               	movwf	??_LCD_init+1
  2790  05E5  30E4               	movlw	228
  2791  05E6  00F5               	movwf	??_LCD_init
  2792  05E7                     u1227:	
  2793  05E7  0BF5               	decfsz	??_LCD_init,f
  2794  05E8  2DE7               	goto	u1227
  2795  05E9  0BF6               	decfsz	??_LCD_init+1,f
  2796  05EA  2DE7               	goto	u1227
  2797  05EB  0000               	nop
  2798                           
  2799                           ;LCD_8bits.c: 58:     LCD_Cmd(0x06);
  2800  05EC  3006               	movlw	6
  2801  05ED  120A  118A  26A3  120A  118A  	fcall	_LCD_Cmd
  2802                           
  2803                           ;LCD_8bits.c: 59:     _delay((unsigned long)((53)*(4000000/4000000.0)));
  2804  05F2  3011               	movlw	17
  2805  05F3  00F5               	movwf	??_LCD_init
  2806  05F4                     u1237:	
  2807  05F4  0BF5               	decfsz	??_LCD_init,f
  2808  05F5  2DF4               	goto	u1237
  2809  05F6  0000               	nop
  2810                           
  2811                           ;LCD_8bits.c: 60:     LCD_Cmd(0x0C);
  2812  05F7  300C               	movlw	12
  2813  05F8  120A  118A  26A3  120A  118A  	fcall	_LCD_Cmd
  2814                           
  2815                           ;LCD_8bits.c: 61:     _delay((unsigned long)((53)*(4000000/4000000.0)));
  2816  05FD  3011               	movlw	17
  2817  05FE  00F5               	movwf	??_LCD_init
  2818  05FF                     u1247:	
  2819  05FF  0BF5               	decfsz	??_LCD_init,f
  2820  0600  2DFF               	goto	u1247
  2821  0601  0000               	nop
  2822  0602  0008               	return
  2823  0603                     __end_of_LCD_init:	
  2824                           
  2825                           	psect	text10
  2826  06FE                     __ptext10:	
  2827 ;; *************** function _LCD_Write_String *****************
  2828 ;; Defined at:
  2829 ;;		line 73 in file "LCD_8bits.c"
  2830 ;; Parameters:    Size  Location     Type
  2831 ;;  a               1    wreg     PTR unsigned char 
  2832 ;;		 -> STR_1(15), 
  2833 ;; Auto vars:     Size  Location     Type
  2834 ;;  a               1    6[COMMON] PTR unsigned char 
  2835 ;;		 -> STR_1(15), 
  2836 ;;  n               2    4[COMMON] int 
  2837 ;; Return value:  Size  Location     Type
  2838 ;;                  1    wreg      void 
  2839 ;; Registers used:
  2840 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2841 ;; Tracked objects:
  2842 ;;		On entry : 0/0
  2843 ;;		On exit  : 0/0
  2844 ;;		Unchanged: 0/0
  2845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2846 ;;      Params:         0       0       0       0       0
  2847 ;;      Locals:         3       0       0       0       0
  2848 ;;      Temps:          0       0       0       0       0
  2849 ;;      Totals:         3       0       0       0       0
  2850 ;;Total ram usage:        3 bytes
  2851 ;; Hardware stack levels used:    1
  2852 ;; Hardware stack levels required when called:    2
  2853 ;; This function calls:
  2854 ;;		_LCD_Write_Character
  2855 ;; This function is called by:
  2856 ;;		_main
  2857 ;; This function uses a non-reentrant model
  2858 ;;
  2859                           
  2860                           
  2861                           ;psect for function _LCD_Write_String
  2862  06FE                     _LCD_Write_String:	
  2863                           
  2864                           ;incstack = 0
  2865                           ; Regs used in _LCD_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2866                           ;LCD_Write_String@a stored from wreg
  2867  06FE  00F6               	movwf	LCD_Write_String@a
  2868                           
  2869                           ;LCD_8bits.c: 74:     int n;;LCD_8bits.c: 75:     for(n = 0; a[n] != '\0'; n++){
  2870  06FF  01F4               	clrf	LCD_Write_String@n
  2871  0700  01F5               	clrf	LCD_Write_String@n+1
  2872  0701                     l1767:	
  2873  0701  0874               	movf	LCD_Write_String@n,w
  2874  0702  0776               	addwf	LCD_Write_String@a,w
  2875  0703  0084               	movwf	4
  2876  0704  120A  118A  275E  120A  118A  	fcall	stringdir
  2877  0709  3A00               	xorlw	0
  2878  070A  1903               	btfsc	3,2
  2879  070B  0008               	return
  2880                           
  2881                           ;LCD_8bits.c: 76:         LCD_Write_Character(a[n]);
  2882  070C  0874               	movf	LCD_Write_String@n,w
  2883  070D  0776               	addwf	LCD_Write_String@a,w
  2884  070E  0084               	movwf	4
  2885  070F  120A  118A  275E  120A  118A  	fcall	stringdir
  2886  0714  120A  118A  2787  120A  118A  	fcall	_LCD_Write_Character
  2887                           
  2888                           ;LCD_8bits.c: 77:     }
  2889  0719  3001               	movlw	1
  2890  071A  07F4               	addwf	LCD_Write_String@n,f
  2891  071B  1803               	skipnc
  2892  071C  0AF5               	incf	LCD_Write_String@n+1,f
  2893  071D  3000               	movlw	0
  2894  071E  07F5               	addwf	LCD_Write_String@n+1,f
  2895  071F  2F01               	goto	l1767
  2896  0720                     __end_of_LCD_Write_String:	
  2897                           
  2898                           	psect	text11
  2899  0787                     __ptext11:	
  2900 ;; *************** function _LCD_Write_Character *****************
  2901 ;; Defined at:
  2902 ;;		line 64 in file "LCD_8bits.c"
  2903 ;; Parameters:    Size  Location     Type
  2904 ;;  caracter        1    wreg     unsigned char 
  2905 ;; Auto vars:     Size  Location     Type
  2906 ;;  caracter        1    3[COMMON] unsigned char 
  2907 ;; Return value:  Size  Location     Type
  2908 ;;                  1    wreg      void 
  2909 ;; Registers used:
  2910 ;;		wreg
  2911 ;; Tracked objects:
  2912 ;;		On entry : 0/0
  2913 ;;		On exit  : 0/0
  2914 ;;		Unchanged: 0/0
  2915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2916 ;;      Params:         0       0       0       0       0
  2917 ;;      Locals:         1       0       0       0       0
  2918 ;;      Temps:          1       0       0       0       0
  2919 ;;      Totals:         2       0       0       0       0
  2920 ;;Total ram usage:        2 bytes
  2921 ;; Hardware stack levels used:    1
  2922 ;; Hardware stack levels required when called:    1
  2923 ;; This function calls:
  2924 ;;		Nothing
  2925 ;; This function is called by:
  2926 ;;		_main
  2927 ;;		_LCD_Write_String
  2928 ;; This function uses a non-reentrant model
  2929 ;;
  2930                           
  2931                           
  2932                           ;psect for function _LCD_Write_Character
  2933  0787                     _LCD_Write_Character:	
  2934                           
  2935                           ;incstack = 0
  2936                           ; Regs used in _LCD_Write_Character: [wreg]
  2937                           ;LCD_Write_Character@caracter stored from wreg
  2938  0787  00F3               	movwf	LCD_Write_Character@caracter
  2939                           
  2940                           ;LCD_8bits.c: 65:     PORTCbits.RC0 = 1;
  2941  0788  1283               	bcf	3,5	;RP0=0, select bank0
  2942  0789  1303               	bcf	3,6	;RP1=0, select bank0
  2943  078A  1407               	bsf	7,0	;volatile
  2944                           
  2945                           ;LCD_8bits.c: 67:     PORTD = caracter;
  2946  078B  0873               	movf	LCD_Write_Character@caracter,w
  2947  078C  0088               	movwf	8	;volatile
  2948                           
  2949                           ;LCD_8bits.c: 68:     PORTCbits.RC1 = 1;
  2950  078D  1487               	bsf	7,1	;volatile
  2951                           
  2952                           ;LCD_8bits.c: 69:     _delay((unsigned long)((40)*(4000000/4000000.0)));
  2953  078E  300D               	movlw	13
  2954  078F  00F2               	movwf	??_LCD_Write_Character
  2955  0790                     u1257:	
  2956  0790  0BF2               	decfsz	??_LCD_Write_Character,f
  2957  0791  2F90               	goto	u1257
  2958                           
  2959                           ;LCD_8bits.c: 70:     PORTCbits.RC1 = 0;
  2960  0792  1283               	bcf	3,5	;RP0=0, select bank0
  2961  0793  1303               	bcf	3,6	;RP1=0, select bank0
  2962  0794  1087               	bcf	7,1	;volatile
  2963  0795  0008               	return
  2964  0796                     __end_of_LCD_Write_Character:	
  2965                           
  2966                           	psect	text12
  2967  06D2                     __ptext12:	
  2968 ;; *************** function _LCD_Set_Cursor *****************
  2969 ;; Defined at:
  2970 ;;		line 80 in file "LCD_8bits.c"
  2971 ;; Parameters:    Size  Location     Type
  2972 ;;  linea           1    wreg     unsigned char 
  2973 ;;  columna         1    5[COMMON] unsigned char 
  2974 ;; Auto vars:     Size  Location     Type
  2975 ;;  linea           1    8[COMMON] unsigned char 
  2976 ;;  corrimiento     1    9[COMMON] unsigned char 
  2977 ;; Return value:  Size  Location     Type
  2978 ;;                  1    wreg      void 
  2979 ;; Registers used:
  2980 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2981 ;; Tracked objects:
  2982 ;;		On entry : 0/0
  2983 ;;		On exit  : 0/0
  2984 ;;		Unchanged: 0/0
  2985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2986 ;;      Params:         1       0       0       0       0
  2987 ;;      Locals:         2       0       0       0       0
  2988 ;;      Temps:          2       0       0       0       0
  2989 ;;      Totals:         5       0       0       0       0
  2990 ;;Total ram usage:        5 bytes
  2991 ;; Hardware stack levels used:    1
  2992 ;; Hardware stack levels required when called:    2
  2993 ;; This function calls:
  2994 ;;		_LCD_Cmd
  2995 ;; This function is called by:
  2996 ;;		_main
  2997 ;; This function uses a non-reentrant model
  2998 ;;
  2999                           
  3000                           
  3001                           ;psect for function _LCD_Set_Cursor
  3002  06D2                     _LCD_Set_Cursor:	
  3003                           
  3004                           ;incstack = 0
  3005                           ; Regs used in _LCD_Set_Cursor: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3006                           ;LCD_Set_Cursor@linea stored from wreg
  3007  06D2  00F8               	movwf	LCD_Set_Cursor@linea
  3008                           
  3009                           ;LCD_8bits.c: 82:     switch (linea){
  3010  06D3  2EED               	goto	l1755
  3011  06D4                     l1745:	
  3012                           
  3013                           ;LCD_8bits.c: 84:             corrimiento = 0x80 + columna;
  3014  06D4  0875               	movf	LCD_Set_Cursor@columna,w
  3015  06D5  3E80               	addlw	128
  3016  06D6  00F6               	movwf	??_LCD_Set_Cursor
  3017  06D7  0876               	movf	??_LCD_Set_Cursor,w
  3018  06D8  00F9               	movwf	LCD_Set_Cursor@corrimiento
  3019                           
  3020                           ;LCD_8bits.c: 85:             LCD_Cmd(corrimiento);
  3021  06D9  0879               	movf	LCD_Set_Cursor@corrimiento,w
  3022  06DA  120A  118A  26A3   	fcall	_LCD_Cmd
  3023                           
  3024                           ;LCD_8bits.c: 86:             break;
  3025  06DD  0008               	return
  3026  06DE                     l1749:	
  3027                           
  3028                           ;LCD_8bits.c: 88:             corrimiento = 0x80 + 0x40 + columna;
  3029  06DE  0875               	movf	LCD_Set_Cursor@columna,w
  3030  06DF  3EC0               	addlw	192
  3031  06E0  00F6               	movwf	??_LCD_Set_Cursor
  3032  06E1  0876               	movf	??_LCD_Set_Cursor,w
  3033  06E2  00F9               	movwf	LCD_Set_Cursor@corrimiento
  3034                           
  3035                           ;LCD_8bits.c: 89:             LCD_Cmd(corrimiento);
  3036  06E3  0879               	movf	LCD_Set_Cursor@corrimiento,w
  3037  06E4  120A  118A  26A3   	fcall	_LCD_Cmd
  3038                           
  3039                           ;LCD_8bits.c: 90:             break;
  3040  06E7  0008               	return
  3041  06E8                     l1753:	
  3042                           
  3043                           ;LCD_8bits.c: 92:             LCD_Cmd(0x80);
  3044  06E8  3080               	movlw	128
  3045  06E9  120A  118A  26A3   	fcall	_LCD_Cmd
  3046                           
  3047                           ;LCD_8bits.c: 93:     }
  3048  06EC  0008               	return
  3049  06ED                     l1755:	
  3050  06ED  0878               	movf	LCD_Set_Cursor@linea,w
  3051  06EE  00F6               	movwf	??_LCD_Set_Cursor
  3052  06EF  01F7               	clrf	??_LCD_Set_Cursor+1
  3053                           
  3054                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3055                           ; Switch size 1, requested type "simple"
  3056                           ; Number of cases is 1, Range of values is 0 to 0
  3057                           ; switch strategies available:
  3058                           ; Name         Instructions Cycles
  3059                           ; simple_byte            4     3 (average)
  3060                           ; direct_byte           11     8 (fixed)
  3061                           ; jumptable            260     6 (fixed)
  3062                           ;	Chosen strategy is simple_byte
  3063  06F0  0877               	movf	??_LCD_Set_Cursor+1,w
  3064  06F1  3A00               	xorlw	0	; case 0
  3065  06F2  1903               	skipnz
  3066  06F3  2EF5               	goto	l2669
  3067  06F4  2EE8               	goto	l1753
  3068  06F5                     l2669:	
  3069                           
  3070                           ; Switch size 1, requested type "simple"
  3071                           ; Number of cases is 2, Range of values is 1 to 2
  3072                           ; switch strategies available:
  3073                           ; Name         Instructions Cycles
  3074                           ; simple_byte            7     4 (average)
  3075                           ; direct_byte           17    11 (fixed)
  3076                           ; jumptable            263     9 (fixed)
  3077                           ;	Chosen strategy is simple_byte
  3078  06F5  0876               	movf	??_LCD_Set_Cursor,w
  3079  06F6  3A01               	xorlw	1	; case 1
  3080  06F7  1903               	skipnz
  3081  06F8  2ED4               	goto	l1745
  3082  06F9  3A03               	xorlw	3	; case 2
  3083  06FA  1903               	skipnz
  3084  06FB  2EDE               	goto	l1749
  3085  06FC  2EE8               	goto	l1753
  3086  06FD  0008               	return
  3087  06FE                     __end_of_LCD_Set_Cursor:	
  3088                           
  3089                           	psect	text13
  3090  06A3                     __ptext13:	
  3091 ;; *************** function _LCD_Cmd *****************
  3092 ;; Defined at:
  3093 ;;		line 21 in file "LCD_8bits.c"
  3094 ;; Parameters:    Size  Location     Type
  3095 ;;  comando         1    wreg     unsigned char 
  3096 ;; Auto vars:     Size  Location     Type
  3097 ;;  comando         1    4[COMMON] unsigned char 
  3098 ;; Return value:  Size  Location     Type
  3099 ;;                  1    wreg      void 
  3100 ;; Registers used:
  3101 ;;		wreg
  3102 ;; Tracked objects:
  3103 ;;		On entry : 0/0
  3104 ;;		On exit  : 0/0
  3105 ;;		Unchanged: 0/0
  3106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3107 ;;      Params:         0       0       0       0       0
  3108 ;;      Locals:         1       0       0       0       0
  3109 ;;      Temps:          2       0       0       0       0
  3110 ;;      Totals:         3       0       0       0       0
  3111 ;;Total ram usage:        3 bytes
  3112 ;; Hardware stack levels used:    1
  3113 ;; Hardware stack levels required when called:    1
  3114 ;; This function calls:
  3115 ;;		Nothing
  3116 ;; This function is called by:
  3117 ;;		_LCD_init
  3118 ;;		_LCD_Set_Cursor
  3119 ;;		_LCD_clear
  3120 ;;		_LCD_home
  3121 ;;		_LCD_Shift_links
  3122 ;;		_LCD_Shift_rechts
  3123 ;;		_LCD_Cursor_rechts
  3124 ;;		_LCD_Cursor_links
  3125 ;; This function uses a non-reentrant model
  3126 ;;
  3127                           
  3128                           
  3129                           ;psect for function _LCD_Cmd
  3130  06A3                     _LCD_Cmd:	
  3131                           
  3132                           ;incstack = 0
  3133                           ; Regs used in _LCD_Cmd: [wreg]
  3134                           ;LCD_Cmd@comando stored from wreg
  3135  06A3  00F4               	movwf	LCD_Cmd@comando
  3136                           
  3137                           ;LCD_8bits.c: 22:     PORTCbits.RC0 = 0;
  3138  06A4  1283               	bcf	3,5	;RP0=0, select bank0
  3139  06A5  1303               	bcf	3,6	;RP1=0, select bank0
  3140  06A6  1007               	bcf	7,0	;volatile
  3141                           
  3142                           ;LCD_8bits.c: 23:     _delay((unsigned long)((5)*(4000000/4000.0)));
  3143  06A7  3007               	movlw	7
  3144  06A8  00F3               	movwf	??_LCD_Cmd+1
  3145  06A9  307D               	movlw	125
  3146  06AA  00F2               	movwf	??_LCD_Cmd
  3147  06AB                     u1267:	
  3148  06AB  0BF2               	decfsz	??_LCD_Cmd,f
  3149  06AC  2EAB               	goto	u1267
  3150  06AD  0BF3               	decfsz	??_LCD_Cmd+1,f
  3151  06AE  2EAB               	goto	u1267
  3152                           
  3153                           ;LCD_8bits.c: 24:     PORTCbits.RC1 = 1;
  3154  06AF  1283               	bcf	3,5	;RP0=0, select bank0
  3155  06B0  1303               	bcf	3,6	;RP1=0, select bank0
  3156  06B1  1487               	bsf	7,1	;volatile
  3157                           
  3158                           ;LCD_8bits.c: 25:     _delay((unsigned long)((5)*(4000000/4000.0)));
  3159  06B2  3007               	movlw	7
  3160  06B3  00F3               	movwf	??_LCD_Cmd+1
  3161  06B4  307D               	movlw	125
  3162  06B5  00F2               	movwf	??_LCD_Cmd
  3163  06B6                     u1277:	
  3164  06B6  0BF2               	decfsz	??_LCD_Cmd,f
  3165  06B7  2EB6               	goto	u1277
  3166  06B8  0BF3               	decfsz	??_LCD_Cmd+1,f
  3167  06B9  2EB6               	goto	u1277
  3168                           
  3169                           ;LCD_8bits.c: 26:     PORTD = comando;
  3170  06BA  0874               	movf	LCD_Cmd@comando,w
  3171  06BB  1283               	bcf	3,5	;RP0=0, select bank0
  3172  06BC  1303               	bcf	3,6	;RP1=0, select bank0
  3173  06BD  0088               	movwf	8	;volatile
  3174                           
  3175                           ;LCD_8bits.c: 27:     _delay((unsigned long)((5)*(4000000/4000.0)));
  3176  06BE  3007               	movlw	7
  3177  06BF  00F3               	movwf	??_LCD_Cmd+1
  3178  06C0  307D               	movlw	125
  3179  06C1  00F2               	movwf	??_LCD_Cmd
  3180  06C2                     u1287:	
  3181  06C2  0BF2               	decfsz	??_LCD_Cmd,f
  3182  06C3  2EC2               	goto	u1287
  3183  06C4  0BF3               	decfsz	??_LCD_Cmd+1,f
  3184  06C5  2EC2               	goto	u1287
  3185                           
  3186                           ;LCD_8bits.c: 28:     PORTCbits.RC1 = 0;
  3187  06C6  1283               	bcf	3,5	;RP0=0, select bank0
  3188  06C7  1303               	bcf	3,6	;RP1=0, select bank0
  3189  06C8  1087               	bcf	7,1	;volatile
  3190                           
  3191                           ;LCD_8bits.c: 29:     _delay((unsigned long)((5)*(4000000/4000.0)));
  3192  06C9  3007               	movlw	7
  3193  06CA  00F3               	movwf	??_LCD_Cmd+1
  3194  06CB  307D               	movlw	125
  3195  06CC  00F2               	movwf	??_LCD_Cmd
  3196  06CD                     u1297:	
  3197  06CD  0BF2               	decfsz	??_LCD_Cmd,f
  3198  06CE  2ECD               	goto	u1297
  3199  06CF  0BF3               	decfsz	??_LCD_Cmd+1,f
  3200  06D0  2ECD               	goto	u1297
  3201  06D1  0008               	return
  3202  06D2                     __end_of_LCD_Cmd:	
  3203                           
  3204                           	psect	text14
  3205  0741                     __ptext14:	
  3206 ;; *************** function _AnalogRead_8 *****************
  3207 ;; Defined at:
  3208 ;;		line 97 in file "ADC.c"
  3209 ;; Parameters:    Size  Location     Type
  3210 ;;  just            1    wreg     unsigned char 
  3211 ;; Auto vars:     Size  Location     Type
  3212 ;;  just            1    4[COMMON] unsigned char 
  3213 ;;  conversion      1    5[COMMON] unsigned char 
  3214 ;; Return value:  Size  Location     Type
  3215 ;;                  1    wreg      unsigned char 
  3216 ;; Registers used:
  3217 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3218 ;; Tracked objects:
  3219 ;;		On entry : 0/0
  3220 ;;		On exit  : 0/0
  3221 ;;		Unchanged: 0/0
  3222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3223 ;;      Params:         0       0       0       0       0
  3224 ;;      Locals:         2       0       0       0       0
  3225 ;;      Temps:          2       0       0       0       0
  3226 ;;      Totals:         4       0       0       0       0
  3227 ;;Total ram usage:        4 bytes
  3228 ;; Hardware stack levels used:    1
  3229 ;; Hardware stack levels required when called:    1
  3230 ;; This function calls:
  3231 ;;		Nothing
  3232 ;; This function is called by:
  3233 ;;		_main
  3234 ;; This function uses a non-reentrant model
  3235 ;;
  3236                           
  3237                           
  3238                           ;psect for function _AnalogRead_8
  3239  0741                     _AnalogRead_8:	
  3240                           
  3241                           ;incstack = 0
  3242                           ; Regs used in _AnalogRead_8: [wreg-fsr0h+status,2+status,0]
  3243                           ;AnalogRead_8@just stored from wreg
  3244  0741  00F4               	movwf	AnalogRead_8@just
  3245                           
  3246                           ;ADC.c: 99:     switch (just){
  3247  0742  2F4C               	goto	l1801
  3248  0743                     l1795:	
  3249                           
  3250                           ;ADC.c: 101:             conversion = ADRESH;
  3251  0743  1283               	bcf	3,5	;RP0=0, select bank0
  3252  0744  2F46               	goto	L11
  3253  0745                     l1797:	
  3254                           ;ADC.c: 102:             break;
  3255                           
  3256                           
  3257                           ;ADC.c: 104:             conversion = ADRESL;
  3258  0745  1683               	bsf	3,5	;RP0=1, select bank1
  3259  0746                     L11:	
  3260  0746  1303               	bcf	3,6	;RP1=0, select bank1
  3261  0747  081E               	movf	30,w	;volatile
  3262  0748  00F2               	movwf	??_AnalogRead_8
  3263  0749  0872               	movf	??_AnalogRead_8,w
  3264  074A  00F5               	movwf	AnalogRead_8@conversion
  3265                           
  3266                           ;ADC.c: 105:             break;
  3267  074B  2F5C               	goto	l1803
  3268  074C                     l1801:	
  3269  074C  0874               	movf	AnalogRead_8@just,w
  3270  074D  00F2               	movwf	??_AnalogRead_8
  3271  074E  01F3               	clrf	??_AnalogRead_8+1
  3272                           
  3273                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3274                           ; Switch size 1, requested type "simple"
  3275                           ; Number of cases is 1, Range of values is 0 to 0
  3276                           ; switch strategies available:
  3277                           ; Name         Instructions Cycles
  3278                           ; simple_byte            4     3 (average)
  3279                           ; direct_byte           11     8 (fixed)
  3280                           ; jumptable            260     6 (fixed)
  3281                           ;	Chosen strategy is simple_byte
  3282  074F  0873               	movf	??_AnalogRead_8+1,w
  3283  0750  3A00               	xorlw	0	; case 0
  3284  0751  1903               	skipnz
  3285  0752  2F54               	goto	l2671
  3286  0753  2F43               	goto	l1795
  3287  0754                     l2671:	
  3288                           
  3289                           ; Switch size 1, requested type "simple"
  3290                           ; Number of cases is 2, Range of values is 72 to 76
  3291                           ; switch strategies available:
  3292                           ; Name         Instructions Cycles
  3293                           ; simple_byte            7     4 (average)
  3294                           ; direct_byte           26    11 (fixed)
  3295                           ; jumptable            263     9 (fixed)
  3296                           ;	Chosen strategy is simple_byte
  3297  0754  0872               	movf	??_AnalogRead_8,w
  3298  0755  3A48               	xorlw	72	; case 72
  3299  0756  1903               	skipnz
  3300  0757  2F43               	goto	l1795
  3301  0758  3A04               	xorlw	4	; case 76
  3302  0759  1903               	skipnz
  3303  075A  2F45               	goto	l1797
  3304  075B  2F43               	goto	l1795
  3305  075C                     l1803:	
  3306                           
  3307                           ;ADC.c: 109:     return (conversion);
  3308  075C  0875               	movf	AnalogRead_8@conversion,w
  3309  075D  0008               	return
  3310  075E                     __end_of_AnalogRead_8:	
  3311                           
  3312                           	psect	text15
  3313  01CE                     __ptext15:	
  3314 ;; *************** function _ADConfig *****************
  3315 ;; Defined at:
  3316 ;;		line 16 in file "ADC.c"
  3317 ;; Parameters:    Size  Location     Type
  3318 ;;  oscFreq         1    wreg     unsigned char 
  3319 ;;  canal           1    2[COMMON] unsigned char 
  3320 ;;  justificado     1    3[COMMON] unsigned char 
  3321 ;; Auto vars:     Size  Location     Type
  3322 ;;  oscFreq         1    6[COMMON] unsigned char 
  3323 ;; Return value:  Size  Location     Type
  3324 ;;                  1    wreg      void 
  3325 ;; Registers used:
  3326 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3327 ;; Tracked objects:
  3328 ;;		On entry : 0/0
  3329 ;;		On exit  : 0/0
  3330 ;;		Unchanged: 0/0
  3331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3332 ;;      Params:         2       0       0       0       0
  3333 ;;      Locals:         1       0       0       0       0
  3334 ;;      Temps:          2       0       0       0       0
  3335 ;;      Totals:         5       0       0       0       0
  3336 ;;Total ram usage:        5 bytes
  3337 ;; Hardware stack levels used:    1
  3338 ;; Hardware stack levels required when called:    1
  3339 ;; This function calls:
  3340 ;;		Nothing
  3341 ;; This function is called by:
  3342 ;;		_main
  3343 ;; This function uses a non-reentrant model
  3344 ;;
  3345                           
  3346                           
  3347                           ;psect for function _ADConfig
  3348  01CE                     _ADConfig:	
  3349                           
  3350                           ;incstack = 0
  3351                           ; Regs used in _ADConfig: [wreg-fsr0h+status,2+status,0]
  3352                           ;ADConfig@oscFreq stored from wreg
  3353  01CE  00F6               	movwf	ADConfig@oscFreq
  3354                           
  3355                           ;ADC.c: 17:     switch(oscFreq){
  3356  01CF  29E8               	goto	l1703
  3357  01D0                     l1693:	
  3358                           
  3359                           ;ADC.c: 19:             ADCON0bits.ADCS = 0b00;
  3360  01D0  303F               	movlw	-193
  3361  01D1  1283               	bcf	3,5	;RP0=0, select bank0
  3362  01D2  1303               	bcf	3,6	;RP1=0, select bank0
  3363  01D3  059F               	andwf	31,f	;volatile
  3364                           
  3365                           ;ADC.c: 20:             break;
  3366  01D4  2A07               	goto	l1705
  3367  01D5                     l1695:	
  3368  01D5  29E1               	goto	l1701
  3369  01D6                     l1697:	
  3370                           ;ADC.c: 23:             break;
  3371                           
  3372                           ;ADC.c: 22:             ADCON0bits.ADCS = 0b01;
  3373                           
  3374                           
  3375                           ;ADC.c: 25:             ADCON0bits.ADCS = 0b10;
  3376  01D6  1283               	bcf	3,5	;RP0=0, select bank0
  3377  01D7  1303               	bcf	3,6	;RP1=0, select bank0
  3378  01D8  081F               	movf	31,w	;volatile
  3379  01D9  393F               	andlw	-193
  3380  01DA  3880               	iorlw	128
  3381  01DB  29E6               	goto	L13
  3382  01DC                     l1699:	
  3383                           ;ADC.c: 26:             break;
  3384                           
  3385                           
  3386                           ;ADC.c: 28:             ADCON0bits.ADCS = 0b11;
  3387  01DC  30C0               	movlw	192
  3388  01DD  1283               	bcf	3,5	;RP0=0, select bank0
  3389  01DE  1303               	bcf	3,6	;RP1=0, select bank0
  3390  01DF  049F               	iorwf	31,f	;volatile
  3391                           
  3392                           ;ADC.c: 29:             break;
  3393  01E0  2A07               	goto	l1705
  3394  01E1                     l1701:	
  3395                           
  3396                           ;ADC.c: 31:             ADCON0bits.ADCS = 0b01;
  3397  01E1  1283               	bcf	3,5	;RP0=0, select bank0
  3398  01E2  1303               	bcf	3,6	;RP1=0, select bank0
  3399  01E3  081F               	movf	31,w	;volatile
  3400  01E4  393F               	andlw	-193
  3401  01E5  3840               	iorlw	64
  3402  01E6                     L13:	
  3403  01E6  009F               	movwf	31	;volatile
  3404                           
  3405                           ;ADC.c: 32:     }
  3406  01E7  2A07               	goto	l1705
  3407  01E8                     l1703:	
  3408  01E8  0876               	movf	ADConfig@oscFreq,w
  3409  01E9  00F4               	movwf	??_ADConfig
  3410  01EA  01F5               	clrf	??_ADConfig+1
  3411                           
  3412                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3413                           ; Switch size 1, requested type "simple"
  3414                           ; Number of cases is 1, Range of values is 0 to 0
  3415                           ; switch strategies available:
  3416                           ; Name         Instructions Cycles
  3417                           ; simple_byte            4     3 (average)
  3418                           ; direct_byte           11     8 (fixed)
  3419                           ; jumptable            260     6 (fixed)
  3420                           ;	Chosen strategy is simple_byte
  3421  01EB  0875               	movf	??_ADConfig+1,w
  3422  01EC  3A00               	xorlw	0	; case 0
  3423  01ED  1903               	skipnz
  3424  01EE  29F0               	goto	l2673
  3425  01EF  29E1               	goto	l1701
  3426  01F0                     l2673:	
  3427                           
  3428                           ; Switch size 1, requested type "simple"
  3429                           ; Number of cases is 4, Range of values is 1 to 20
  3430                           ; switch strategies available:
  3431                           ; Name         Instructions Cycles
  3432                           ; simple_byte           13     7 (average)
  3433                           ; direct_byte           71    11 (fixed)
  3434                           ; jumptable            263     9 (fixed)
  3435                           ;	Chosen strategy is simple_byte
  3436  01F0  0874               	movf	??_ADConfig,w
  3437  01F1  3A01               	xorlw	1	; case 1
  3438  01F2  1903               	skipnz
  3439  01F3  29D0               	goto	l1693
  3440  01F4  3A05               	xorlw	5	; case 4
  3441  01F5  1903               	skipnz
  3442  01F6  29D5               	goto	l1695
  3443  01F7  3A0C               	xorlw	12	; case 8
  3444  01F8  1903               	skipnz
  3445  01F9  29D6               	goto	l1697
  3446  01FA  3A1C               	xorlw	28	; case 20
  3447  01FB  1903               	skipnz
  3448  01FC  29DC               	goto	l1699
  3449  01FD  29E1               	goto	l1701
  3450  01FE                     l207:	
  3451                           ;ADC.c: 34:         case 'H':
  3452                           
  3453  01FE  2A03               	goto	l210
  3454  01FF                     l209:	
  3455                           ;ADC.c: 37:         case 'L':
  3456                           
  3457                           ;ADC.c: 36:             break;
  3458                           
  3459                           ;ADC.c: 35:             ADCON1bits.ADFM = 0;
  3460                           
  3461                           
  3462                           ;ADC.c: 38:             ADCON1bits.ADFM = 1;
  3463  01FF  1683               	bsf	3,5	;RP0=1, select bank1
  3464  0200  1303               	bcf	3,6	;RP1=0, select bank1
  3465  0201  179F               	bsf	31,7	;volatile
  3466                           
  3467                           ;ADC.c: 39:             break;
  3468  0202  2A62               	goto	l1725
  3469  0203                     l210:	
  3470                           ;ADC.c: 40:         default:
  3471                           
  3472                           
  3473                           ;ADC.c: 41:             ADCON1bits.ADFM = 0;
  3474  0203  1683               	bsf	3,5	;RP0=1, select bank1
  3475  0204  1303               	bcf	3,6	;RP1=0, select bank1
  3476  0205  139F               	bcf	31,7	;volatile
  3477                           
  3478                           ;ADC.c: 42:     }
  3479  0206  2A62               	goto	l1725
  3480  0207                     l1705:	
  3481  0207  0873               	movf	ADConfig@justificado,w
  3482  0208  00F4               	movwf	??_ADConfig
  3483  0209  01F5               	clrf	??_ADConfig+1
  3484                           
  3485                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3486                           ; Switch size 1, requested type "simple"
  3487                           ; Number of cases is 1, Range of values is 0 to 0
  3488                           ; switch strategies available:
  3489                           ; Name         Instructions Cycles
  3490                           ; simple_byte            4     3 (average)
  3491                           ; direct_byte           11     8 (fixed)
  3492                           ; jumptable            260     6 (fixed)
  3493                           ;	Chosen strategy is simple_byte
  3494  020A  0875               	movf	??_ADConfig+1,w
  3495  020B  3A00               	xorlw	0	; case 0
  3496  020C  1903               	skipnz
  3497  020D  2A0F               	goto	l2675
  3498  020E  2A03               	goto	l210
  3499  020F                     l2675:	
  3500                           
  3501                           ; Switch size 1, requested type "simple"
  3502                           ; Number of cases is 2, Range of values is 72 to 76
  3503                           ; switch strategies available:
  3504                           ; Name         Instructions Cycles
  3505                           ; simple_byte            7     4 (average)
  3506                           ; direct_byte           26    11 (fixed)
  3507                           ; jumptable            263     9 (fixed)
  3508                           ;	Chosen strategy is simple_byte
  3509  020F  0874               	movf	??_ADConfig,w
  3510  0210  3A48               	xorlw	72	; case 72
  3511  0211  1903               	skipnz
  3512  0212  29FE               	goto	l207
  3513  0213  3A04               	xorlw	4	; case 76
  3514  0214  1903               	skipnz
  3515  0215  29FF               	goto	l209
  3516  0216  2A03               	goto	l210
  3517  0217                     l212:	
  3518                           ;ADC.c: 44:         case 0:
  3519                           
  3520                           
  3521                           ;ADC.c: 45:             TRISAbits.TRISA0 = 1;
  3522  0217  1405               	bsf	5,0	;volatile
  3523                           
  3524                           ;ADC.c: 46:             ANSELbits.ANS0 = 1;
  3525  0218  1683               	bsf	3,5	;RP0=1, select bank3
  3526  0219  1703               	bsf	3,6	;RP1=1, select bank3
  3527  021A  1408               	bsf	8,0	;volatile
  3528                           
  3529                           ;ADC.c: 47:             ADCON0bits.CHS = 0;
  3530  021B  30C3               	movlw	-61
  3531  021C  1283               	bcf	3,5	;RP0=0, select bank0
  3532  021D  1303               	bcf	3,6	;RP1=0, select bank0
  3533  021E  059F               	andwf	31,f	;volatile
  3534                           
  3535                           ;ADC.c: 48:             break;
  3536  021F  2A84               	goto	l213
  3537  0220                     l214:	
  3538                           ;ADC.c: 49:         case 1:
  3539                           
  3540                           
  3541                           ;ADC.c: 50:             TRISAbits.TRISA1 = 1;
  3542  0220  1485               	bsf	5,1	;volatile
  3543                           
  3544                           ;ADC.c: 51:             ANSELbits.ANS1 = 1;
  3545  0221  1683               	bsf	3,5	;RP0=1, select bank3
  3546  0222  1703               	bsf	3,6	;RP1=1, select bank3
  3547  0223  1488               	bsf	8,1	;volatile
  3548                           
  3549                           ;ADC.c: 52:             ADCON0bits.CHS = 1;
  3550  0224  1283               	bcf	3,5	;RP0=0, select bank0
  3551  0225  1303               	bcf	3,6	;RP1=0, select bank0
  3552  0226  081F               	movf	31,w	;volatile
  3553  0227  39C3               	andlw	-61
  3554  0228  3804               	iorlw	4
  3555  0229  2A60               	goto	L19
  3556  022A                     l215:	
  3557                           ;ADC.c: 54:         case 2:
  3558                           
  3559                           ;ADC.c: 53:             break;
  3560                           
  3561                           
  3562                           ;ADC.c: 55:             TRISAbits.TRISA2 = 1;
  3563  022A  1505               	bsf	5,2	;volatile
  3564                           
  3565                           ;ADC.c: 56:             ANSELbits.ANS2 = 1;
  3566  022B  1683               	bsf	3,5	;RP0=1, select bank3
  3567  022C  1703               	bsf	3,6	;RP1=1, select bank3
  3568  022D  1508               	bsf	8,2	;volatile
  3569                           
  3570                           ;ADC.c: 57:             ADCON0bits.CHS = 2;
  3571  022E  1283               	bcf	3,5	;RP0=0, select bank0
  3572  022F  1303               	bcf	3,6	;RP1=0, select bank0
  3573  0230  081F               	movf	31,w	;volatile
  3574  0231  39C3               	andlw	-61
  3575  0232  3808               	iorlw	8
  3576  0233  2A60               	goto	L19
  3577  0234                     l216:	
  3578                           ;ADC.c: 59:         case 3:
  3579                           
  3580                           ;ADC.c: 58:             break;
  3581                           
  3582                           
  3583                           ;ADC.c: 60:             TRISAbits.TRISA3 = 1;
  3584  0234  1585               	bsf	5,3	;volatile
  3585                           
  3586                           ;ADC.c: 61:             ANSELbits.ANS3 = 1;
  3587  0235  1683               	bsf	3,5	;RP0=1, select bank3
  3588  0236  1703               	bsf	3,6	;RP1=1, select bank3
  3589  0237  1588               	bsf	8,3	;volatile
  3590  0238  2A3D               	goto	L20
  3591  0239                     l217:	
  3592                           ;ADC.c: 64:         case 4:
  3593                           
  3594                           ;ADC.c: 63:             break;
  3595                           
  3596                           ;ADC.c: 62:             ADCON0bits.CHS = 3;
  3597                           
  3598                           
  3599                           ;ADC.c: 65:             TRISAbits.TRISA5 = 1;
  3600  0239  1685               	bsf	5,5	;volatile
  3601                           
  3602                           ;ADC.c: 66:             ANSELbits.ANS4 = 1;
  3603  023A  1683               	bsf	3,5	;RP0=1, select bank3
  3604  023B  1703               	bsf	3,6	;RP1=1, select bank3
  3605  023C  1608               	bsf	8,4	;volatile
  3606  023D                     L20:	
  3607                           
  3608                           ;ADC.c: 67:             ADCON0bits.CHS = 3;
  3609  023D  1283               	bcf	3,5	;RP0=0, select bank0
  3610  023E  1303               	bcf	3,6	;RP1=0, select bank0
  3611  023F  081F               	movf	31,w	;volatile
  3612  0240  39C3               	andlw	-61
  3613  0241  380C               	iorlw	12
  3614  0242  2A60               	goto	L19
  3615  0243                     l218:	
  3616                           ;ADC.c: 69:         case 5:
  3617                           
  3618                           ;ADC.c: 68:             break;
  3619                           
  3620                           
  3621                           ;ADC.c: 70:             TRISEbits.TRISE0 = 1;
  3622  0243  1409               	bsf	9,0	;volatile
  3623                           
  3624                           ;ADC.c: 71:             ANSELbits.ANS5 = 1;
  3625  0244  1683               	bsf	3,5	;RP0=1, select bank3
  3626  0245  1703               	bsf	3,6	;RP1=1, select bank3
  3627  0246  1688               	bsf	8,5	;volatile
  3628                           
  3629                           ;ADC.c: 72:             ADCON0bits.CHS = 5;
  3630  0247  1283               	bcf	3,5	;RP0=0, select bank0
  3631  0248  1303               	bcf	3,6	;RP1=0, select bank0
  3632  0249  081F               	movf	31,w	;volatile
  3633  024A  39C3               	andlw	-61
  3634  024B  3814               	iorlw	20
  3635  024C  2A60               	goto	L19
  3636  024D                     l219:	
  3637                           ;ADC.c: 74:         case 6:
  3638                           
  3639                           ;ADC.c: 73:             break;
  3640                           
  3641                           
  3642                           ;ADC.c: 75:             TRISEbits.TRISE1 = 1;
  3643  024D  1489               	bsf	9,1	;volatile
  3644                           
  3645                           ;ADC.c: 76:             ANSELbits.ANS6 = 1;
  3646  024E  1683               	bsf	3,5	;RP0=1, select bank3
  3647  024F  1703               	bsf	3,6	;RP1=1, select bank3
  3648  0250  1708               	bsf	8,6	;volatile
  3649                           
  3650                           ;ADC.c: 77:             ADCON0bits.CHS = 6;
  3651  0251  1283               	bcf	3,5	;RP0=0, select bank0
  3652  0252  1303               	bcf	3,6	;RP1=0, select bank0
  3653  0253  081F               	movf	31,w	;volatile
  3654  0254  39C3               	andlw	-61
  3655  0255  3818               	iorlw	24
  3656  0256  2A60               	goto	L19
  3657  0257                     l220:	
  3658                           ;ADC.c: 79:         case 7:
  3659                           
  3660                           ;ADC.c: 78:             break;
  3661                           
  3662                           
  3663                           ;ADC.c: 80:             TRISEbits.TRISE2 = 1;
  3664  0257  1509               	bsf	9,2	;volatile
  3665                           
  3666                           ;ADC.c: 81:             ANSELbits.ANS7 = 1;
  3667  0258  1683               	bsf	3,5	;RP0=1, select bank3
  3668  0259  1703               	bsf	3,6	;RP1=1, select bank3
  3669  025A  1788               	bsf	8,7	;volatile
  3670                           
  3671                           ;ADC.c: 82:             ADCON0bits.CHS = 7;
  3672  025B  1283               	bcf	3,5	;RP0=0, select bank0
  3673  025C  1303               	bcf	3,6	;RP1=0, select bank0
  3674  025D  081F               	movf	31,w	;volatile
  3675  025E  39C3               	andlw	-61
  3676  025F  381C               	iorlw	28
  3677  0260                     L19:	
  3678  0260  009F               	movwf	31	;volatile
  3679                           
  3680                           ;ADC.c: 83:             break;
  3681  0261  2A84               	goto	l213
  3682  0262                     l1725:	
  3683  0262  0872               	movf	ADConfig@canal,w
  3684  0263  00F4               	movwf	??_ADConfig
  3685  0264  01F5               	clrf	??_ADConfig+1
  3686                           
  3687                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3688                           ; Switch size 1, requested type "simple"
  3689                           ; Number of cases is 1, Range of values is 0 to 0
  3690                           ; switch strategies available:
  3691                           ; Name         Instructions Cycles
  3692                           ; simple_byte            4     3 (average)
  3693                           ; direct_byte           11     8 (fixed)
  3694                           ; jumptable            260     6 (fixed)
  3695                           ;	Chosen strategy is simple_byte
  3696  0265  0875               	movf	??_ADConfig+1,w
  3697  0266  3A00               	xorlw	0	; case 0
  3698  0267  1903               	skipnz
  3699  0268  2A6A               	goto	l2677
  3700  0269  2A84               	goto	l213
  3701  026A                     l2677:	
  3702                           
  3703                           ; Switch size 1, requested type "simple"
  3704                           ; Number of cases is 8, Range of values is 0 to 7
  3705                           ; switch strategies available:
  3706                           ; Name         Instructions Cycles
  3707                           ; simple_byte           25    13 (average)
  3708                           ; direct_byte           32     8 (fixed)
  3709                           ; jumptable            260     6 (fixed)
  3710                           ;	Chosen strategy is simple_byte
  3711  026A  0874               	movf	??_ADConfig,w
  3712  026B  3A00               	xorlw	0	; case 0
  3713  026C  1903               	skipnz
  3714  026D  2A17               	goto	l212
  3715  026E  3A01               	xorlw	1	; case 1
  3716  026F  1903               	skipnz
  3717  0270  2A20               	goto	l214
  3718  0271  3A03               	xorlw	3	; case 2
  3719  0272  1903               	skipnz
  3720  0273  2A2A               	goto	l215
  3721  0274  3A01               	xorlw	1	; case 3
  3722  0275  1903               	skipnz
  3723  0276  2A34               	goto	l216
  3724  0277  3A07               	xorlw	7	; case 4
  3725  0278  1903               	skipnz
  3726  0279  2A39               	goto	l217
  3727  027A  3A01               	xorlw	1	; case 5
  3728  027B  1903               	skipnz
  3729  027C  2A43               	goto	l218
  3730  027D  3A03               	xorlw	3	; case 6
  3731  027E  1903               	skipnz
  3732  027F  2A4D               	goto	l219
  3733  0280  3A01               	xorlw	1	; case 7
  3734  0281  1903               	skipnz
  3735  0282  2A57               	goto	l220
  3736  0283  2A84               	goto	l213
  3737  0284                     l213:	
  3738                           
  3739                           ;ADC.c: 88:     ADCON0bits.ADON = 1;
  3740  0284  1283               	bcf	3,5	;RP0=0, select bank0
  3741  0285  141F               	bsf	31,0	;volatile
  3742                           
  3743                           ;ADC.c: 89:     PIR1bits.ADIF = 0;
  3744  0286  130C               	bcf	12,6	;volatile
  3745                           
  3746                           ;ADC.c: 90:     PIE1bits.ADIE = 1;
  3747  0287  1683               	bsf	3,5	;RP0=1, select bank1
  3748  0288  1303               	bcf	3,6	;RP1=0, select bank1
  3749  0289  170C               	bsf	12,6	;volatile
  3750                           
  3751                           ;ADC.c: 91:     INTCONbits.PEIE = 1;
  3752  028A  170B               	bsf	11,6	;volatile
  3753                           
  3754                           ;ADC.c: 92:     INTCONbits.GIE = 1;
  3755  028B  178B               	bsf	11,7	;volatile
  3756                           
  3757                           ;ADC.c: 93:     _delay((unsigned long)((30)*(4000000/4000.0)));
  3758  028C  3027               	movlw	39
  3759  028D  00F5               	movwf	??_ADConfig+1
  3760  028E  30F5               	movlw	245
  3761  028F  00F4               	movwf	??_ADConfig
  3762  0290                     u1307:	
  3763  0290  0BF4               	decfsz	??_ADConfig,f
  3764  0291  2A90               	goto	u1307
  3765  0292  0BF5               	decfsz	??_ADConfig+1,f
  3766  0293  2A90               	goto	u1307
  3767                           
  3768                           ;ADC.c: 94:     ADCON0bits.GO_nDONE = 1;
  3769  0294  1283               	bcf	3,5	;RP0=0, select bank0
  3770  0295  1303               	bcf	3,6	;RP1=0, select bank0
  3771  0296  149F               	bsf	31,1	;volatile
  3772  0297  0008               	return
  3773  0298                     __end_of_ADConfig:	
  3774                           
  3775                           	psect	text16
  3776  048C                     __ptext16:	
  3777 ;; *************** function _ADC_CHselect *****************
  3778 ;; Defined at:
  3779 ;;		line 121 in file "ADC.c"
  3780 ;; Parameters:    Size  Location     Type
  3781 ;;  canal           1    wreg     unsigned char 
  3782 ;; Auto vars:     Size  Location     Type
  3783 ;;  canal           1    4[COMMON] unsigned char 
  3784 ;; Return value:  Size  Location     Type
  3785 ;;                  1    wreg      void 
  3786 ;; Registers used:
  3787 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3788 ;; Tracked objects:
  3789 ;;		On entry : 0/0
  3790 ;;		On exit  : 0/0
  3791 ;;		Unchanged: 0/0
  3792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3793 ;;      Params:         0       0       0       0       0
  3794 ;;      Locals:         1       0       0       0       0
  3795 ;;      Temps:          2       0       0       0       0
  3796 ;;      Totals:         3       0       0       0       0
  3797 ;;Total ram usage:        3 bytes
  3798 ;; Hardware stack levels used:    1
  3799 ;; Hardware stack levels required when called:    1
  3800 ;; This function calls:
  3801 ;;		Nothing
  3802 ;; This function is called by:
  3803 ;;		_main
  3804 ;; This function uses a non-reentrant model
  3805 ;;
  3806                           
  3807                           
  3808                           ;psect for function _ADC_CHselect
  3809  048C                     _ADC_CHselect:	
  3810                           
  3811                           ;incstack = 0
  3812                           ; Regs used in _ADC_CHselect: [wreg-fsr0h+status,2+status,0]
  3813                           ;ADC_CHselect@canal stored from wreg
  3814  048C  00F4               	movwf	ADC_CHselect@canal
  3815                           
  3816                           ;ADC.c: 122:     switch (canal){
  3817  048D  2CF4               	goto	l1831
  3818  048E                     l236:	
  3819                           ;ADC.c: 123:         case 0:
  3820                           
  3821                           
  3822                           ;ADC.c: 124:             TRISAbits.TRISA0 = 1;
  3823  048E  1683               	bsf	3,5	;RP0=1, select bank1
  3824  048F  1303               	bcf	3,6	;RP1=0, select bank1
  3825  0490  1405               	bsf	5,0	;volatile
  3826                           
  3827                           ;ADC.c: 125:             ANSELbits.ANS0 = 1;
  3828  0491  1683               	bsf	3,5	;RP0=1, select bank3
  3829  0492  1703               	bsf	3,6	;RP1=1, select bank3
  3830  0493  1408               	bsf	8,0	;volatile
  3831                           
  3832                           ;ADC.c: 126:             ADCON0bits.CHS = 0;
  3833  0494  30C3               	movlw	-61
  3834  0495  1283               	bcf	3,5	;RP0=0, select bank0
  3835  0496  1303               	bcf	3,6	;RP1=0, select bank0
  3836  0497  059F               	andwf	31,f	;volatile
  3837                           
  3838                           ;ADC.c: 127:             break;
  3839  0498  0008               	return
  3840  0499                     l238:	
  3841                           ;ADC.c: 128:         case 1:
  3842                           
  3843                           
  3844                           ;ADC.c: 129:             TRISAbits.TRISA1 = 1;
  3845  0499  1683               	bsf	3,5	;RP0=1, select bank1
  3846  049A  1303               	bcf	3,6	;RP1=0, select bank1
  3847  049B  1485               	bsf	5,1	;volatile
  3848                           
  3849                           ;ADC.c: 130:             ANSELbits.ANS1 = 1;
  3850  049C  1683               	bsf	3,5	;RP0=1, select bank3
  3851  049D  1703               	bsf	3,6	;RP1=1, select bank3
  3852  049E  1488               	bsf	8,1	;volatile
  3853                           
  3854                           ;ADC.c: 131:             ADCON0bits.CHS = 1;
  3855  049F  1283               	bcf	3,5	;RP0=0, select bank0
  3856  04A0  1303               	bcf	3,6	;RP1=0, select bank0
  3857  04A1  081F               	movf	31,w	;volatile
  3858  04A2  39C3               	andlw	-61
  3859  04A3  3804               	iorlw	4
  3860  04A4  009F               	movwf	31	;volatile
  3861                           
  3862                           ;ADC.c: 132:             break;
  3863  04A5  0008               	return
  3864  04A6                     l239:	
  3865                           ;ADC.c: 133:         case 2:
  3866                           
  3867                           
  3868                           ;ADC.c: 134:             TRISAbits.TRISA2 = 1;
  3869  04A6  1683               	bsf	3,5	;RP0=1, select bank1
  3870  04A7  1303               	bcf	3,6	;RP1=0, select bank1
  3871  04A8  1505               	bsf	5,2	;volatile
  3872                           
  3873                           ;ADC.c: 135:             ANSELbits.ANS2 = 1;
  3874  04A9  1683               	bsf	3,5	;RP0=1, select bank3
  3875  04AA  1703               	bsf	3,6	;RP1=1, select bank3
  3876  04AB  1508               	bsf	8,2	;volatile
  3877                           
  3878                           ;ADC.c: 136:             ADCON0bits.CHS = 2;
  3879  04AC  1283               	bcf	3,5	;RP0=0, select bank0
  3880  04AD  1303               	bcf	3,6	;RP1=0, select bank0
  3881  04AE  081F               	movf	31,w	;volatile
  3882  04AF  39C3               	andlw	-61
  3883  04B0  3808               	iorlw	8
  3884  04B1  009F               	movwf	31	;volatile
  3885                           
  3886                           ;ADC.c: 137:             break;
  3887  04B2  0008               	return
  3888  04B3                     l240:	
  3889                           ;ADC.c: 138:         case 3:
  3890                           
  3891                           
  3892                           ;ADC.c: 139:             TRISAbits.TRISA3 = 1;
  3893  04B3  1683               	bsf	3,5	;RP0=1, select bank1
  3894  04B4  1303               	bcf	3,6	;RP1=0, select bank1
  3895  04B5  1585               	bsf	5,3	;volatile
  3896                           
  3897                           ;ADC.c: 140:             ANSELbits.ANS3 = 1;
  3898  04B6  1683               	bsf	3,5	;RP0=1, select bank3
  3899  04B7  1703               	bsf	3,6	;RP1=1, select bank3
  3900  04B8  1588               	bsf	8,3	;volatile
  3901                           
  3902                           ;ADC.c: 141:             ADCON0bits.CHS = 3;
  3903  04B9  1283               	bcf	3,5	;RP0=0, select bank0
  3904  04BA  1303               	bcf	3,6	;RP1=0, select bank0
  3905  04BB  081F               	movf	31,w	;volatile
  3906  04BC  39C3               	andlw	-61
  3907  04BD  380C               	iorlw	12
  3908  04BE  009F               	movwf	31	;volatile
  3909                           
  3910                           ;ADC.c: 142:             break;
  3911  04BF  0008               	return
  3912  04C0                     l241:	
  3913                           ;ADC.c: 143:         case 4:
  3914                           
  3915                           
  3916                           ;ADC.c: 144:             TRISAbits.TRISA5 = 1;
  3917  04C0  1683               	bsf	3,5	;RP0=1, select bank1
  3918  04C1  1303               	bcf	3,6	;RP1=0, select bank1
  3919  04C2  1685               	bsf	5,5	;volatile
  3920                           
  3921                           ;ADC.c: 145:             ANSELbits.ANS4 = 1;
  3922  04C3  1683               	bsf	3,5	;RP0=1, select bank3
  3923  04C4  1703               	bsf	3,6	;RP1=1, select bank3
  3924  04C5  1608               	bsf	8,4	;volatile
  3925                           
  3926                           ;ADC.c: 146:             ADCON0bits.CHS = 3;
  3927  04C6  1283               	bcf	3,5	;RP0=0, select bank0
  3928  04C7  1303               	bcf	3,6	;RP1=0, select bank0
  3929  04C8  081F               	movf	31,w	;volatile
  3930  04C9  39C3               	andlw	-61
  3931  04CA  380C               	iorlw	12
  3932  04CB  009F               	movwf	31	;volatile
  3933                           
  3934                           ;ADC.c: 147:             break;
  3935  04CC  0008               	return
  3936  04CD                     l242:	
  3937                           ;ADC.c: 148:         case 5:
  3938                           
  3939                           
  3940                           ;ADC.c: 149:             TRISEbits.TRISE0 = 1;
  3941  04CD  1683               	bsf	3,5	;RP0=1, select bank1
  3942  04CE  1303               	bcf	3,6	;RP1=0, select bank1
  3943  04CF  1409               	bsf	9,0	;volatile
  3944                           
  3945                           ;ADC.c: 150:             ANSELbits.ANS5 = 1;
  3946  04D0  1683               	bsf	3,5	;RP0=1, select bank3
  3947  04D1  1703               	bsf	3,6	;RP1=1, select bank3
  3948  04D2  1688               	bsf	8,5	;volatile
  3949                           
  3950                           ;ADC.c: 151:             ADCON0bits.CHS = 5;
  3951  04D3  1283               	bcf	3,5	;RP0=0, select bank0
  3952  04D4  1303               	bcf	3,6	;RP1=0, select bank0
  3953  04D5  081F               	movf	31,w	;volatile
  3954  04D6  39C3               	andlw	-61
  3955  04D7  3814               	iorlw	20
  3956  04D8  009F               	movwf	31	;volatile
  3957                           
  3958                           ;ADC.c: 152:             break;
  3959  04D9  0008               	return
  3960  04DA                     l243:	
  3961                           ;ADC.c: 153:         case 6:
  3962                           
  3963                           
  3964                           ;ADC.c: 154:             TRISEbits.TRISE1 = 1;
  3965  04DA  1683               	bsf	3,5	;RP0=1, select bank1
  3966  04DB  1303               	bcf	3,6	;RP1=0, select bank1
  3967  04DC  1489               	bsf	9,1	;volatile
  3968                           
  3969                           ;ADC.c: 155:             ANSELbits.ANS6 = 1;
  3970  04DD  1683               	bsf	3,5	;RP0=1, select bank3
  3971  04DE  1703               	bsf	3,6	;RP1=1, select bank3
  3972  04DF  1708               	bsf	8,6	;volatile
  3973                           
  3974                           ;ADC.c: 156:             ADCON0bits.CHS = 6;
  3975  04E0  1283               	bcf	3,5	;RP0=0, select bank0
  3976  04E1  1303               	bcf	3,6	;RP1=0, select bank0
  3977  04E2  081F               	movf	31,w	;volatile
  3978  04E3  39C3               	andlw	-61
  3979  04E4  3818               	iorlw	24
  3980  04E5  009F               	movwf	31	;volatile
  3981                           
  3982                           ;ADC.c: 157:             break;
  3983  04E6  0008               	return
  3984  04E7                     l244:	
  3985                           ;ADC.c: 158:         case 7:
  3986                           
  3987                           
  3988                           ;ADC.c: 159:             TRISEbits.TRISE2 = 1;
  3989  04E7  1683               	bsf	3,5	;RP0=1, select bank1
  3990  04E8  1303               	bcf	3,6	;RP1=0, select bank1
  3991  04E9  1509               	bsf	9,2	;volatile
  3992                           
  3993                           ;ADC.c: 160:             ANSELbits.ANS7 = 1;
  3994  04EA  1683               	bsf	3,5	;RP0=1, select bank3
  3995  04EB  1703               	bsf	3,6	;RP1=1, select bank3
  3996  04EC  1788               	bsf	8,7	;volatile
  3997                           
  3998                           ;ADC.c: 161:             ADCON0bits.CHS = 7;
  3999  04ED  1283               	bcf	3,5	;RP0=0, select bank0
  4000  04EE  1303               	bcf	3,6	;RP1=0, select bank0
  4001  04EF  081F               	movf	31,w	;volatile
  4002  04F0  39C3               	andlw	-61
  4003  04F1  381C               	iorlw	28
  4004  04F2  009F               	movwf	31	;volatile
  4005                           
  4006                           ;ADC.c: 162:             break;
  4007  04F3  0008               	return
  4008  04F4                     l1831:	
  4009  04F4  0874               	movf	ADC_CHselect@canal,w
  4010  04F5  00F2               	movwf	??_ADC_CHselect
  4011  04F6  01F3               	clrf	??_ADC_CHselect+1
  4012                           
  4013                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4014                           ; Switch size 1, requested type "simple"
  4015                           ; Number of cases is 1, Range of values is 0 to 0
  4016                           ; switch strategies available:
  4017                           ; Name         Instructions Cycles
  4018                           ; simple_byte            4     3 (average)
  4019                           ; direct_byte           11     8 (fixed)
  4020                           ; jumptable            260     6 (fixed)
  4021                           ;	Chosen strategy is simple_byte
  4022  04F7  0873               	movf	??_ADC_CHselect+1,w
  4023  04F8  3A00               	xorlw	0	; case 0
  4024  04F9  1903               	skipnz
  4025  04FA  2CFC               	goto	l2679
  4026  04FB  2D16               	goto	l245
  4027  04FC                     l2679:	
  4028                           
  4029                           ; Switch size 1, requested type "simple"
  4030                           ; Number of cases is 8, Range of values is 0 to 7
  4031                           ; switch strategies available:
  4032                           ; Name         Instructions Cycles
  4033                           ; simple_byte           25    13 (average)
  4034                           ; direct_byte           32     8 (fixed)
  4035                           ; jumptable            260     6 (fixed)
  4036                           ;	Chosen strategy is simple_byte
  4037  04FC  0872               	movf	??_ADC_CHselect,w
  4038  04FD  3A00               	xorlw	0	; case 0
  4039  04FE  1903               	skipnz
  4040  04FF  2C8E               	goto	l236
  4041  0500  3A01               	xorlw	1	; case 1
  4042  0501  1903               	skipnz
  4043  0502  2C99               	goto	l238
  4044  0503  3A03               	xorlw	3	; case 2
  4045  0504  1903               	skipnz
  4046  0505  2CA6               	goto	l239
  4047  0506  3A01               	xorlw	1	; case 3
  4048  0507  1903               	skipnz
  4049  0508  2CB3               	goto	l240
  4050  0509  3A07               	xorlw	7	; case 4
  4051  050A  1903               	skipnz
  4052  050B  2CC0               	goto	l241
  4053  050C  3A01               	xorlw	1	; case 5
  4054  050D  1903               	skipnz
  4055  050E  2CCD               	goto	l242
  4056  050F  3A03               	xorlw	3	; case 6
  4057  0510  1903               	skipnz
  4058  0511  2CDA               	goto	l243
  4059  0512  3A01               	xorlw	1	; case 7
  4060  0513  1903               	skipnz
  4061  0514  2CE7               	goto	l244
  4062  0515  2D16               	goto	l245
  4063  0516                     l245:	
  4064  0516  0008               	return
  4065  0517                     __end_of_ADC_CHselect:	
  4066                           
  4067                           	psect	text17
  4068  0773                     __ptext17:	
  4069 ;; *************** function _ISR_ADC *****************
  4070 ;; Defined at:
  4071 ;;		line 51 in file "main.c"
  4072 ;; Parameters:    Size  Location     Type
  4073 ;;		None
  4074 ;; Auto vars:     Size  Location     Type
  4075 ;;		None
  4076 ;; Return value:  Size  Location     Type
  4077 ;;                  1    wreg      void 
  4078 ;; Registers used:
  4079 ;;		None
  4080 ;; Tracked objects:
  4081 ;;		On entry : 0/0
  4082 ;;		On exit  : 0/0
  4083 ;;		Unchanged: 0/0
  4084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4085 ;;      Params:         0       0       0       0       0
  4086 ;;      Locals:         0       0       0       0       0
  4087 ;;      Temps:          2       0       0       0       0
  4088 ;;      Totals:         2       0       0       0       0
  4089 ;;Total ram usage:        2 bytes
  4090 ;; Hardware stack levels used:    1
  4091 ;; This function calls:
  4092 ;;		Nothing
  4093 ;; This function is called by:
  4094 ;;		Interrupt level 1
  4095 ;; This function uses a non-reentrant model
  4096 ;;
  4097                           
  4098                           
  4099                           ;psect for function _ISR_ADC
  4100  0773                     _ISR_ADC:	
  4101                           
  4102                           ;main.c: 52:     if (PIR1bits.ADIF && PIE1bits.ADIE){
  4103  0773  1283               	bcf	3,5	;RP0=0, select bank0
  4104  0774  1303               	bcf	3,6	;RP1=0, select bank0
  4105  0775  1F0C               	btfss	12,6	;volatile
  4106  0776  2F80               	goto	i1l66
  4107  0777  1683               	bsf	3,5	;RP0=1, select bank1
  4108  0778  1303               	bcf	3,6	;RP1=0, select bank1
  4109  0779  1F0C               	btfss	12,6	;volatile
  4110  077A  2F80               	goto	i1l66
  4111                           
  4112                           ;main.c: 53:         PIE1bits.ADIE = 0;
  4113  077B  130C               	bcf	12,6	;volatile
  4114                           
  4115                           ;main.c: 54:         banderaADC = 1;
  4116  077C  1283               	bcf	3,5	;RP0=0, select bank0
  4117  077D  1303               	bcf	3,6	;RP1=0, select bank0
  4118  077E  01D8               	clrf	_banderaADC
  4119  077F  0AD8               	incf	_banderaADC,f
  4120  0780                     i1l66:	
  4121  0780  0871               	movf	??_ISR_ADC+1,w
  4122  0781  008A               	movwf	10
  4123  0782  0E70               	swapf	??_ISR_ADC^(0+4294967168),w
  4124  0783  0083               	movwf	3
  4125  0784  0EFE               	swapf	126,f
  4126  0785  0E7E               	swapf	126,w
  4127  0786  0009               	retfie
  4128  0787                     __end_of_ISR_ADC:	
  4129  007E                     btemp	set	126	;btemp
  4130  007E                     wtemp0	set	126
  4131                           
  4132                           	psect	intentry
  4133  0004                     __pintentry:	
  4134                           ;incstack = 0
  4135                           ; Regs used in _ISR_ADC: []
  4136                           
  4137  0004                     interrupt_function:	
  4138  007E                     saved_w	set	btemp
  4139  0004  00FE               	movwf	btemp
  4140  0005  0E03               	swapf	3,w
  4141  0006  00F0               	movwf	??_ISR_ADC
  4142  0007  080A               	movf	10,w
  4143  0008  00F1               	movwf	??_ISR_ADC+1
  4144  0009  120A  118A  2F73   	ljmp	_ISR_ADC


Data Sizes:
    Strings     15
    Constant    0
    Data        2
    BSS         31
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     26      57
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    LCD_Write_String@a	PTR unsigned char  size(1) Largest target is 15
		 -> STR_1(CODE[15]), 

    sp__uint_to_array	PTR unsigned int  size(1) Largest target is 6
		 -> uint_to_array@resultado(BANK0[6]), 

    num3	PTR unsigned int  size(1) Largest target is 6
		 -> NULL(NULL[0]), uint_to_array@resultado(BANK0[6]), 

    num2	PTR unsigned int  size(1) Largest target is 6
		 -> NULL(NULL[0]), mapear@resultado(BANK0[6]), 

    sp__mapear	PTR unsigned int  size(1) Largest target is 6
		 -> mapear@resultado(BANK0[6]), 

    num1	PTR unsigned int  size(1) Largest target is 6
		 -> NULL(NULL[0]), mapear@resultado(BANK0[6]), 


Critical Paths under _main in COMMON

    _main->_LCD_Set_Cursor
    _main->_mapear
    _uint_to_array->___awdiv
    ___awdiv->___wmul
    _uartRC_init->___aldiv
    _mapear->___wmul
    _LCD_init->_LCD_Cmd
    _LCD_Write_String->_LCD_Write_Character
    _LCD_Set_Cursor->_LCD_Cmd

Critical Paths under _ISR_ADC in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_uartRC_init
    _main->_uint_to_array
    _uint_to_array->___awdiv
    _uartRC_init->___aldiv

Critical Paths under _ISR_ADC in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR_ADC in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR_ADC in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR_ADC in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    6089
                                             23 BANK0      3     3      0
                       _ADC_CHselect
                           _ADConfig
                       _AnalogRead_8
                     _LCD_Set_Cursor
                _LCD_Write_Character
                   _LCD_Write_String
                           _LCD_init
                             _mapear
                        _uartRC_Read
                        _uartRC_init
                      _uint_to_array
                       _uint_to_char
 ---------------------------------------------------------------------------------
 (1) _uint_to_char                                         4     4      0      56
                                              2 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _uint_to_array                                       15    15      0    2186
                                              8 BANK0     15    15      0
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     805
                                              8 COMMON     1     1      0
                                              0 BANK0      8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _uartRC_init                                         16    14      2    1118
                                              7 BANK0     16    14      2
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     805
                                              2 COMMON     8     0      8
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _uartRC_Read                                          3     3      0       1
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _mapear                                              15    13      2    1812
                                              8 COMMON     2     0      2
                                              0 BANK0     13    13      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1004
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) _LCD_init                                             2     2      0      22
                                              5 COMMON     2     2      0
                            _LCD_Cmd
 ---------------------------------------------------------------------------------
 (1) _LCD_Write_String                                     3     3      0     145
                                              4 COMMON     3     3      0
                _LCD_Write_Character
 ---------------------------------------------------------------------------------
 (2) _LCD_Write_Character                                  2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _LCD_Set_Cursor                                       5     4      1     439
                                              5 COMMON     5     4      1
                            _LCD_Cmd
 ---------------------------------------------------------------------------------
 (2) _LCD_Cmd                                              3     3      0      22
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _AnalogRead_8                                         4     4      0      48
                                              2 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _ADConfig                                             5     3      2     218
                                              2 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (1) _ADC_CHselect                                         3     3      0      22
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR_ADC                                              2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_CHselect
   _ADConfig
   _AnalogRead_8
   _LCD_Set_Cursor
     _LCD_Cmd
   _LCD_Write_Character
   _LCD_Write_String
     _LCD_Write_Character
   _LCD_init
     _LCD_Cmd
   _mapear
     ___wmul
   _uartRC_Read
   _uartRC_init
     ___aldiv
   _uint_to_array
     ___awdiv
       ___wmul (ARG)
     ___wmul
   _uint_to_char

 _ISR_ADC (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     1A      39       5       71.3%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      A       C       1       85.7%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      45      12        0.0%
ABS                  0      0      45       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sun Feb 09 22:33:45 2020

                           pc 0002                   __CFG_CP$OFF 0000                  ___awdiv@sign 0042  
             mapear@resultado 0042                            fsr 0004           ___wmul@multiplicand 0074  
                         l210 0203                           l220 0257                           l212 0217  
                         l213 0284                           l214 0220                           l215 022A  
                         l207 01FE                           l240 04B3                           l216 0234  
                         l241 04C0                           l217 0239                           l209 01FF  
                         l242 04CD                           l218 0243                           l243 04DA  
                         l219 024D                           l244 04E7                           l236 048E  
                         l245 0516                           l238 0499                           l414 040F  
                         l239 04A6                           l349 072A                  __CFG_CPD$OFF 0000  
                         u445 072B                           u455 0732                           u740 0366  
                         u905 0442                           u755 038D                           u915 0457  
                         u765 03BB                           u925 0469                           u775 03E9  
                         u885 0434                           u985 0625                  _uint_to_char 065E  
                         fsr0 0004                           indf 0000         __size_of_ADC_CHselect 008B  
__size_of_LCD_Write_Character 000F               __end_of_LCD_Cmd 06D2                  __CFG_LVP$OFF 0000  
              _LCD_Set_Cursor 06D2                          l2323 0659                          l2315 0646  
                        l2307 0622                          l2403 00E3                          l1701 01E1  
                        l2261 0430                          l2253 0420                          l2309 0630  
                        l2421 014F                          l1703 01E8                          l2271 0468  
                        l2263 0440                          l2335 034A                          l2319 0651  
                        l2431 016D                          l2423 0162                          l1705 0207  
                        l1801 074C                          l2441 0186                          l2433 0171  
                        l1803 075C                          l1571 0722                          l2275 0475  
                        l2291 060F                          l2435 0173                          l2419 014C  
                        l1725 0262                          l1831 04F4                          l2279 0483  
                        l2439 0176                          l2383 0077                          l1753 06E8  
                        l1745 06D4                          l2297 061A                          l2377 005E  
                        l1755 06ED                          l1851 03CD                          l1843 0384  
                        l2387 007D                          l1693 01D0                          l1749 06DE  
                        l1845 039F                          l1695 01D5                          l2671 0754  
                        l1767 0701                          l1855 03E0                          l1871 0668  
                        l1863 0660                          l2663 015A                          l2673 01F0  
                        l1697 01D6                          l1857 03FB                          l1849 03B2  
                        l1881 0672                          l1873 066A                          l1865 0662  
                        l2665 017E                          l2675 020F                          l1699 01DC  
                        l1795 0743                          l2667 0681                          l1883 0674  
                        l1875 066C                          l1867 0664                          l2677 026A  
                        l1797 0745                          l2669 06F5                          l1877 066E  
                        l1869 0666                          l1885 0679                          l2679 04FC  
                        l1879 0670                          l1887 06A1                          STR_1 0764  
                        u1005 0631                          u1110 051E                          u1015 063D  
                        u1025 0647                          u1207 05CF                          u1071 02CB  
                        u1055 02A0                          u1072 02CC                          u1217 05DA  
                        u1073 02D1                          u1065 02B1                          u1074 02D2  
                        u1307 0290                          u1227 05E7                          u1091 0327  
                        u1075 02D7                          u1147 0072                          u1092 0328  
                        u1076 02D8                          u1237 05F4                          u1157 079A  
                        u1093 032D                          u1094 032E                          u1247 05FF  
                        u1167 05A0                          u1095 0333                          u1096 0334  
                        u1257 0790                          u1177 05AF                          u1267 06AB  
                        u1187 05BB                          u1277 06B6                          u1197 05C5  
                        u1287 06C2                          u1297 06CD                          i1l66 0780  
             __end_of_ISR_ADC 0787                  __CFG_WRT$OFF 0000             ?_LCD_Write_String 0070  
                        _main 0028                          _num1 007B                          _num2 007A  
                        _num3 003A                          btemp 007E                 _uint_to_array 0517  
                        start 000C            ??_LCD_Write_String 0074                 __CFG_IESO$OFF 0000  
            __end_of_ADConfig 0298              __end_of_LCD_init 0603               __end_of___aldiv 048C  
                       ?_main 0070                  _ADC_CHselect 048C               __end_of___awdiv 065E  
               __CFG_WDTE$OFF 0000            uint_to_char@numChr 0075               ___awdiv@divisor 003D  
          uint_to_char@numero 0074               ___awdiv@counter 0041                         _RCREG 001A  
                       _SPBRG 0099                         _PORTC 0007                         _PORTD 0008  
                       _TRISC 0087                         _TRISD 0088                __CFG_FCMEN$OFF 0000  
      __end_of_LCD_Set_Cursor 06FE                   mapear@F1346 0032                __CFG_BOREN$OFF 0000  
                       pclath 000A                ?_uint_to_array 0070                         status 0003  
                       wtemp0 007E                   mapear@valor 0041                __CFG_MCLRE$OFF 0000  
             __initialization 000F                  __end_of_main 01CE                        ??_main 0054  
                   ??_LCD_Cmd 0072         __size_of_AnalogRead_8 001D                     ??_ISR_ADC 0070  
             ?_LCD_Set_Cursor 0075                        _ADRESH 001E                        _ADRESL 009E  
            ___awdiv@dividend 003F                  ?_uartRC_Read 0070            uint_to_array@F1341 002C  
                ?_uartRC_init 0044   LCD_Write_Character@caracter 0073                __CFG_PWRTE$OFF 0000  
                   ??___aldiv 003D                        ___wmul 0720                     ??___awdiv 0078  
                      _mapear 035F                  _AnalogRead_8 0741                        _linea2 0020  
            ___awdiv@quotient 0043                        saved_w 007E                     ?_ADConfig 0072  
             ??_uint_to_array 0045                  mapear@limSup 0079       __end_of__initialization 0024  
                   ?_LCD_init 0070                __pcstackCOMMON 0070           _LCD_Write_Character 0787  
                __pidataBANK0 07AA                    _banderaADC 0058          ?_LCD_Write_Character 0070  
                  ??_ADConfig 0074                LCD_Cmd@comando 0074                    __pbssBANK0 0020  
   LCD_Set_Cursor@corrimiento 0079                    ??_LCD_init 0075                    __pmaintext 0028  
               ADConfig@canal 0072                       ?___wmul 0072                    __pintentry 0004  
                     ?_mapear 0078     __size_of_LCD_Write_String 0022               ADConfig@oscFreq 0076  
                     _LCD_Cmd 06A3                 _banderaSerial 0039                       _ISR_ADC 0773  
       ??_LCD_Write_Character 0072                    __stringtab 075E        AnalogRead_8@conversion 0075  
        __size_of_uartRC_Read 000C          __size_of_uartRC_init 00C7        uint_to_array@resultado 004C  
                     ___aldiv 03FD                       ___awdiv 0603               __size_of___wmul 0021  
             __size_of_mapear 009E                     _ANSELbits 0188              ??_LCD_Set_Cursor 0076  
                     __ptext1 065E                       __ptext2 0517                       __ptext3 0603  
                     __ptext4 0298                       __ptext5 03FD                       __ptext6 0796  
                     __ptext7 035F                       __ptext8 0720                       __ptext9 059C  
         uint_to_array@numero 0053              ___aldiv@dividend 0076                       clrloop0 07A3  
        end_of_initialization 0024                     _RCSTAbits 0018              ___aldiv@quotient 0040  
                   _PORTCbits 0007                 mapear@limReal 0078                     _TRISAbits 0085  
                   _TRISEbits 0089             LCD_Write_String@a 0076             LCD_Write_String@n 0074  
           __size_of_ADConfig 00CA                     _TXSTAbits 0098             __size_of_LCD_init 0067  
       LCD_Set_Cursor@columna 0075                __end_of___wmul 0741              _LCD_Write_String 06FE  
              __end_of_mapear 03FD                 ?_uint_to_char 0070           start_initialization 000F  
       __end_of_uint_to_array 059C      __CFG_FOSC$INTRC_NOCLKOUT 0000                      ??___wmul 0076  
                 __pdataBANK0 0057                      ??_mapear 003D                 ?_ADC_CHselect 0070  
              ??_uint_to_char 0072                      ?_LCD_Cmd 0070                   __pbssCOMMON 007A  
                   ___latbits 0002                 __pcstackBANK0 003D                      ?_ISR_ADC 0070  
       uint_to_array@centenas 0052                      ?___aldiv 0072                      ?___awdiv 003D  
              ??_ADC_CHselect 0072                     __pstrings 075E   __end_of_LCD_Write_Character 0796  
                    _ADConfig 01CE                 ??_uartRC_Read 0072               ___aldiv@divisor 0072  
           interrupt_function 0004                 ??_uartRC_init 0046               ___aldiv@counter 003E  
              ___wmul@product 0076                      _LCD_init 059C                     clear_ram0 07A2  
                    _PIE1bits 008C                      _PIR1bits 000C                 ?_AnalogRead_8 0070  
                  _ADCON0bits 001F                   __stringbase 0763                    _ADCON1bits 009F  
           ___wmul@multiplier 0072           ADConfig@justificado 0073              __size_of_LCD_Cmd 002F  
            __size_of_ISR_ADC 0014           uartRC_init@baudrate 0044      __end_of_LCD_Write_String 0720  
        __end_of_uint_to_char 06A3           __end_of_uartRC_Read 07A2           __end_of_uartRC_init 035F  
              ??_AnalogRead_8 0072              __size_of___aldiv 008F              __size_of___awdiv 005B  
          __end_of__stringtab 0764                  uartRC_init@n 0052          uint_to_array@decenas 004B  
                    __ptext10 06FE                      __ptext11 0787                      __ptext12 06D2  
                    __ptext13 06A3                      __ptext14 0741                      __ptext15 01CE  
                    __ptext16 048C                      __ptext17 0773             __CFG_BOR4V$BOR40V 0000  
                _valorADC_CH0 003B                  _valorADC_CH5 003C             ADC_CHselect@canal 0074  
     __size_of_LCD_Set_Cursor 002C                      _contador 0038          __end_of_ADC_CHselect 0517  
               __size_of_main 01A6           LCD_Set_Cursor@linea 0078                    _INTCONbits 000B  
                    intlevel1 0000                   _uartRC_Read 0796                   _uartRC_init 0298  
                   stringcode 075E              AnalogRead_8@just 0074                   _valorSerial 0057  
             mapear@dividendo 0048        __size_of_uint_to_array 0085                      stringdir 075E  
                    stringtab 075E                  ___aldiv@sign 003F          __end_of_AnalogRead_8 075E  
       __size_of_uint_to_char 0045  
