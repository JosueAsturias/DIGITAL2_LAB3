

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Mon Feb 10 12:09:36 2020

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	intentry,global,class=CODE,delta=2
    33                           	dabs	1,0x7E,2
    34  0000                     
    35                           ; Version 2.05
    36                           ; Generated 20/12/2018 GMT
    37                           ; 
    38                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    39                           ; All rights reserved.
    40                           ; 
    41                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    42                           ; 
    43                           ; Redistribution and use in source and binary forms, with or without modification, are
    44                           ; permitted provided that the following conditions are met:
    45                           ; 
    46                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    47                           ;        conditions and the following disclaimer.
    48                           ; 
    49                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    50                           ;        of conditions and the following disclaimer in the documentation and/or other
    51                           ;        materials provided with the distribution.
    52                           ; 
    53                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    54                           ;        software without specific prior written permission.
    55                           ; 
    56                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    57                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    58                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    59                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    60                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    61                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    62                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    63                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    64                           ; 
    65                           ; 
    66                           ; Code-generator required, PIC16F887 Definitions
    67                           ; 
    68                           ; SFR Addresses
    69  0000                     	;# 
    70  0001                     	;# 
    71  0002                     	;# 
    72  0003                     	;# 
    73  0004                     	;# 
    74  0005                     	;# 
    75  0006                     	;# 
    76  0007                     	;# 
    77  0008                     	;# 
    78  0009                     	;# 
    79  000A                     	;# 
    80  000B                     	;# 
    81  000C                     	;# 
    82  000D                     	;# 
    83  000E                     	;# 
    84  000E                     	;# 
    85  000F                     	;# 
    86  0010                     	;# 
    87  0011                     	;# 
    88  0012                     	;# 
    89  0013                     	;# 
    90  0014                     	;# 
    91  0015                     	;# 
    92  0015                     	;# 
    93  0016                     	;# 
    94  0017                     	;# 
    95  0018                     	;# 
    96  0019                     	;# 
    97  001A                     	;# 
    98  001B                     	;# 
    99  001B                     	;# 
   100  001C                     	;# 
   101  001D                     	;# 
   102  001E                     	;# 
   103  001F                     	;# 
   104  0081                     	;# 
   105  0085                     	;# 
   106  0086                     	;# 
   107  0087                     	;# 
   108  0088                     	;# 
   109  0089                     	;# 
   110  008C                     	;# 
   111  008D                     	;# 
   112  008E                     	;# 
   113  008F                     	;# 
   114  0090                     	;# 
   115  0091                     	;# 
   116  0092                     	;# 
   117  0093                     	;# 
   118  0093                     	;# 
   119  0093                     	;# 
   120  0094                     	;# 
   121  0095                     	;# 
   122  0096                     	;# 
   123  0097                     	;# 
   124  0098                     	;# 
   125  0099                     	;# 
   126  009A                     	;# 
   127  009B                     	;# 
   128  009C                     	;# 
   129  009D                     	;# 
   130  009E                     	;# 
   131  009F                     	;# 
   132  0105                     	;# 
   133  0107                     	;# 
   134  0108                     	;# 
   135  0109                     	;# 
   136  010C                     	;# 
   137  010C                     	;# 
   138  010D                     	;# 
   139  010E                     	;# 
   140  010F                     	;# 
   141  0185                     	;# 
   142  0187                     	;# 
   143  0188                     	;# 
   144  0189                     	;# 
   145  018C                     	;# 
   146  018D                     	;# 
   147  0000                     	;# 
   148  0001                     	;# 
   149  0002                     	;# 
   150  0003                     	;# 
   151  0004                     	;# 
   152  0005                     	;# 
   153  0006                     	;# 
   154  0007                     	;# 
   155  0008                     	;# 
   156  0009                     	;# 
   157  000A                     	;# 
   158  000B                     	;# 
   159  000C                     	;# 
   160  000D                     	;# 
   161  000E                     	;# 
   162  000E                     	;# 
   163  000F                     	;# 
   164  0010                     	;# 
   165  0011                     	;# 
   166  0012                     	;# 
   167  0013                     	;# 
   168  0014                     	;# 
   169  0015                     	;# 
   170  0015                     	;# 
   171  0016                     	;# 
   172  0017                     	;# 
   173  0018                     	;# 
   174  0019                     	;# 
   175  001A                     	;# 
   176  001B                     	;# 
   177  001B                     	;# 
   178  001C                     	;# 
   179  001D                     	;# 
   180  001E                     	;# 
   181  001F                     	;# 
   182  0081                     	;# 
   183  0085                     	;# 
   184  0086                     	;# 
   185  0087                     	;# 
   186  0088                     	;# 
   187  0089                     	;# 
   188  008C                     	;# 
   189  008D                     	;# 
   190  008E                     	;# 
   191  008F                     	;# 
   192  0090                     	;# 
   193  0091                     	;# 
   194  0092                     	;# 
   195  0093                     	;# 
   196  0093                     	;# 
   197  0093                     	;# 
   198  0094                     	;# 
   199  0095                     	;# 
   200  0096                     	;# 
   201  0097                     	;# 
   202  0098                     	;# 
   203  0099                     	;# 
   204  009A                     	;# 
   205  009B                     	;# 
   206  009C                     	;# 
   207  009D                     	;# 
   208  009E                     	;# 
   209  009F                     	;# 
   210  0105                     	;# 
   211  0107                     	;# 
   212  0108                     	;# 
   213  0109                     	;# 
   214  010C                     	;# 
   215  010C                     	;# 
   216  010D                     	;# 
   217  010E                     	;# 
   218  010F                     	;# 
   219  0185                     	;# 
   220  0187                     	;# 
   221  0188                     	;# 
   222  0189                     	;# 
   223  018C                     	;# 
   224  018D                     	;# 
   225  0000                     	;# 
   226  0001                     	;# 
   227  0002                     	;# 
   228  0003                     	;# 
   229  0004                     	;# 
   230  0005                     	;# 
   231  0006                     	;# 
   232  0007                     	;# 
   233  0008                     	;# 
   234  0009                     	;# 
   235  000A                     	;# 
   236  000B                     	;# 
   237  000C                     	;# 
   238  000D                     	;# 
   239  000E                     	;# 
   240  000E                     	;# 
   241  000F                     	;# 
   242  0010                     	;# 
   243  0011                     	;# 
   244  0012                     	;# 
   245  0013                     	;# 
   246  0014                     	;# 
   247  0015                     	;# 
   248  0015                     	;# 
   249  0016                     	;# 
   250  0017                     	;# 
   251  0018                     	;# 
   252  0019                     	;# 
   253  001A                     	;# 
   254  001B                     	;# 
   255  001B                     	;# 
   256  001C                     	;# 
   257  001D                     	;# 
   258  001E                     	;# 
   259  001F                     	;# 
   260  0081                     	;# 
   261  0085                     	;# 
   262  0086                     	;# 
   263  0087                     	;# 
   264  0088                     	;# 
   265  0089                     	;# 
   266  008C                     	;# 
   267  008D                     	;# 
   268  008E                     	;# 
   269  008F                     	;# 
   270  0090                     	;# 
   271  0091                     	;# 
   272  0092                     	;# 
   273  0093                     	;# 
   274  0093                     	;# 
   275  0093                     	;# 
   276  0094                     	;# 
   277  0095                     	;# 
   278  0096                     	;# 
   279  0097                     	;# 
   280  0098                     	;# 
   281  0099                     	;# 
   282  009A                     	;# 
   283  009B                     	;# 
   284  009C                     	;# 
   285  009D                     	;# 
   286  009E                     	;# 
   287  009F                     	;# 
   288  0105                     	;# 
   289  0107                     	;# 
   290  0108                     	;# 
   291  0109                     	;# 
   292  010C                     	;# 
   293  010C                     	;# 
   294  010D                     	;# 
   295  010E                     	;# 
   296  010F                     	;# 
   297  0185                     	;# 
   298  0187                     	;# 
   299  0188                     	;# 
   300  0189                     	;# 
   301  018C                     	;# 
   302  018D                     	;# 
   303  0000                     	;# 
   304  0001                     	;# 
   305  0002                     	;# 
   306  0003                     	;# 
   307  0004                     	;# 
   308  0005                     	;# 
   309  0006                     	;# 
   310  0007                     	;# 
   311  0008                     	;# 
   312  0009                     	;# 
   313  000A                     	;# 
   314  000B                     	;# 
   315  000C                     	;# 
   316  000D                     	;# 
   317  000E                     	;# 
   318  000E                     	;# 
   319  000F                     	;# 
   320  0010                     	;# 
   321  0011                     	;# 
   322  0012                     	;# 
   323  0013                     	;# 
   324  0014                     	;# 
   325  0015                     	;# 
   326  0015                     	;# 
   327  0016                     	;# 
   328  0017                     	;# 
   329  0018                     	;# 
   330  0019                     	;# 
   331  001A                     	;# 
   332  001B                     	;# 
   333  001B                     	;# 
   334  001C                     	;# 
   335  001D                     	;# 
   336  001E                     	;# 
   337  001F                     	;# 
   338  0081                     	;# 
   339  0085                     	;# 
   340  0086                     	;# 
   341  0087                     	;# 
   342  0088                     	;# 
   343  0089                     	;# 
   344  008C                     	;# 
   345  008D                     	;# 
   346  008E                     	;# 
   347  008F                     	;# 
   348  0090                     	;# 
   349  0091                     	;# 
   350  0092                     	;# 
   351  0093                     	;# 
   352  0093                     	;# 
   353  0093                     	;# 
   354  0094                     	;# 
   355  0095                     	;# 
   356  0096                     	;# 
   357  0097                     	;# 
   358  0098                     	;# 
   359  0099                     	;# 
   360  009A                     	;# 
   361  009B                     	;# 
   362  009C                     	;# 
   363  009D                     	;# 
   364  009E                     	;# 
   365  009F                     	;# 
   366  0105                     	;# 
   367  0107                     	;# 
   368  0108                     	;# 
   369  0109                     	;# 
   370  010C                     	;# 
   371  010C                     	;# 
   372  010D                     	;# 
   373  010E                     	;# 
   374  010F                     	;# 
   375  0185                     	;# 
   376  0187                     	;# 
   377  0188                     	;# 
   378  0189                     	;# 
   379  018C                     	;# 
   380  018D                     	;# 
   381  0000                     	;# 
   382  0001                     	;# 
   383  0002                     	;# 
   384  0003                     	;# 
   385  0004                     	;# 
   386  0005                     	;# 
   387  0006                     	;# 
   388  0007                     	;# 
   389  0008                     	;# 
   390  0009                     	;# 
   391  000A                     	;# 
   392  000B                     	;# 
   393  000C                     	;# 
   394  000D                     	;# 
   395  000E                     	;# 
   396  000E                     	;# 
   397  000F                     	;# 
   398  0010                     	;# 
   399  0011                     	;# 
   400  0012                     	;# 
   401  0013                     	;# 
   402  0014                     	;# 
   403  0015                     	;# 
   404  0015                     	;# 
   405  0016                     	;# 
   406  0017                     	;# 
   407  0018                     	;# 
   408  0019                     	;# 
   409  001A                     	;# 
   410  001B                     	;# 
   411  001B                     	;# 
   412  001C                     	;# 
   413  001D                     	;# 
   414  001E                     	;# 
   415  001F                     	;# 
   416  0081                     	;# 
   417  0085                     	;# 
   418  0086                     	;# 
   419  0087                     	;# 
   420  0088                     	;# 
   421  0089                     	;# 
   422  008C                     	;# 
   423  008D                     	;# 
   424  008E                     	;# 
   425  008F                     	;# 
   426  0090                     	;# 
   427  0091                     	;# 
   428  0092                     	;# 
   429  0093                     	;# 
   430  0093                     	;# 
   431  0093                     	;# 
   432  0094                     	;# 
   433  0095                     	;# 
   434  0096                     	;# 
   435  0097                     	;# 
   436  0098                     	;# 
   437  0099                     	;# 
   438  009A                     	;# 
   439  009B                     	;# 
   440  009C                     	;# 
   441  009D                     	;# 
   442  009E                     	;# 
   443  009F                     	;# 
   444  0105                     	;# 
   445  0107                     	;# 
   446  0108                     	;# 
   447  0109                     	;# 
   448  010C                     	;# 
   449  010C                     	;# 
   450  010D                     	;# 
   451  010E                     	;# 
   452  010F                     	;# 
   453  0185                     	;# 
   454  0187                     	;# 
   455  0188                     	;# 
   456  0189                     	;# 
   457  018C                     	;# 
   458  018D                     	;# 
   459                           
   460                           	psect	idataBANK0
   461  07C9                     __pidataBANK0:	
   462                           
   463                           ;initializer for _valorSerial
   464  07C9  3445               	retlw	69
   465                           
   466                           ;initializer for _banderaADC
   467  07CA  3401               	retlw	1
   468  0019                     _TXREG	set	25
   469  001A                     _RCREG	set	26
   470  0018                     _RCSTAbits	set	24
   471  001E                     _ADRESH	set	30
   472  000B                     _INTCONbits	set	11
   473  0007                     _PORTCbits	set	7
   474  001F                     _ADCON0bits	set	31
   475  0007                     _PORTC	set	7
   476  0008                     _PORTD	set	8
   477  000C                     _PIR1bits	set	12
   478  0099                     _SPBRG	set	153
   479  0098                     _TXSTAbits	set	152
   480  009E                     _ADRESL	set	158
   481  0089                     _TRISEbits	set	137
   482  0085                     _TRISAbits	set	133
   483  009F                     _ADCON1bits	set	159
   484  0087                     _TRISC	set	135
   485  0088                     _TRISD	set	136
   486  008C                     _PIE1bits	set	140
   487  0188                     _ANSELbits	set	392
   488                           
   489                           	psect	strings
   490  076E                     __pstrings:	
   491  076E                     stringtab:	
   492  076E                     __stringtab:	
   493  076E                     stringcode:	
   494                           ;	String table - string pointers are 1 byte each
   495                           
   496  076E                     stringdir:	
   497  076E  3007               	movlw	high stringdir
   498  076F  008A               	movwf	10
   499  0770  0804               	movf	4,w
   500  0771  0A84               	incf	4,f
   501  0772  0782               	addwf	2,f
   502  0773                     __stringbase:	
   503  0773  3400               	retlw	0
   504  0774                     __end_of__stringtab:	
   505  0774                     STR_1:	
   506  0774  3453               	retlw	83	;'S'
   507  0775  3431               	retlw	49	;'1'
   508  0776  3420               	retlw	32	;' '
   509  0777  3420               	retlw	32	;' '
   510  0778  3420               	retlw	32	;' '
   511  0779  3420               	retlw	32	;' '
   512  077A  3453               	retlw	83	;'S'
   513  077B  3432               	retlw	50	;'2'
   514  077C  3420               	retlw	32	;' '
   515  077D  3420               	retlw	32	;' '
   516  077E  3420               	retlw	32	;' '
   517  077F  3420               	retlw	32	;' '
   518  0780  3453               	retlw	83	;'S'
   519  0781  3433               	retlw	51	;'3'
   520  0782  3400               	retlw	0
   521                           
   522                           ; #config settings
   523  0000                     
   524                           	psect	cinit
   525  000F                     start_initialization:	
   526  000F                     __initialization:	
   527                           
   528                           ; Initialize objects allocated to BANK0
   529  000F  120A  118A  27C9  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   530  0014  00D7               	movwf	__pdataBANK0& (0+127)
   531  0015  120A  118A  27CA  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   532  001A  00D8               	movwf	(__pdataBANK0+1)& (0+127)
   533                           
   534                           ; Clear objects allocated to BANK0
   535  001B  1383               	bcf	3,7	;select IRP bank0
   536  001C  3020               	movlw	low __pbssBANK0
   537  001D  0084               	movwf	4
   538  001E  303D               	movlw	low (__pbssBANK0+29)
   539  001F  120A  118A  27C1   	fcall	clear_ram0
   540                           
   541                           ; Clear objects allocated to COMMON
   542  0022  01FA               	clrf	__pbssCOMMON& (0+127)
   543  0023  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
   544  0024                     end_of_initialization:	
   545                           ;End of C runtime variable initialization code
   546                           
   547  0024                     __end_of__initialization:	
   548  0024  0183               	clrf	3
   549  0025  120A  118A  2828   	ljmp	_main	;jump to C main() function
   550                           
   551                           	psect	bssCOMMON
   552  007A                     __pbssCOMMON:	
   553  007A                     _num2:	
   554  007A                     	ds	1
   555  007B                     _num1:	
   556  007B                     	ds	1
   557                           
   558                           	psect	bssBANK0
   559  0020                     __pbssBANK0:	
   560  0020                     _linea2:	
   561  0020                     	ds	12
   562  002C                     uint_to_array@F1341:	
   563  002C                     	ds	6
   564  0032                     mapear@F1350:	
   565  0032                     	ds	6
   566  0038                     _contador:	
   567  0038                     	ds	1
   568  0039                     _banderaSerial:	
   569  0039                     	ds	1
   570  003A                     _num3:	
   571  003A                     	ds	1
   572  003B                     _valorADC_CH0:	
   573  003B                     	ds	1
   574  003C                     _valorADC_CH5:	
   575  003C                     	ds	1
   576                           
   577                           	psect	dataBANK0
   578  0057                     __pdataBANK0:	
   579  0057                     _valorSerial:	
   580  0057                     	ds	1
   581  0058                     _banderaADC:	
   582  0058                     	ds	1
   583                           
   584                           	psect	clrtext
   585  07C1                     clear_ram0:	
   586                           ;	Called with FSR containing the base address, and
   587                           ;	W with the last address+1
   588                           
   589  07C1  0064               	clrwdt	;clear the watchdog before getting into this loop
   590  07C2                     clrloop0:	
   591  07C2  0180               	clrf	0	;clear RAM location pointed to by FSR
   592  07C3  0A84               	incf	4,f	;increment pointer
   593  07C4  0604               	xorwf	4,w	;XOR with final address
   594  07C5  1903               	btfsc	3,2	;have we reached the end yet?
   595  07C6  3400               	retlw	0	;all done for this memory range, return
   596  07C7  0604               	xorwf	4,w	;XOR again to restore value
   597  07C8  2FC2               	goto	clrloop0	;do the next byte
   598                           
   599                           	psect	cstackCOMMON
   600  0070                     __pcstackCOMMON:	
   601  0070                     ?_LCD_init:	
   602  0070                     ?_LCD_Write_String:	
   603                           ; 1 bytes @ 0x0
   604                           
   605  0070                     ?_uartRC_Read:	
   606                           ; 1 bytes @ 0x0
   607                           
   608  0070                     ?_AnalogRead_8:	
   609                           ; 1 bytes @ 0x0
   610                           
   611  0070                     ?_ADC_CHselect:	
   612                           ; 1 bytes @ 0x0
   613                           
   614  0070                     ?_LCD_Write_Character:	
   615                           ; 1 bytes @ 0x0
   616                           
   617  0070                     ?_uint_to_char:	
   618                           ; 1 bytes @ 0x0
   619                           
   620  0070                     ?_uint_to_array:	
   621                           ; 1 bytes @ 0x0
   622                           
   623  0070                     ?_uartTX_Write:	
   624                           ; 1 bytes @ 0x0
   625                           
   626  0070                     ?_ISR_ADC:	
   627                           ; 1 bytes @ 0x0
   628                           
   629  0070                     ??_ISR_ADC:	
   630                           ; 1 bytes @ 0x0
   631                           
   632  0070                     ?_main:	
   633                           ; 1 bytes @ 0x0
   634                           
   635  0070                     ?_LCD_Cmd:	
   636                           ; 1 bytes @ 0x0
   637                           
   638                           
   639                           ; 1 bytes @ 0x0
   640  0070                     	ds	2
   641  0072                     ?_ADConfig:	
   642  0072                     ??_uartRC_Read:	
   643                           ; 1 bytes @ 0x2
   644                           
   645  0072                     ??_AnalogRead_8:	
   646                           ; 1 bytes @ 0x2
   647                           
   648  0072                     ??_ADC_CHselect:	
   649                           ; 1 bytes @ 0x2
   650                           
   651  0072                     ??_LCD_Write_Character:	
   652                           ; 1 bytes @ 0x2
   653                           
   654  0072                     ??_uint_to_char:	
   655                           ; 1 bytes @ 0x2
   656                           
   657  0072                     ??_uartTX_Write:	
   658                           ; 1 bytes @ 0x2
   659                           
   660  0072                     ??_LCD_Cmd:	
   661                           ; 1 bytes @ 0x2
   662                           
   663  0072                     ?___wmul:	
   664                           ; 1 bytes @ 0x2
   665                           
   666  0072                     ?___aldiv:	
   667                           ; 2 bytes @ 0x2
   668                           
   669  0072                     ADConfig@canal:	
   670                           ; 4 bytes @ 0x2
   671                           
   672  0072                     ___wmul@multiplier:	
   673                           ; 1 bytes @ 0x2
   674                           
   675  0072                     ___aldiv@divisor:	
   676                           ; 2 bytes @ 0x2
   677                           
   678                           
   679                           ; 4 bytes @ 0x2
   680  0072                     	ds	1
   681  0073                     LCD_Write_Character@caracter:	
   682  0073                     ADConfig@justificado:	
   683                           ; 1 bytes @ 0x3
   684                           
   685  0073                     uartTX_Write@dato:	
   686                           ; 1 bytes @ 0x3
   687                           
   688                           
   689                           ; 1 bytes @ 0x3
   690  0073                     	ds	1
   691  0074                     ??_ADConfig:	
   692  0074                     ??_LCD_Write_String:	
   693                           ; 1 bytes @ 0x4
   694                           
   695  0074                     LCD_Cmd@comando:	
   696                           ; 1 bytes @ 0x4
   697                           
   698  0074                     uint_to_char@numero:	
   699                           ; 1 bytes @ 0x4
   700                           
   701  0074                     AnalogRead_8@just:	
   702                           ; 1 bytes @ 0x4
   703                           
   704  0074                     ADC_CHselect@canal:	
   705                           ; 1 bytes @ 0x4
   706                           
   707  0074                     LCD_Write_String@n:	
   708                           ; 1 bytes @ 0x4
   709                           
   710  0074                     ___wmul@multiplicand:	
   711                           ; 2 bytes @ 0x4
   712                           
   713                           
   714                           ; 2 bytes @ 0x4
   715  0074                     	ds	1
   716  0075                     ??_LCD_init:	
   717  0075                     ?_LCD_Set_Cursor:	
   718                           ; 1 bytes @ 0x5
   719                           
   720  0075                     LCD_Set_Cursor@columna:	
   721                           ; 1 bytes @ 0x5
   722                           
   723  0075                     uint_to_char@numChr:	
   724                           ; 1 bytes @ 0x5
   725                           
   726  0075                     AnalogRead_8@conversion:	
   727                           ; 1 bytes @ 0x5
   728                           
   729                           
   730                           ; 1 bytes @ 0x5
   731  0075                     	ds	1
   732  0076                     ??_LCD_Set_Cursor:	
   733  0076                     ??___wmul:	
   734                           ; 1 bytes @ 0x6
   735                           
   736  0076                     LCD_Write_String@a:	
   737                           ; 1 bytes @ 0x6
   738                           
   739  0076                     ADConfig@oscFreq:	
   740                           ; 1 bytes @ 0x6
   741                           
   742  0076                     ___wmul@product:	
   743                           ; 1 bytes @ 0x6
   744                           
   745  0076                     ___aldiv@dividend:	
   746                           ; 2 bytes @ 0x6
   747                           
   748                           
   749                           ; 4 bytes @ 0x6
   750  0076                     	ds	2
   751  0078                     ?_mapear:	
   752  0078                     ??___awdiv:	
   753                           ; 1 bytes @ 0x8
   754                           
   755  0078                     mapear@limReal:	
   756                           ; 1 bytes @ 0x8
   757                           
   758  0078                     LCD_Set_Cursor@linea:	
   759                           ; 1 bytes @ 0x8
   760                           
   761                           
   762                           ; 1 bytes @ 0x8
   763  0078                     	ds	1
   764  0079                     mapear@limSup:	
   765  0079                     LCD_Set_Cursor@corrimiento:	
   766                           ; 1 bytes @ 0x9
   767                           
   768                           
   769                           ; 1 bytes @ 0x9
   770  0079                     	ds	1
   771                           
   772                           	psect	cstackBANK0
   773  003D                     __pcstackBANK0:	
   774  003D                     ??_mapear:	
   775  003D                     ??___aldiv:	
   776                           ; 1 bytes @ 0x0
   777                           
   778  003D                     ?___awdiv:	
   779                           ; 1 bytes @ 0x0
   780                           
   781  003D                     ___awdiv@divisor:	
   782                           ; 2 bytes @ 0x0
   783                           
   784                           
   785                           ; 2 bytes @ 0x0
   786  003D                     	ds	1
   787  003E                     ___aldiv@counter:	
   788                           
   789                           ; 1 bytes @ 0x1
   790  003E                     	ds	1
   791  003F                     ___aldiv@sign:	
   792  003F                     ___awdiv@dividend:	
   793                           ; 1 bytes @ 0x2
   794                           
   795                           
   796                           ; 2 bytes @ 0x2
   797  003F                     	ds	1
   798  0040                     ___aldiv@quotient:	
   799                           
   800                           ; 4 bytes @ 0x3
   801  0040                     	ds	1
   802  0041                     mapear@valor:	
   803  0041                     ___awdiv@counter:	
   804                           ; 1 bytes @ 0x4
   805                           
   806                           
   807                           ; 1 bytes @ 0x4
   808  0041                     	ds	1
   809  0042                     ___awdiv@sign:	
   810  0042                     mapear@resultado:	
   811                           ; 1 bytes @ 0x5
   812                           
   813                           
   814                           ; 6 bytes @ 0x5
   815  0042                     	ds	1
   816  0043                     ___awdiv@quotient:	
   817                           
   818                           ; 2 bytes @ 0x6
   819  0043                     	ds	1
   820  0044                     ?_uartRC_init:	
   821  0044                     uartRC_init@baudrate:	
   822                           ; 1 bytes @ 0x7
   823                           
   824                           
   825                           ; 2 bytes @ 0x7
   826  0044                     	ds	1
   827  0045                     ??_uint_to_array:	
   828                           
   829                           ; 1 bytes @ 0x8
   830  0045                     	ds	1
   831  0046                     ??_uartRC_init:	
   832                           
   833                           ; 1 bytes @ 0x9
   834  0046                     	ds	2
   835  0048                     mapear@dividendo:	
   836                           
   837                           ; 2 bytes @ 0xB
   838  0048                     	ds	3
   839  004B                     uint_to_array@decenas:	
   840                           
   841                           ; 1 bytes @ 0xE
   842  004B                     	ds	1
   843  004C                     uint_to_array@resultado:	
   844                           
   845                           ; 6 bytes @ 0xF
   846  004C                     	ds	6
   847  0052                     uint_to_array@centenas:	
   848  0052                     uartRC_init@n:	
   849                           ; 1 bytes @ 0x15
   850                           
   851                           
   852                           ; 2 bytes @ 0x15
   853  0052                     	ds	1
   854  0053                     uint_to_array@numero:	
   855                           
   856                           ; 1 bytes @ 0x16
   857  0053                     	ds	1
   858  0054                     ??_main:	
   859                           
   860                           ; 1 bytes @ 0x17
   861  0054                     	ds	3
   862                           
   863                           	psect	maintext
   864  0028                     __pmaintext:	
   865 ;;
   866 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   867 ;;
   868 ;; *************** function _main *****************
   869 ;; Defined at:
   870 ;;		line 58 in file "main.c"
   871 ;; Parameters:    Size  Location     Type
   872 ;;		None
   873 ;; Auto vars:     Size  Location     Type
   874 ;;		None
   875 ;; Return value:  Size  Location     Type
   876 ;;                  1    wreg      void 
   877 ;; Registers used:
   878 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   879 ;; Tracked objects:
   880 ;;		On entry : B00/0
   881 ;;		On exit  : 0/0
   882 ;;		Unchanged: 0/0
   883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   884 ;;      Params:         0       0       0       0       0
   885 ;;      Locals:         0       0       0       0       0
   886 ;;      Temps:          0       3       0       0       0
   887 ;;      Totals:         0       3       0       0       0
   888 ;;Total ram usage:        3 bytes
   889 ;; Hardware stack levels required when called:    3
   890 ;; This function calls:
   891 ;;		_ADC_CHselect
   892 ;;		_ADConfig
   893 ;;		_AnalogRead_8
   894 ;;		_LCD_Set_Cursor
   895 ;;		_LCD_Write_Character
   896 ;;		_LCD_Write_String
   897 ;;		_LCD_init
   898 ;;		_mapear
   899 ;;		_uartRC_Read
   900 ;;		_uartRC_init
   901 ;;		_uartTX_Write
   902 ;;		_uint_to_array
   903 ;;		_uint_to_char
   904 ;; This function is called by:
   905 ;;		Startup code after reset
   906 ;; This function uses a non-reentrant model
   907 ;;
   908                           
   909                           
   910                           ;psect for function _main
   911  0028                     _main:	
   912                           
   913                           ;main.c: 59:     TRISD = 0;
   914                           
   915                           ;incstack = 0
   916                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   917  0028  1683               	bsf	3,5	;RP0=1, select bank1
   918  0029  1303               	bcf	3,6	;RP1=0, select bank1
   919  002A  0188               	clrf	8	;volatile
   920                           
   921                           ;main.c: 60:     TRISC = 0;
   922  002B  0187               	clrf	7	;volatile
   923                           
   924                           ;main.c: 61:     PORTD = 0;
   925  002C  1283               	bcf	3,5	;RP0=0, select bank0
   926  002D  1303               	bcf	3,6	;RP1=0, select bank0
   927  002E  0188               	clrf	8	;volatile
   928                           
   929                           ;main.c: 62:     PORTC = 0;
   930  002F  0187               	clrf	7	;volatile
   931                           
   932                           ;main.c: 63:     LCD_init();
   933  0030  120A  118A  25AC  120A  118A  	fcall	_LCD_init
   934                           
   935                           ;main.c: 64:     ADConfig(4, 5, 'H');
   936  0035  3005               	movlw	5
   937  0036  1283               	bcf	3,5	;RP0=0, select bank0
   938  0037  1303               	bcf	3,6	;RP1=0, select bank0
   939  0038  00D4               	movwf	??_main
   940  0039  0854               	movf	??_main,w
   941  003A  00F2               	movwf	ADConfig@canal
   942  003B  3048               	movlw	72
   943  003C  00D5               	movwf	??_main+1
   944  003D  0855               	movf	??_main+1,w
   945  003E  00F3               	movwf	ADConfig@justificado
   946  003F  3004               	movlw	4
   947  0040  120A  118A  21DE  120A  118A  	fcall	_ADConfig
   948                           
   949                           ;main.c: 65:     LCD_Set_Cursor(1,1);
   950  0045  01F5               	clrf	LCD_Set_Cursor@columna
   951  0046  0AF5               	incf	LCD_Set_Cursor@columna,f
   952  0047  3001               	movlw	1
   953  0048  120A  118A  26E2  120A  118A  	fcall	_LCD_Set_Cursor
   954                           
   955                           ;main.c: 66:     LCD_Write_String("S1    S2    S3");
   956  004D  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   957  004E  120A  118A  270E  120A  118A  	fcall	_LCD_Write_String
   958                           
   959                           ;main.c: 67:     uartRC_init(300);
   960  0053  302C               	movlw	44
   961  0054  1283               	bcf	3,5	;RP0=0, select bank0
   962  0055  1303               	bcf	3,6	;RP1=0, select bank0
   963  0056  00C4               	movwf	uartRC_init@baudrate
   964  0057  3001               	movlw	1
   965  0058  00C5               	movwf	uartRC_init@baudrate+1
   966  0059  120A  118A  22A8  120A  118A  	fcall	_uartRC_init
   967  005E                     l2429:	
   968                           
   969                           ;main.c: 69:         if(PIR1bits.RCIF == 1){
   970  005E  1283               	bcf	3,5	;RP0=0, select bank0
   971  005F  1303               	bcf	3,6	;RP1=0, select bank0
   972  0060  1E8C               	btfss	12,5	;volatile
   973  0061  2877               	goto	l2435
   974                           
   975                           ;main.c: 70:             valorSerial = uartRC_Read();
   976  0062  120A  118A  27B5  120A  118A  	fcall	_uartRC_Read
   977  0067  1283               	bcf	3,5	;RP0=0, select bank0
   978  0068  1303               	bcf	3,6	;RP1=0, select bank0
   979  0069  00D4               	movwf	??_main
   980  006A  0854               	movf	??_main,w
   981  006B  00D7               	movwf	_valorSerial
   982                           
   983                           ;main.c: 71:             _delay((unsigned long)((5)*(4000000/4000.0)));
   984  006C  3007               	movlw	7
   985  006D  1283               	bcf	3,5	;RP0=0, select bank0
   986  006E  1303               	bcf	3,6	;RP1=0, select bank0
   987  006F  00D5               	movwf	??_main+1
   988  0070  307C               	movlw	124
   989  0071  00D4               	movwf	??_main
   990  0072                     u1187:	
   991  0072  0BD4               	decfsz	??_main,f
   992  0073  2872               	goto	u1187
   993  0074  0BD5               	decfsz	??_main+1,f
   994  0075  2872               	goto	u1187
   995  0076  0000               	nop
   996  0077                     l2435:	
   997                           
   998                           ;main.c: 73:         if (banderaADC == 1){
   999  0077  1283               	bcf	3,5	;RP0=0, select bank0
  1000  0078  1303               	bcf	3,6	;RP1=0, select bank0
  1001  0079  0358               	decf	_banderaADC,w
  1002  007A  1903               	btfsc	3,2
  1003  007B  294F               	goto	l2473
  1004  007C  2976               	goto	l2491
  1005  007D                     l2439:	
  1006                           
  1007                           ;main.c: 76:                     valorADC_CH5 = AnalogRead_8('H');
  1008  007D  3048               	movlw	72
  1009  007E  120A  118A  2751  120A  118A  	fcall	_AnalogRead_8
  1010  0083  1283               	bcf	3,5	;RP0=0, select bank0
  1011  0084  1303               	bcf	3,6	;RP1=0, select bank0
  1012  0085  00D4               	movwf	??_main
  1013  0086  0854               	movf	??_main,w
  1014  0087  00BC               	movwf	_valorADC_CH5
  1015                           
  1016                           ;main.c: 77:                     ADC_CHselect(0);
  1017  0088  3000               	movlw	0
  1018  0089  120A  118A  249C  120A  118A  	fcall	_ADC_CHselect
  1019                           
  1020                           ;main.c: 78:                     num1 = mapear(valorADC_CH5, 255, 5);
  1021  008E  30FF               	movlw	255
  1022  008F  1283               	bcf	3,5	;RP0=0, select bank0
  1023  0090  1303               	bcf	3,6	;RP1=0, select bank0
  1024  0091  00D4               	movwf	??_main
  1025  0092  0854               	movf	??_main,w
  1026  0093  00F8               	movwf	mapear@limReal
  1027  0094  3005               	movlw	5
  1028  0095  00D5               	movwf	??_main+1
  1029  0096  0855               	movf	??_main+1,w
  1030  0097  00F9               	movwf	mapear@limSup
  1031  0098  083C               	movf	_valorADC_CH5,w
  1032  0099  120A  118A  236F  120A  118A  	fcall	_mapear
  1033  009E  1283               	bcf	3,5	;RP0=0, select bank0
  1034  009F  1303               	bcf	3,6	;RP1=0, select bank0
  1035  00A0  00D6               	movwf	??_main+2
  1036  00A1  0856               	movf	??_main+2,w
  1037  00A2  00FB               	movwf	_num1
  1038                           
  1039                           ;main.c: 79:                     LCD_Set_Cursor(2, 0);
  1040  00A3  01F5               	clrf	LCD_Set_Cursor@columna
  1041  00A4  3002               	movlw	2
  1042  00A5  120A  118A  26E2  120A  118A  	fcall	_LCD_Set_Cursor
  1043                           
  1044                           ;main.c: 80:                     LCD_Write_Character(uint_to_char(num1[0]));
  1045  00AA  087B               	movf	_num1,w
  1046  00AB  0084               	movwf	4
  1047  00AC  1383               	bcf	3,7	;select IRP bank0
  1048  00AD  0800               	movf	0,w
  1049  00AE  120A  118A  266E  120A  118A  	fcall	_uint_to_char
  1050  00B3  120A  118A  27A6  120A  118A  	fcall	_LCD_Write_Character
  1051                           
  1052                           ;main.c: 81:                     LCD_Write_Character('.');
  1053  00B8  302E               	movlw	46
  1054  00B9  120A  118A  27A6  120A  118A  	fcall	_LCD_Write_Character
  1055                           
  1056                           ;main.c: 82:                     LCD_Write_Character(uint_to_char(num1[1]));
  1057  00BE  087B               	movf	_num1,w
  1058  00BF  3E02               	addlw	2
  1059  00C0  0084               	movwf	4
  1060  00C1  1383               	bcf	3,7	;select IRP bank0
  1061  00C2  0800               	movf	0,w
  1062  00C3  120A  118A  266E  120A  118A  	fcall	_uint_to_char
  1063  00C8  120A  118A  27A6  120A  118A  	fcall	_LCD_Write_Character
  1064                           
  1065                           ;main.c: 83:                     LCD_Write_Character(uint_to_char(num1[2]));
  1066  00CD  087B               	movf	_num1,w
  1067  00CE  3E04               	addlw	4
  1068  00CF  0084               	movwf	4
  1069  00D0  1383               	bcf	3,7	;select IRP bank0
  1070  00D1  0800               	movf	0,w
  1071  00D2  120A  118A  266E  120A  118A  	fcall	_uint_to_char
  1072  00D7  120A  118A  27A6  120A  118A  	fcall	_LCD_Write_Character
  1073                           
  1074                           ;main.c: 84:                     LCD_Write_Character('V');
  1075  00DC  3056               	movlw	86
  1076  00DD  120A  118A  27A6  120A  118A  	fcall	_LCD_Write_Character
  1077                           
  1078                           ;main.c: 86:                     break;
  1079  00E2  2962               	goto	l2475
  1080  00E3                     l2455:	
  1081                           
  1082                           ;main.c: 88:                     valorADC_CH0 = AnalogRead_8('H');
  1083  00E3  3048               	movlw	72
  1084  00E4  120A  118A  2751  120A  118A  	fcall	_AnalogRead_8
  1085  00E9  1283               	bcf	3,5	;RP0=0, select bank0
  1086  00EA  1303               	bcf	3,6	;RP1=0, select bank0
  1087  00EB  00D4               	movwf	??_main
  1088  00EC  0854               	movf	??_main,w
  1089  00ED  00BB               	movwf	_valorADC_CH0
  1090                           
  1091                           ;main.c: 89:                     ADC_CHselect(5);
  1092  00EE  3005               	movlw	5
  1093  00EF  120A  118A  249C  120A  118A  	fcall	_ADC_CHselect
  1094                           
  1095                           ;main.c: 90:                     num2 = mapear(valorADC_CH0, 255, 5);
  1096  00F4  30FF               	movlw	255
  1097  00F5  1283               	bcf	3,5	;RP0=0, select bank0
  1098  00F6  1303               	bcf	3,6	;RP1=0, select bank0
  1099  00F7  00D4               	movwf	??_main
  1100  00F8  0854               	movf	??_main,w
  1101  00F9  00F8               	movwf	mapear@limReal
  1102  00FA  3005               	movlw	5
  1103  00FB  00D5               	movwf	??_main+1
  1104  00FC  0855               	movf	??_main+1,w
  1105  00FD  00F9               	movwf	mapear@limSup
  1106  00FE  083B               	movf	_valorADC_CH0,w
  1107  00FF  120A  118A  236F  120A  118A  	fcall	_mapear
  1108  0104  1283               	bcf	3,5	;RP0=0, select bank0
  1109  0105  1303               	bcf	3,6	;RP1=0, select bank0
  1110  0106  00D6               	movwf	??_main+2
  1111  0107  0856               	movf	??_main+2,w
  1112  0108  00FA               	movwf	_num2
  1113                           
  1114                           ;main.c: 91:                     LCD_Set_Cursor(2, 6);
  1115  0109  3006               	movlw	6
  1116  010A  00D4               	movwf	??_main
  1117  010B  0854               	movf	??_main,w
  1118  010C  00F5               	movwf	LCD_Set_Cursor@columna
  1119  010D  3002               	movlw	2
  1120  010E  120A  118A  26E2  120A  118A  	fcall	_LCD_Set_Cursor
  1121                           
  1122                           ;main.c: 92:                     LCD_Write_Character(uint_to_char(num2[0]));
  1123  0113  087A               	movf	_num2,w
  1124  0114  0084               	movwf	4
  1125  0115  1383               	bcf	3,7	;select IRP bank0
  1126  0116  0800               	movf	0,w
  1127  0117  120A  118A  266E  120A  118A  	fcall	_uint_to_char
  1128  011C  120A  118A  27A6  120A  118A  	fcall	_LCD_Write_Character
  1129                           
  1130                           ;main.c: 93:                     LCD_Write_Character('.');
  1131  0121  302E               	movlw	46
  1132  0122  120A  118A  27A6  120A  118A  	fcall	_LCD_Write_Character
  1133                           
  1134                           ;main.c: 94:                     LCD_Write_Character(uint_to_char(num2[1]));
  1135  0127  087A               	movf	_num2,w
  1136  0128  3E02               	addlw	2
  1137  0129  0084               	movwf	4
  1138  012A  1383               	bcf	3,7	;select IRP bank0
  1139  012B  0800               	movf	0,w
  1140  012C  120A  118A  266E  120A  118A  	fcall	_uint_to_char
  1141  0131  120A  118A  27A6  120A  118A  	fcall	_LCD_Write_Character
  1142                           
  1143                           ;main.c: 95:                     LCD_Write_Character(uint_to_char(num2[2]));
  1144  0136  087A               	movf	_num2,w
  1145  0137  3E04               	addlw	4
  1146  0138  0084               	movwf	4
  1147  0139  1383               	bcf	3,7	;select IRP bank0
  1148  013A  0800               	movf	0,w
  1149  013B  120A  118A  266E  120A  118A  	fcall	_uint_to_char
  1150  0140  120A  118A  27A6  120A  118A  	fcall	_LCD_Write_Character
  1151                           
  1152                           ;main.c: 96:                     LCD_Write_Character('V');
  1153  0145  3056               	movlw	86
  1154  0146  120A  118A  27A6  120A  118A  	fcall	_LCD_Write_Character
  1155                           
  1156                           ;main.c: 98:                     break;
  1157  014B  2962               	goto	l2475
  1158  014C                     l2471:	
  1159                           
  1160                           ;main.c: 100:                     valorADC_CH0 = 0;
  1161  014C  01BB               	clrf	_valorADC_CH0
  1162                           
  1163                           ;main.c: 101:                     valorADC_CH5 = 0;
  1164  014D  01BC               	clrf	_valorADC_CH5
  1165                           
  1166                           ;main.c: 102:             }
  1167  014E  2962               	goto	l2475
  1168  014F                     l2473:	
  1169  014F  0C1F               	rrf	31,w	;volatile
  1170  0150  00D4               	movwf	??_main
  1171  0151  0C54               	rrf	??_main,w
  1172  0152  390F               	andlw	15
  1173  0153  00D5               	movwf	??_main+1
  1174  0154  01D6               	clrf	??_main+2
  1175                           
  1176                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1177                           ; Switch size 1, requested type "simple"
  1178                           ; Number of cases is 1, Range of values is 0 to 0
  1179                           ; switch strategies available:
  1180                           ; Name         Instructions Cycles
  1181                           ; simple_byte            4     3 (average)
  1182                           ; direct_byte           11     8 (fixed)
  1183                           ; jumptable            260     6 (fixed)
  1184                           ;	Chosen strategy is simple_byte
  1185  0155  0856               	movf	??_main+2,w
  1186  0156  3A00               	xorlw	0	; case 0
  1187  0157  1903               	skipnz
  1188  0158  295A               	goto	l2719
  1189  0159  294C               	goto	l2471
  1190  015A                     l2719:	
  1191                           
  1192                           ; Switch size 1, requested type "simple"
  1193                           ; Number of cases is 2, Range of values is 0 to 5
  1194                           ; switch strategies available:
  1195                           ; Name         Instructions Cycles
  1196                           ; simple_byte            7     4 (average)
  1197                           ; direct_byte           26     8 (fixed)
  1198                           ; jumptable            260     6 (fixed)
  1199                           ;	Chosen strategy is simple_byte
  1200  015A  0855               	movf	??_main+1,w
  1201  015B  3A00               	xorlw	0	; case 0
  1202  015C  1903               	skipnz
  1203  015D  28E3               	goto	l2455
  1204  015E  3A05               	xorlw	5	; case 5
  1205  015F  1903               	skipnz
  1206  0160  287D               	goto	l2439
  1207  0161  294C               	goto	l2471
  1208  0162                     l2475:	
  1209                           
  1210                           ;main.c: 103:             banderaADC = 0;
  1211  0162  1283               	bcf	3,5	;RP0=0, select bank0
  1212  0163  1303               	bcf	3,6	;RP1=0, select bank0
  1213  0164  01D8               	clrf	_banderaADC
  1214                           
  1215                           ;main.c: 104:             PIR1bits.ADIF = 0;
  1216  0165  130C               	bcf	12,6	;volatile
  1217                           
  1218                           ;main.c: 105:             PIE1bits.ADIE = 1;
  1219  0166  1683               	bsf	3,5	;RP0=1, select bank1
  1220  0167  1303               	bcf	3,6	;RP1=0, select bank1
  1221  0168  170C               	bsf	12,6	;volatile
  1222                           
  1223                           ;main.c: 106:             ADCON0bits.GO_nDONE = 1;
  1224  0169  1283               	bcf	3,5	;RP0=0, select bank0
  1225  016A  1303               	bcf	3,6	;RP1=0, select bank0
  1226  016B  149F               	bsf	31,1	;volatile
  1227  016C  2976               	goto	l2491
  1228  016D                     l2483:	
  1229                           
  1230                           ;main.c: 110:                     contador ++;
  1231  016D  3001               	movlw	1
  1232  016E  00D4               	movwf	??_main
  1233  016F  0854               	movf	??_main,w
  1234  0170  07B8               	addwf	_contador,f
  1235  0171                     l2485:	
  1236                           
  1237                           ;main.c: 111:                     valorSerial = 0;
  1238  0171  01D7               	clrf	_valorSerial
  1239                           
  1240                           ;main.c: 112:                     break;
  1241  0172  2986               	goto	l2493
  1242  0173                     l2487:	
  1243                           
  1244                           ;main.c: 114:                     contador --;
  1245  0173  3001               	movlw	1
  1246  0174  02B8               	subwf	_contador,f
  1247  0175  2971               	goto	l2485
  1248  0176                     l2491:	
  1249  0176  0857               	movf	_valorSerial,w
  1250  0177  00D4               	movwf	??_main
  1251  0178  01D5               	clrf	??_main+1
  1252                           
  1253                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1254                           ; Switch size 1, requested type "simple"
  1255                           ; Number of cases is 1, Range of values is 0 to 0
  1256                           ; switch strategies available:
  1257                           ; Name         Instructions Cycles
  1258                           ; simple_byte            4     3 (average)
  1259                           ; direct_byte           11     8 (fixed)
  1260                           ; jumptable            260     6 (fixed)
  1261                           ;	Chosen strategy is simple_byte
  1262  0179  0855               	movf	??_main+1,w
  1263  017A  3A00               	xorlw	0	; case 0
  1264  017B  1903               	skipnz
  1265  017C  297E               	goto	l2721
  1266  017D  2986               	goto	l2493
  1267  017E                     l2721:	
  1268                           
  1269                           ; Switch size 1, requested type "simple"
  1270                           ; Number of cases is 2, Range of values is 43 to 45
  1271                           ; switch strategies available:
  1272                           ; Name         Instructions Cycles
  1273                           ; simple_byte            7     4 (average)
  1274                           ; direct_byte           20    11 (fixed)
  1275                           ; jumptable            263     9 (fixed)
  1276                           ;	Chosen strategy is simple_byte
  1277  017E  0854               	movf	??_main,w
  1278  017F  3A2B               	xorlw	43	; case 43
  1279  0180  1903               	skipnz
  1280  0181  296D               	goto	l2483
  1281  0182  3A06               	xorlw	6	; case 45
  1282  0183  1903               	skipnz
  1283  0184  2973               	goto	l2487
  1284  0185  2986               	goto	l2493
  1285  0186                     l2493:	
  1286                           
  1287                           ;main.c: 121:             num3 = uint_to_array(contador);
  1288  0186  0838               	movf	_contador,w
  1289  0187  120A  118A  2527  120A  118A  	fcall	_uint_to_array
  1290  018C  1283               	bcf	3,5	;RP0=0, select bank0
  1291  018D  1303               	bcf	3,6	;RP1=0, select bank0
  1292  018E  00D4               	movwf	??_main
  1293  018F  0854               	movf	??_main,w
  1294  0190  00BA               	movwf	_num3
  1295                           
  1296                           ;main.c: 122:             LCD_Set_Cursor(2,13);
  1297  0191  300D               	movlw	13
  1298  0192  00D4               	movwf	??_main
  1299  0193  0854               	movf	??_main,w
  1300  0194  00F5               	movwf	LCD_Set_Cursor@columna
  1301  0195  3002               	movlw	2
  1302  0196  120A  118A  26E2  120A  118A  	fcall	_LCD_Set_Cursor
  1303                           
  1304                           ;main.c: 123:             LCD_Write_Character(uint_to_char(num3[0]));
  1305  019B  1283               	bcf	3,5	;RP0=0, select bank0
  1306  019C  1303               	bcf	3,6	;RP1=0, select bank0
  1307  019D  083A               	movf	_num3,w
  1308  019E  0084               	movwf	4
  1309  019F  1383               	bcf	3,7	;select IRP bank0
  1310  01A0  0800               	movf	0,w
  1311  01A1  120A  118A  266E  120A  118A  	fcall	_uint_to_char
  1312  01A6  120A  118A  27A6  120A  118A  	fcall	_LCD_Write_Character
  1313                           
  1314                           ;main.c: 124:             LCD_Write_Character(uint_to_char(num3[1]));
  1315  01AB  1283               	bcf	3,5	;RP0=0, select bank0
  1316  01AC  1303               	bcf	3,6	;RP1=0, select bank0
  1317  01AD  083A               	movf	_num3,w
  1318  01AE  3E02               	addlw	2
  1319  01AF  0084               	movwf	4
  1320  01B0  1383               	bcf	3,7	;select IRP bank0
  1321  01B1  0800               	movf	0,w
  1322  01B2  120A  118A  266E  120A  118A  	fcall	_uint_to_char
  1323  01B7  120A  118A  27A6  120A  118A  	fcall	_LCD_Write_Character
  1324                           
  1325                           ;main.c: 125:             LCD_Write_Character(uint_to_char(num3[2]));
  1326  01BC  1283               	bcf	3,5	;RP0=0, select bank0
  1327  01BD  1303               	bcf	3,6	;RP1=0, select bank0
  1328  01BE  083A               	movf	_num3,w
  1329  01BF  3E04               	addlw	4
  1330  01C0  0084               	movwf	4
  1331  01C1  1383               	bcf	3,7	;select IRP bank0
  1332  01C2  0800               	movf	0,w
  1333  01C3  120A  118A  266E  120A  118A  	fcall	_uint_to_char
  1334  01C8  120A  118A  27A6  120A  118A  	fcall	_LCD_Write_Character
  1335                           
  1336                           ;main.c: 132:             uartTX_Write(valorADC_CH5);
  1337  01CD  1283               	bcf	3,5	;RP0=0, select bank0
  1338  01CE  1303               	bcf	3,6	;RP1=0, select bank0
  1339  01CF  083C               	movf	_valorADC_CH5,w
  1340  01D0  120A  118A  2797  120A  118A  	fcall	_uartTX_Write
  1341                           
  1342                           ;main.c: 133:             uartTX_Write(valorADC_CH0);
  1343  01D5  1283               	bcf	3,5	;RP0=0, select bank0
  1344  01D6  1303               	bcf	3,6	;RP1=0, select bank0
  1345  01D7  083B               	movf	_valorADC_CH0,w
  1346  01D8  120A  118A  2797  120A  118A  	fcall	_uartTX_Write
  1347  01DD  285E               	goto	l2429
  1348  01DE                     __end_of_main:	
  1349                           
  1350                           	psect	text1
  1351  066E                     __ptext1:	
  1352 ;; *************** function _uint_to_char *****************
  1353 ;; Defined at:
  1354 ;;		line 116 in file "LCD_8bits.c"
  1355 ;; Parameters:    Size  Location     Type
  1356 ;;  numero          1    wreg     unsigned char 
  1357 ;; Auto vars:     Size  Location     Type
  1358 ;;  numero          1    4[COMMON] unsigned char 
  1359 ;;  numChr          1    5[COMMON] unsigned char 
  1360 ;; Return value:  Size  Location     Type
  1361 ;;                  1    wreg      unsigned char 
  1362 ;; Registers used:
  1363 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1364 ;; Tracked objects:
  1365 ;;		On entry : 0/0
  1366 ;;		On exit  : 0/0
  1367 ;;		Unchanged: 0/0
  1368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1369 ;;      Params:         0       0       0       0       0
  1370 ;;      Locals:         2       0       0       0       0
  1371 ;;      Temps:          2       0       0       0       0
  1372 ;;      Totals:         4       0       0       0       0
  1373 ;;Total ram usage:        4 bytes
  1374 ;; Hardware stack levels used:    1
  1375 ;; Hardware stack levels required when called:    1
  1376 ;; This function calls:
  1377 ;;		Nothing
  1378 ;; This function is called by:
  1379 ;;		_main
  1380 ;; This function uses a non-reentrant model
  1381 ;;
  1382                           
  1383                           
  1384                           ;psect for function _uint_to_char
  1385  066E                     _uint_to_char:	
  1386                           
  1387                           ;incstack = 0
  1388                           ; Regs used in _uint_to_char: [wreg-fsr0h+status,2+status,0]
  1389                           ;uint_to_char@numero stored from wreg
  1390  066E  00F4               	movwf	uint_to_char@numero
  1391                           
  1392                           ;LCD_8bits.c: 118:     switch (numero){
  1393  066F  2E89               	goto	l1919
  1394  0670                     l1897:	
  1395                           
  1396                           ;LCD_8bits.c: 120:             numChr = 48;
  1397  0670  3030               	movlw	48
  1398  0671  2E85               	goto	L10
  1399  0672                     l1899:	
  1400                           ;LCD_8bits.c: 121:             break;
  1401                           
  1402                           
  1403                           ;LCD_8bits.c: 123:             numChr = 49;
  1404  0672  3031               	movlw	49
  1405  0673  2E85               	goto	L10
  1406  0674                     l1901:	
  1407                           ;LCD_8bits.c: 124:             break;
  1408                           
  1409                           
  1410                           ;LCD_8bits.c: 126:             numChr = 50;
  1411  0674  3032               	movlw	50
  1412  0675  2E85               	goto	L10
  1413  0676                     l1903:	
  1414                           ;LCD_8bits.c: 127:             break;
  1415                           
  1416                           
  1417                           ;LCD_8bits.c: 129:             numChr = 51;
  1418  0676  3033               	movlw	51
  1419  0677  2E85               	goto	L10
  1420  0678                     l1905:	
  1421                           ;LCD_8bits.c: 130:             break;
  1422                           
  1423                           
  1424                           ;LCD_8bits.c: 132:             numChr = 52;
  1425  0678  3034               	movlw	52
  1426  0679  2E85               	goto	L10
  1427  067A                     l1907:	
  1428                           ;LCD_8bits.c: 133:             break;
  1429                           
  1430                           
  1431                           ;LCD_8bits.c: 135:             numChr = 53;
  1432  067A  3035               	movlw	53
  1433  067B  2E85               	goto	L10
  1434  067C                     l1909:	
  1435                           ;LCD_8bits.c: 136:             break;
  1436                           
  1437                           
  1438                           ;LCD_8bits.c: 138:             numChr = 54;
  1439  067C  3036               	movlw	54
  1440  067D  2E85               	goto	L10
  1441  067E                     l1911:	
  1442                           ;LCD_8bits.c: 139:             break;
  1443                           
  1444                           
  1445                           ;LCD_8bits.c: 141:             numChr = 55;
  1446  067E  3037               	movlw	55
  1447  067F  2E85               	goto	L10
  1448  0680                     l1913:	
  1449                           ;LCD_8bits.c: 142:             break;
  1450                           
  1451                           
  1452                           ;LCD_8bits.c: 144:             numChr = 56;
  1453  0680  3038               	movlw	56
  1454  0681  2E85               	goto	L10
  1455  0682                     l1915:	
  1456                           ;LCD_8bits.c: 145:             break;
  1457                           
  1458                           
  1459                           ;LCD_8bits.c: 147:             numChr = 57;
  1460  0682  3039               	movlw	57
  1461  0683  2E85               	goto	L10
  1462  0684                     l1917:	
  1463                           ;LCD_8bits.c: 148:             break;
  1464                           
  1465                           
  1466                           ;LCD_8bits.c: 150:             numChr = 214;
  1467  0684  30D6               	movlw	214
  1468  0685                     L10:	
  1469  0685  00F2               	movwf	??_uint_to_char
  1470  0686  0872               	movf	??_uint_to_char,w
  1471  0687  00F5               	movwf	uint_to_char@numChr
  1472                           
  1473                           ;LCD_8bits.c: 151:     }
  1474  0688  2EB1               	goto	l1921
  1475  0689                     l1919:	
  1476  0689  0874               	movf	uint_to_char@numero,w
  1477  068A  00F2               	movwf	??_uint_to_char
  1478  068B  01F3               	clrf	??_uint_to_char+1
  1479                           
  1480                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1481                           ; Switch size 1, requested type "simple"
  1482                           ; Number of cases is 1, Range of values is 0 to 0
  1483                           ; switch strategies available:
  1484                           ; Name         Instructions Cycles
  1485                           ; simple_byte            4     3 (average)
  1486                           ; direct_byte           11     8 (fixed)
  1487                           ; jumptable            260     6 (fixed)
  1488                           ;	Chosen strategy is simple_byte
  1489  068C  0873               	movf	??_uint_to_char+1,w
  1490  068D  3A00               	xorlw	0	; case 0
  1491  068E  1903               	skipnz
  1492  068F  2E91               	goto	l2723
  1493  0690  2E84               	goto	l1917
  1494  0691                     l2723:	
  1495                           
  1496                           ; Switch size 1, requested type "simple"
  1497                           ; Number of cases is 10, Range of values is 0 to 9
  1498                           ; switch strategies available:
  1499                           ; Name         Instructions Cycles
  1500                           ; simple_byte           31    16 (average)
  1501                           ; direct_byte           38     8 (fixed)
  1502                           ; jumptable            260     6 (fixed)
  1503                           ;	Chosen strategy is simple_byte
  1504  0691  0872               	movf	??_uint_to_char,w
  1505  0692  3A00               	xorlw	0	; case 0
  1506  0693  1903               	skipnz
  1507  0694  2E70               	goto	l1897
  1508  0695  3A01               	xorlw	1	; case 1
  1509  0696  1903               	skipnz
  1510  0697  2E72               	goto	l1899
  1511  0698  3A03               	xorlw	3	; case 2
  1512  0699  1903               	skipnz
  1513  069A  2E74               	goto	l1901
  1514  069B  3A01               	xorlw	1	; case 3
  1515  069C  1903               	skipnz
  1516  069D  2E76               	goto	l1903
  1517  069E  3A07               	xorlw	7	; case 4
  1518  069F  1903               	skipnz
  1519  06A0  2E78               	goto	l1905
  1520  06A1  3A01               	xorlw	1	; case 5
  1521  06A2  1903               	skipnz
  1522  06A3  2E7A               	goto	l1907
  1523  06A4  3A03               	xorlw	3	; case 6
  1524  06A5  1903               	skipnz
  1525  06A6  2E7C               	goto	l1909
  1526  06A7  3A01               	xorlw	1	; case 7
  1527  06A8  1903               	skipnz
  1528  06A9  2E7E               	goto	l1911
  1529  06AA  3A0F               	xorlw	15	; case 8
  1530  06AB  1903               	skipnz
  1531  06AC  2E80               	goto	l1913
  1532  06AD  3A01               	xorlw	1	; case 9
  1533  06AE  1903               	skipnz
  1534  06AF  2E82               	goto	l1915
  1535  06B0  2E84               	goto	l1917
  1536  06B1                     l1921:	
  1537                           
  1538                           ;LCD_8bits.c: 152:     return(numChr);
  1539  06B1  0875               	movf	uint_to_char@numChr,w
  1540  06B2  0008               	return
  1541  06B3                     __end_of_uint_to_char:	
  1542                           
  1543                           	psect	text2
  1544  0527                     __ptext2:	
  1545 ;; *************** function _uint_to_array *****************
  1546 ;; Defined at:
  1547 ;;		line 155 in file "LCD_8bits.c"
  1548 ;; Parameters:    Size  Location     Type
  1549 ;;  numero          1    wreg     unsigned char 
  1550 ;; Auto vars:     Size  Location     Type
  1551 ;;  numero          1   22[BANK0 ] unsigned char 
  1552 ;;  resultado       6   15[BANK0 ] unsigned int [3]
  1553 ;;  centenas        1   21[BANK0 ] unsigned char 
  1554 ;;  decenas         1   14[BANK0 ] unsigned char 
  1555 ;; Return value:  Size  Location     Type
  1556 ;;                  1    wreg      PTR unsigned int 
  1557 ;; Registers used:
  1558 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1559 ;; Tracked objects:
  1560 ;;		On entry : 0/0
  1561 ;;		On exit  : 0/0
  1562 ;;		Unchanged: 0/0
  1563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1564 ;;      Params:         0       0       0       0       0
  1565 ;;      Locals:         0       9       0       0       0
  1566 ;;      Temps:          0       6       0       0       0
  1567 ;;      Totals:         0      15       0       0       0
  1568 ;;Total ram usage:       15 bytes
  1569 ;; Hardware stack levels used:    1
  1570 ;; Hardware stack levels required when called:    2
  1571 ;; This function calls:
  1572 ;;		___awdiv
  1573 ;;		___wmul
  1574 ;; This function is called by:
  1575 ;;		_main
  1576 ;; This function uses a non-reentrant model
  1577 ;;
  1578                           
  1579                           
  1580                           ;psect for function _uint_to_array
  1581  0527                     _uint_to_array:	
  1582                           
  1583                           ;incstack = 0
  1584                           ; Regs used in _uint_to_array: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1585                           ;uint_to_array@numero stored from wreg
  1586  0527  1283               	bcf	3,5	;RP0=0, select bank0
  1587  0528  1303               	bcf	3,6	;RP1=0, select bank0
  1588  0529  00D3               	movwf	uint_to_array@numero
  1589                           
  1590                           ;LCD_8bits.c: 156:     uint16_t resultado[3] = {0,0,0};
  1591  052A  304C               	movlw	uint_to_array@resultado& (0+255)
  1592  052B  0084               	movwf	4
  1593  052C  3006               	movlw	6
  1594  052D  00FF               	movwf	127
  1595  052E                     u1150:	
  1596  052E  1383               	bcf	3,7	;select IRP bank0
  1597  052F  0180               	clrf	0
  1598  0530  0A84               	incf	4,f
  1599  0531  0BFF               	decfsz	127,f
  1600  0532  2D2E               	goto	u1150
  1601                           
  1602                           ;LCD_8bits.c: 157:     resultado[0] = numero/100;
  1603  0533  3064               	movlw	100
  1604  0534  00BD               	movwf	___awdiv@divisor
  1605  0535  3000               	movlw	0
  1606  0536  00BE               	movwf	___awdiv@divisor+1
  1607  0537  0853               	movf	uint_to_array@numero,w
  1608  0538  00C5               	movwf	??_uint_to_array
  1609  0539  01C6               	clrf	??_uint_to_array+1
  1610  053A  0845               	movf	??_uint_to_array,w
  1611  053B  00BF               	movwf	___awdiv@dividend
  1612  053C  0846               	movf	??_uint_to_array+1,w
  1613  053D  00C0               	movwf	___awdiv@dividend+1
  1614  053E  120A  118A  2613  120A  118A  	fcall	___awdiv
  1615  0543  1283               	bcf	3,5	;RP0=0, select bank0
  1616  0544  1303               	bcf	3,6	;RP1=0, select bank0
  1617  0545  083E               	movf	?___awdiv+1,w
  1618  0546  00CD               	movwf	uint_to_array@resultado+1
  1619  0547  083D               	movf	?___awdiv,w
  1620  0548  00CC               	movwf	uint_to_array@resultado
  1621                           
  1622                           ;LCD_8bits.c: 158:     uint8_t centenas = resultado[0];
  1623  0549  084C               	movf	uint_to_array@resultado,w
  1624  054A  00C5               	movwf	??_uint_to_array
  1625  054B  0845               	movf	??_uint_to_array,w
  1626  054C  00D2               	movwf	uint_to_array@centenas
  1627                           
  1628                           ;LCD_8bits.c: 159:     resultado[1] = (numero - (centenas *100))/10;
  1629  054D  300A               	movlw	10
  1630  054E  00BD               	movwf	___awdiv@divisor
  1631  054F  3000               	movlw	0
  1632  0550  00BE               	movwf	___awdiv@divisor+1
  1633  0551  0852               	movf	uint_to_array@centenas,w
  1634  0552  00C5               	movwf	??_uint_to_array
  1635  0553  01C6               	clrf	??_uint_to_array+1
  1636  0554  0845               	movf	??_uint_to_array,w
  1637  0555  00F2               	movwf	___wmul@multiplier
  1638  0556  0846               	movf	??_uint_to_array+1,w
  1639  0557  00F3               	movwf	___wmul@multiplier+1
  1640  0558  309C               	movlw	156
  1641  0559  00F4               	movwf	___wmul@multiplicand
  1642  055A  30FF               	movlw	255
  1643  055B  00F5               	movwf	___wmul@multiplicand+1
  1644  055C  120A  118A  2730  120A  118A  	fcall	___wmul
  1645  0561  1283               	bcf	3,5	;RP0=0, select bank0
  1646  0562  1303               	bcf	3,6	;RP1=0, select bank0
  1647  0563  0853               	movf	uint_to_array@numero,w
  1648  0564  0772               	addwf	?___wmul,w
  1649  0565  00BF               	movwf	___awdiv@dividend
  1650  0566  0873               	movf	?___wmul+1,w
  1651  0567  1803               	skipnc
  1652  0568  0A73               	incf	?___wmul+1,w
  1653  0569  00C0               	movwf	___awdiv@dividend+1
  1654  056A  120A  118A  2613  120A  118A  	fcall	___awdiv
  1655  056F  1283               	bcf	3,5	;RP0=0, select bank0
  1656  0570  1303               	bcf	3,6	;RP1=0, select bank0
  1657  0571  083E               	movf	?___awdiv+1,w
  1658  0572  00CF               	movwf	uint_to_array@resultado+3
  1659  0573  083D               	movf	?___awdiv,w
  1660  0574  00CE               	movwf	uint_to_array@resultado+2
  1661                           
  1662                           ;LCD_8bits.c: 160:     uint8_t decenas = resultado[1];
  1663  0575  084E               	movf	uint_to_array@resultado+2,w
  1664  0576  00C5               	movwf	??_uint_to_array
  1665  0577  0845               	movf	??_uint_to_array,w
  1666  0578  00CB               	movwf	uint_to_array@decenas
  1667                           
  1668                           ;LCD_8bits.c: 161:     resultado[2] = numero -(centenas*100+decenas*10);
  1669  0579  0852               	movf	uint_to_array@centenas,w
  1670  057A  00C5               	movwf	??_uint_to_array
  1671  057B  01C6               	clrf	??_uint_to_array+1
  1672  057C  0845               	movf	??_uint_to_array,w
  1673  057D  00F2               	movwf	___wmul@multiplier
  1674  057E  0846               	movf	??_uint_to_array+1,w
  1675  057F  00F3               	movwf	___wmul@multiplier+1
  1676  0580  309C               	movlw	156
  1677  0581  00F4               	movwf	___wmul@multiplicand
  1678  0582  30FF               	movlw	255
  1679  0583  00F5               	movwf	___wmul@multiplicand+1
  1680  0584  120A  118A  2730  120A  118A  	fcall	___wmul
  1681  0589  1283               	bcf	3,5	;RP0=0, select bank0
  1682  058A  1303               	bcf	3,6	;RP1=0, select bank0
  1683  058B  0853               	movf	uint_to_array@numero,w
  1684  058C  0772               	addwf	?___wmul,w
  1685  058D  00C7               	movwf	??_uint_to_array+2
  1686  058E  0873               	movf	?___wmul+1,w
  1687  058F  1803               	skipnc
  1688  0590  0A73               	incf	?___wmul+1,w
  1689  0591  00C8               	movwf	??_uint_to_array+3
  1690  0592  084B               	movf	uint_to_array@decenas,w
  1691  0593  00C9               	movwf	??_uint_to_array+4
  1692  0594  01CA               	clrf	??_uint_to_array+5
  1693  0595  0849               	movf	??_uint_to_array+4,w
  1694  0596  00F2               	movwf	___wmul@multiplier
  1695  0597  084A               	movf	??_uint_to_array+5,w
  1696  0598  00F3               	movwf	___wmul@multiplier+1
  1697  0599  30F6               	movlw	246
  1698  059A  00F4               	movwf	___wmul@multiplicand
  1699  059B  30FF               	movlw	255
  1700  059C  00F5               	movwf	___wmul@multiplicand+1
  1701  059D  120A  118A  2730   	fcall	___wmul
  1702  05A0  0872               	movf	?___wmul,w
  1703  05A1  1283               	bcf	3,5	;RP0=0, select bank0
  1704  05A2  1303               	bcf	3,6	;RP1=0, select bank0
  1705  05A3  0747               	addwf	??_uint_to_array+2,w
  1706  05A4  00D0               	movwf	uint_to_array@resultado+4
  1707  05A5  0873               	movf	?___wmul+1,w
  1708  05A6  1803               	skipnc
  1709  05A7  0A73               	incf	?___wmul+1,w
  1710  05A8  0748               	addwf	??_uint_to_array+3,w
  1711  05A9  00D1               	movwf	uint_to_array@resultado+5
  1712                           
  1713                           ;LCD_8bits.c: 162:     return(resultado);
  1714  05AA  304C               	movlw	(low (uint_to_array@resultado| 0))& (0+255)
  1715  05AB  0008               	return
  1716  05AC                     __end_of_uint_to_array:	
  1717                           
  1718                           	psect	text3
  1719  0613                     __ptext3:	
  1720 ;; *************** function ___awdiv *****************
  1721 ;; Defined at:
  1722 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\awdiv.c"
  1723 ;; Parameters:    Size  Location     Type
  1724 ;;  divisor         2    0[BANK0 ] int 
  1725 ;;  dividend        2    2[BANK0 ] int 
  1726 ;; Auto vars:     Size  Location     Type
  1727 ;;  quotient        2    6[BANK0 ] int 
  1728 ;;  sign            1    5[BANK0 ] unsigned char 
  1729 ;;  counter         1    4[BANK0 ] unsigned char 
  1730 ;; Return value:  Size  Location     Type
  1731 ;;                  2    0[BANK0 ] int 
  1732 ;; Registers used:
  1733 ;;		wreg, status,2, status,0
  1734 ;; Tracked objects:
  1735 ;;		On entry : 0/0
  1736 ;;		On exit  : 0/0
  1737 ;;		Unchanged: 0/0
  1738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1739 ;;      Params:         0       4       0       0       0
  1740 ;;      Locals:         0       4       0       0       0
  1741 ;;      Temps:          1       0       0       0       0
  1742 ;;      Totals:         1       8       0       0       0
  1743 ;;Total ram usage:        9 bytes
  1744 ;; Hardware stack levels used:    1
  1745 ;; Hardware stack levels required when called:    1
  1746 ;; This function calls:
  1747 ;;		Nothing
  1748 ;; This function is called by:
  1749 ;;		_uint_to_array
  1750 ;; This function uses a non-reentrant model
  1751 ;;
  1752                           
  1753                           
  1754                           ;psect for function ___awdiv
  1755  0613                     ___awdiv:	
  1756                           
  1757                           ;incstack = 0
  1758                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  1759  0613  1283               	bcf	3,5	;RP0=0, select bank0
  1760  0614  1303               	bcf	3,6	;RP1=0, select bank0
  1761  0615  01C2               	clrf	___awdiv@sign
  1762  0616  1FBE               	btfss	___awdiv@divisor+1,7
  1763  0617  2E1F               	goto	l2343
  1764  0618  09BD               	comf	___awdiv@divisor,f
  1765  0619  09BE               	comf	___awdiv@divisor+1,f
  1766  061A  0ABD               	incf	___awdiv@divisor,f
  1767  061B  1903               	skipnz
  1768  061C  0ABE               	incf	___awdiv@divisor+1,f
  1769  061D  01C2               	clrf	___awdiv@sign
  1770  061E  0AC2               	incf	___awdiv@sign,f
  1771  061F                     l2343:	
  1772  061F  1FC0               	btfss	___awdiv@dividend+1,7
  1773  0620  2E2A               	goto	l2349
  1774  0621  09BF               	comf	___awdiv@dividend,f
  1775  0622  09C0               	comf	___awdiv@dividend+1,f
  1776  0623  0ABF               	incf	___awdiv@dividend,f
  1777  0624  1903               	skipnz
  1778  0625  0AC0               	incf	___awdiv@dividend+1,f
  1779  0626  3001               	movlw	1
  1780  0627  00F8               	movwf	??___awdiv
  1781  0628  0878               	movf	??___awdiv,w
  1782  0629  06C2               	xorwf	___awdiv@sign,f
  1783  062A                     l2349:	
  1784  062A  01C3               	clrf	___awdiv@quotient
  1785  062B  01C4               	clrf	___awdiv@quotient+1
  1786  062C  083D               	movf	___awdiv@divisor,w
  1787  062D  043E               	iorwf	___awdiv@divisor+1,w
  1788  062E  1903               	btfsc	3,2
  1789  062F  2E61               	goto	l2371
  1790  0630  01C1               	clrf	___awdiv@counter
  1791  0631  0AC1               	incf	___awdiv@counter,f
  1792  0632                     l2359:	
  1793  0632  1BBE               	btfsc	___awdiv@divisor+1,7
  1794  0633  2E40               	goto	l2361
  1795  0634  3001               	movlw	1
  1796  0635                     u1025:	
  1797  0635  1003               	clrc
  1798  0636  0DBD               	rlf	___awdiv@divisor,f
  1799  0637  0DBE               	rlf	___awdiv@divisor+1,f
  1800  0638  3EFF               	addlw	-1
  1801  0639  1D03               	skipz
  1802  063A  2E35               	goto	u1025
  1803  063B  3001               	movlw	1
  1804  063C  00F8               	movwf	??___awdiv
  1805  063D  0878               	movf	??___awdiv,w
  1806  063E  07C1               	addwf	___awdiv@counter,f
  1807  063F  2E32               	goto	l2359
  1808  0640                     l2361:	
  1809  0640  3001               	movlw	1
  1810  0641                     u1045:	
  1811  0641  1003               	clrc
  1812  0642  0DC3               	rlf	___awdiv@quotient,f
  1813  0643  0DC4               	rlf	___awdiv@quotient+1,f
  1814  0644  3EFF               	addlw	-1
  1815  0645  1D03               	skipz
  1816  0646  2E41               	goto	u1045
  1817  0647  083E               	movf	___awdiv@divisor+1,w
  1818  0648  0240               	subwf	___awdiv@dividend+1,w
  1819  0649  1D03               	skipz
  1820  064A  2E4D               	goto	u1055
  1821  064B  083D               	movf	___awdiv@divisor,w
  1822  064C  023F               	subwf	___awdiv@dividend,w
  1823  064D                     u1055:	
  1824  064D  1C03               	skipc
  1825  064E  2E56               	goto	l2367
  1826  064F  083D               	movf	___awdiv@divisor,w
  1827  0650  02BF               	subwf	___awdiv@dividend,f
  1828  0651  083E               	movf	___awdiv@divisor+1,w
  1829  0652  1C03               	skipc
  1830  0653  03C0               	decf	___awdiv@dividend+1,f
  1831  0654  02C0               	subwf	___awdiv@dividend+1,f
  1832  0655  1443               	bsf	___awdiv@quotient,0
  1833  0656                     l2367:	
  1834  0656  3001               	movlw	1
  1835  0657                     u1065:	
  1836  0657  1003               	clrc
  1837  0658  0CBE               	rrf	___awdiv@divisor+1,f
  1838  0659  0CBD               	rrf	___awdiv@divisor,f
  1839  065A  3EFF               	addlw	-1
  1840  065B  1D03               	skipz
  1841  065C  2E57               	goto	u1065
  1842  065D  3001               	movlw	1
  1843  065E  02C1               	subwf	___awdiv@counter,f
  1844  065F  1D03               	btfss	3,2
  1845  0660  2E40               	goto	l2361
  1846  0661                     l2371:	
  1847  0661  0842               	movf	___awdiv@sign,w
  1848  0662  1903               	btfsc	3,2
  1849  0663  2E69               	goto	l2375
  1850  0664  09C3               	comf	___awdiv@quotient,f
  1851  0665  09C4               	comf	___awdiv@quotient+1,f
  1852  0666  0AC3               	incf	___awdiv@quotient,f
  1853  0667  1903               	skipnz
  1854  0668  0AC4               	incf	___awdiv@quotient+1,f
  1855  0669                     l2375:	
  1856  0669  0844               	movf	___awdiv@quotient+1,w
  1857  066A  00BE               	movwf	?___awdiv+1
  1858  066B  0843               	movf	___awdiv@quotient,w
  1859  066C  00BD               	movwf	?___awdiv
  1860  066D  0008               	return
  1861  066E                     __end_of___awdiv:	
  1862                           
  1863                           	psect	text4
  1864  0797                     __ptext4:	
  1865 ;; *************** function _uartTX_Write *****************
  1866 ;; Defined at:
  1867 ;;		line 36 in file "UART.c"
  1868 ;; Parameters:    Size  Location     Type
  1869 ;;  dato            1    wreg     unsigned char 
  1870 ;; Auto vars:     Size  Location     Type
  1871 ;;  dato            1    3[COMMON] unsigned char 
  1872 ;; Return value:  Size  Location     Type
  1873 ;;                  1    wreg      void 
  1874 ;; Registers used:
  1875 ;;		wreg
  1876 ;; Tracked objects:
  1877 ;;		On entry : 0/0
  1878 ;;		On exit  : 0/0
  1879 ;;		Unchanged: 0/0
  1880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1881 ;;      Params:         0       0       0       0       0
  1882 ;;      Locals:         1       0       0       0       0
  1883 ;;      Temps:          1       0       0       0       0
  1884 ;;      Totals:         2       0       0       0       0
  1885 ;;Total ram usage:        2 bytes
  1886 ;; Hardware stack levels used:    1
  1887 ;; Hardware stack levels required when called:    1
  1888 ;; This function calls:
  1889 ;;		Nothing
  1890 ;; This function is called by:
  1891 ;;		_main
  1892 ;;		_uartTX_Write_Str
  1893 ;; This function uses a non-reentrant model
  1894 ;;
  1895                           
  1896                           
  1897                           ;psect for function _uartTX_Write
  1898  0797                     _uartTX_Write:	
  1899                           
  1900                           ;incstack = 0
  1901                           ; Regs used in _uartTX_Write: [wreg]
  1902                           ;uartTX_Write@dato stored from wreg
  1903  0797  00F3               	movwf	uartTX_Write@dato
  1904                           
  1905                           ;UART.c: 37:         TXREG = dato;
  1906  0798  0873               	movf	uartTX_Write@dato,w
  1907  0799  1283               	bcf	3,5	;RP0=0, select bank0
  1908  079A  1303               	bcf	3,6	;RP1=0, select bank0
  1909  079B  0099               	movwf	25	;volatile
  1910  079C                     l1949:	
  1911                           ;UART.c: 38:         while(TXSTAbits.TRMT == 0){
  1912                           
  1913                           
  1914                           ;UART.c: 38:         while(TXSTAbits.TRMT == 0){
  1915  079C  1683               	bsf	3,5	;RP0=1, select bank1
  1916  079D  1303               	bcf	3,6	;RP1=0, select bank1
  1917  079E  1898               	btfsc	24,1	;volatile
  1918  079F  0008               	return
  1919                           
  1920                           ;UART.c: 39:             _delay((unsigned long)((500)*(4000000/4000000.0)));
  1921  07A0  30A6               	movlw	166
  1922  07A1  00F2               	movwf	??_uartTX_Write
  1923  07A2                     u1197:	
  1924  07A2  0BF2               	decfsz	??_uartTX_Write,f
  1925  07A3  2FA2               	goto	u1197
  1926  07A4  0000               	nop
  1927  07A5  2F9C               	goto	l1949
  1928  07A6                     __end_of_uartTX_Write:	
  1929                           
  1930                           	psect	text5
  1931  02A8                     __ptext5:	
  1932 ;; *************** function _uartRC_init *****************
  1933 ;; Defined at:
  1934 ;;		line 13 in file "UART.c"
  1935 ;; Parameters:    Size  Location     Type
  1936 ;;  baudrate        2    7[BANK0 ] unsigned int 
  1937 ;; Auto vars:     Size  Location     Type
  1938 ;;  n               2   21[BANK0 ] unsigned int 
  1939 ;; Return value:  Size  Location     Type
  1940 ;;                  1    wreg      unsigned char 
  1941 ;; Registers used:
  1942 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1943 ;; Tracked objects:
  1944 ;;		On entry : 0/0
  1945 ;;		On exit  : 0/0
  1946 ;;		Unchanged: 0/0
  1947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1948 ;;      Params:         0       2       0       0       0
  1949 ;;      Locals:         0       2       0       0       0
  1950 ;;      Temps:          0      12       0       0       0
  1951 ;;      Totals:         0      16       0       0       0
  1952 ;;Total ram usage:       16 bytes
  1953 ;; Hardware stack levels used:    1
  1954 ;; Hardware stack levels required when called:    2
  1955 ;; This function calls:
  1956 ;;		___aldiv
  1957 ;; This function is called by:
  1958 ;;		_main
  1959 ;; This function uses a non-reentrant model
  1960 ;;
  1961                           
  1962                           
  1963                           ;psect for function _uartRC_init
  1964  02A8                     _uartRC_init:	
  1965                           
  1966                           ;UART.c: 14:     uint16_t n;;UART.c: 15:     n = (4000000 - baudrate*64)/(baudrate*64);
  1967                           
  1968                           ;incstack = 0
  1969                           ; Regs used in _uartRC_init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1970  02A8  1283               	bcf	3,5	;RP0=0, select bank0
  1971  02A9  1303               	bcf	3,6	;RP1=0, select bank0
  1972  02AA  0845               	movf	uartRC_init@baudrate+1,w
  1973  02AB  00C7               	movwf	??_uartRC_init+1
  1974  02AC  0844               	movf	uartRC_init@baudrate,w
  1975  02AD  00C6               	movwf	??_uartRC_init
  1976  02AE  3006               	movlw	6
  1977  02AF  00FF               	movwf	127
  1978  02B0                     u1095:	
  1979  02B0  1003               	clrc
  1980  02B1  0DC6               	rlf	??_uartRC_init,f
  1981  02B2  0DC7               	rlf	??_uartRC_init+1,f
  1982  02B3  0BFF               	decfsz	127,f
  1983  02B4  2AB0               	goto	u1095
  1984  02B5  0846               	movf	??_uartRC_init,w
  1985  02B6  00F2               	movwf	___aldiv@divisor
  1986  02B7  0847               	movf	??_uartRC_init+1,w
  1987  02B8  00F3               	movwf	___aldiv@divisor+1
  1988  02B9  01F4               	clrf	___aldiv@divisor+2
  1989  02BA  01F5               	clrf	___aldiv@divisor+3
  1990  02BB  0845               	movf	uartRC_init@baudrate+1,w
  1991  02BC  00C9               	movwf	??_uartRC_init+3
  1992  02BD  0844               	movf	uartRC_init@baudrate,w
  1993  02BE  00C8               	movwf	??_uartRC_init+2
  1994  02BF  3006               	movlw	6
  1995  02C0  00FF               	movwf	127
  1996  02C1                     u1105:	
  1997  02C1  1003               	clrc
  1998  02C2  0DC8               	rlf	??_uartRC_init+2,f
  1999  02C3  0DC9               	rlf	??_uartRC_init+3,f
  2000  02C4  0BFF               	decfsz	127,f
  2001  02C5  2AC1               	goto	u1105
  2002  02C6  0848               	movf	??_uartRC_init+2,w
  2003  02C7  00CA               	movwf	??_uartRC_init+4
  2004  02C8  0849               	movf	??_uartRC_init+3,w
  2005  02C9  00CB               	movwf	??_uartRC_init+5
  2006  02CA  01CC               	clrf	??_uartRC_init+6
  2007  02CB  01CD               	clrf	??_uartRC_init+7
  2008  02CC  3000               	movlw	0
  2009  02CD  00CE               	movwf	??_uartRC_init+8
  2010  02CE  3009               	movlw	9
  2011  02CF  00CF               	movwf	??_uartRC_init+9
  2012  02D0  303D               	movlw	61
  2013  02D1  00D0               	movwf	??_uartRC_init+10
  2014  02D2  3000               	movlw	0
  2015  02D3  00D1               	movwf	??_uartRC_init+11
  2016  02D4  084A               	movf	??_uartRC_init+4,w
  2017  02D5  02CE               	subwf	??_uartRC_init+8,f
  2018  02D6  084B               	movf	??_uartRC_init+5,w
  2019  02D7  1C03               	skipc
  2020  02D8  0F4B               	incfsz	??_uartRC_init+5,w
  2021  02D9  2ADB               	goto	u1111
  2022  02DA  2ADC               	goto	u1112
  2023  02DB                     u1111:	
  2024  02DB  02CF               	subwf	??_uartRC_init+9,f
  2025  02DC                     u1112:	
  2026  02DC  084C               	movf	??_uartRC_init+6,w
  2027  02DD  1C03               	skipc
  2028  02DE  0F4C               	incfsz	??_uartRC_init+6,w
  2029  02DF  2AE1               	goto	u1113
  2030  02E0  2AE2               	goto	u1114
  2031  02E1                     u1113:	
  2032  02E1  02D0               	subwf	??_uartRC_init+10,f
  2033  02E2                     u1114:	
  2034  02E2  084D               	movf	??_uartRC_init+7,w
  2035  02E3  1C03               	skipc
  2036  02E4  0F4D               	incfsz	??_uartRC_init+7,w
  2037  02E5  2AE7               	goto	u1115
  2038  02E6  2AE8               	goto	u1116
  2039  02E7                     u1115:	
  2040  02E7  02D1               	subwf	??_uartRC_init+11,f
  2041  02E8                     u1116:	
  2042  02E8  0851               	movf	??_uartRC_init+11,w
  2043  02E9  00F9               	movwf	___aldiv@dividend+3
  2044  02EA  0850               	movf	??_uartRC_init+10,w
  2045  02EB  00F8               	movwf	___aldiv@dividend+2
  2046  02EC  084F               	movf	??_uartRC_init+9,w
  2047  02ED  00F7               	movwf	___aldiv@dividend+1
  2048  02EE  084E               	movf	??_uartRC_init+8,w
  2049  02EF  00F6               	movwf	___aldiv@dividend
  2050  02F0  120A  118A  240D  120A  118A  	fcall	___aldiv
  2051  02F5  0873               	movf	?___aldiv+1,w
  2052  02F6  1283               	bcf	3,5	;RP0=0, select bank0
  2053  02F7  1303               	bcf	3,6	;RP1=0, select bank0
  2054  02F8  00D3               	movwf	uartRC_init@n+1
  2055  02F9  0872               	movf	?___aldiv,w
  2056  02FA  00D2               	movwf	uartRC_init@n
  2057                           
  2058                           ;UART.c: 16:     if (n > 255){
  2059  02FB  3001               	movlw	1
  2060  02FC  0253               	subwf	uartRC_init@n+1,w
  2061  02FD  3000               	movlw	0
  2062  02FE  1903               	skipnz
  2063  02FF  0252               	subwf	uartRC_init@n,w
  2064  0300  1C03               	skipc
  2065  0301  2B5A               	goto	l2387
  2066                           
  2067                           ;UART.c: 17:         n = (4000000 - baudrate*16)/(baudrate*16);
  2068  0302  0845               	movf	uartRC_init@baudrate+1,w
  2069  0303  00C7               	movwf	??_uartRC_init+1
  2070  0304  0844               	movf	uartRC_init@baudrate,w
  2071  0305  00C6               	movwf	??_uartRC_init
  2072  0306  0EC6               	swapf	??_uartRC_init,f
  2073  0307  0EC7               	swapf	??_uartRC_init+1,f
  2074  0308  30F0               	movlw	240
  2075  0309  05C7               	andwf	??_uartRC_init+1,f
  2076  030A  0846               	movf	??_uartRC_init,w
  2077  030B  390F               	andlw	15
  2078  030C  04C7               	iorwf	??_uartRC_init+1,f
  2079  030D  30F0               	movlw	240
  2080  030E  05C6               	andwf	??_uartRC_init,f
  2081  030F  0846               	movf	??_uartRC_init,w
  2082  0310  00F2               	movwf	___aldiv@divisor
  2083  0311  0847               	movf	??_uartRC_init+1,w
  2084  0312  00F3               	movwf	___aldiv@divisor+1
  2085  0313  01F4               	clrf	___aldiv@divisor+2
  2086  0314  01F5               	clrf	___aldiv@divisor+3
  2087  0315  0845               	movf	uartRC_init@baudrate+1,w
  2088  0316  00C9               	movwf	??_uartRC_init+3
  2089  0317  0844               	movf	uartRC_init@baudrate,w
  2090  0318  00C8               	movwf	??_uartRC_init+2
  2091  0319  0EC8               	swapf	??_uartRC_init+2,f
  2092  031A  0EC9               	swapf	??_uartRC_init+3,f
  2093  031B  30F0               	movlw	240
  2094  031C  05C9               	andwf	??_uartRC_init+3,f
  2095  031D  0848               	movf	??_uartRC_init+2,w
  2096  031E  390F               	andlw	15
  2097  031F  04C9               	iorwf	??_uartRC_init+3,f
  2098  0320  30F0               	movlw	240
  2099  0321  05C8               	andwf	??_uartRC_init+2,f
  2100  0322  0848               	movf	??_uartRC_init+2,w
  2101  0323  00CA               	movwf	??_uartRC_init+4
  2102  0324  0849               	movf	??_uartRC_init+3,w
  2103  0325  00CB               	movwf	??_uartRC_init+5
  2104  0326  01CC               	clrf	??_uartRC_init+6
  2105  0327  01CD               	clrf	??_uartRC_init+7
  2106  0328  3000               	movlw	0
  2107  0329  00CE               	movwf	??_uartRC_init+8
  2108  032A  3009               	movlw	9
  2109  032B  00CF               	movwf	??_uartRC_init+9
  2110  032C  303D               	movlw	61
  2111  032D  00D0               	movwf	??_uartRC_init+10
  2112  032E  3000               	movlw	0
  2113  032F  00D1               	movwf	??_uartRC_init+11
  2114  0330  084A               	movf	??_uartRC_init+4,w
  2115  0331  02CE               	subwf	??_uartRC_init+8,f
  2116  0332  084B               	movf	??_uartRC_init+5,w
  2117  0333  1C03               	skipc
  2118  0334  0F4B               	incfsz	??_uartRC_init+5,w
  2119  0335  2B37               	goto	u1131
  2120  0336  2B38               	goto	u1132
  2121  0337                     u1131:	
  2122  0337  02CF               	subwf	??_uartRC_init+9,f
  2123  0338                     u1132:	
  2124  0338  084C               	movf	??_uartRC_init+6,w
  2125  0339  1C03               	skipc
  2126  033A  0F4C               	incfsz	??_uartRC_init+6,w
  2127  033B  2B3D               	goto	u1133
  2128  033C  2B3E               	goto	u1134
  2129  033D                     u1133:	
  2130  033D  02D0               	subwf	??_uartRC_init+10,f
  2131  033E                     u1134:	
  2132  033E  084D               	movf	??_uartRC_init+7,w
  2133  033F  1C03               	skipc
  2134  0340  0F4D               	incfsz	??_uartRC_init+7,w
  2135  0341  2B43               	goto	u1135
  2136  0342  2B44               	goto	u1136
  2137  0343                     u1135:	
  2138  0343  02D1               	subwf	??_uartRC_init+11,f
  2139  0344                     u1136:	
  2140  0344  0851               	movf	??_uartRC_init+11,w
  2141  0345  00F9               	movwf	___aldiv@dividend+3
  2142  0346  0850               	movf	??_uartRC_init+10,w
  2143  0347  00F8               	movwf	___aldiv@dividend+2
  2144  0348  084F               	movf	??_uartRC_init+9,w
  2145  0349  00F7               	movwf	___aldiv@dividend+1
  2146  034A  084E               	movf	??_uartRC_init+8,w
  2147  034B  00F6               	movwf	___aldiv@dividend
  2148  034C  120A  118A  240D  120A  118A  	fcall	___aldiv
  2149  0351  0873               	movf	?___aldiv+1,w
  2150  0352  1283               	bcf	3,5	;RP0=0, select bank0
  2151  0353  1303               	bcf	3,6	;RP1=0, select bank0
  2152  0354  00D3               	movwf	uartRC_init@n+1
  2153  0355  0872               	movf	?___aldiv,w
  2154  0356  00D2               	movwf	uartRC_init@n
  2155                           
  2156                           ;UART.c: 18:         TXSTAbits.BRGH = 1;
  2157  0357  1683               	bsf	3,5	;RP0=1, select bank1
  2158  0358  1303               	bcf	3,6	;RP1=0, select bank1
  2159  0359  1518               	bsf	24,2	;volatile
  2160  035A                     l2387:	
  2161                           
  2162                           ;UART.c: 20:     if (n < 256){
  2163  035A  3001               	movlw	1
  2164  035B  1283               	bcf	3,5	;RP0=0, select bank0
  2165  035C  0253               	subwf	uartRC_init@n+1,w
  2166  035D  3000               	movlw	0
  2167  035E  1903               	skipnz
  2168  035F  0252               	subwf	uartRC_init@n,w
  2169  0360  1803               	skipnc
  2170  0361  0008               	return
  2171                           
  2172                           ;UART.c: 21:         SPBRG = n;
  2173  0362  0852               	movf	uartRC_init@n,w
  2174  0363  1683               	bsf	3,5	;RP0=1, select bank1
  2175  0364  1303               	bcf	3,6	;RP1=0, select bank1
  2176  0365  0099               	movwf	25	;volatile
  2177                           
  2178                           ;UART.c: 22:         TXSTAbits.SYNC = 0;
  2179  0366  1218               	bcf	24,4	;volatile
  2180                           
  2181                           ;UART.c: 23:         RCSTAbits.SPEN = 1;
  2182  0367  1283               	bcf	3,5	;RP0=0, select bank0
  2183  0368  1303               	bcf	3,6	;RP1=0, select bank0
  2184  0369  1798               	bsf	24,7	;volatile
  2185                           
  2186                           ;UART.c: 24:         RCSTAbits.CREN = 1;
  2187  036A  1618               	bsf	24,4	;volatile
  2188                           
  2189                           ;UART.c: 25:         TXSTAbits.TXEN = 1;
  2190  036B  1683               	bsf	3,5	;RP0=1, select bank1
  2191  036C  1303               	bcf	3,6	;RP1=0, select bank1
  2192  036D  1698               	bsf	24,5	;volatile
  2193  036E  0008               	return
  2194  036F                     __end_of_uartRC_init:	
  2195                           
  2196                           	psect	text6
  2197  040D                     __ptext6:	
  2198 ;; *************** function ___aldiv *****************
  2199 ;; Defined at:
  2200 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\aldiv.c"
  2201 ;; Parameters:    Size  Location     Type
  2202 ;;  divisor         4    2[COMMON] long 
  2203 ;;  dividend        4    6[COMMON] long 
  2204 ;; Auto vars:     Size  Location     Type
  2205 ;;  quotient        4    3[BANK0 ] long 
  2206 ;;  sign            1    2[BANK0 ] unsigned char 
  2207 ;;  counter         1    1[BANK0 ] unsigned char 
  2208 ;; Return value:  Size  Location     Type
  2209 ;;                  4    2[COMMON] long 
  2210 ;; Registers used:
  2211 ;;		wreg, status,2, status,0
  2212 ;; Tracked objects:
  2213 ;;		On entry : 0/0
  2214 ;;		On exit  : 0/0
  2215 ;;		Unchanged: 0/0
  2216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2217 ;;      Params:         8       0       0       0       0
  2218 ;;      Locals:         0       6       0       0       0
  2219 ;;      Temps:          0       1       0       0       0
  2220 ;;      Totals:         8       7       0       0       0
  2221 ;;Total ram usage:       15 bytes
  2222 ;; Hardware stack levels used:    1
  2223 ;; Hardware stack levels required when called:    1
  2224 ;; This function calls:
  2225 ;;		Nothing
  2226 ;; This function is called by:
  2227 ;;		_uartRC_init
  2228 ;; This function uses a non-reentrant model
  2229 ;;
  2230                           
  2231                           
  2232                           ;psect for function ___aldiv
  2233  040D                     ___aldiv:	
  2234                           
  2235                           ;incstack = 0
  2236                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  2237  040D  1283               	bcf	3,5	;RP0=0, select bank0
  2238  040E  1303               	bcf	3,6	;RP1=0, select bank0
  2239  040F  01BF               	clrf	___aldiv@sign
  2240  0410  1FF5               	btfss	___aldiv@divisor+3,7
  2241  0411  2C1F               	goto	l430
  2242  0412  09F2               	comf	___aldiv@divisor,f
  2243  0413  09F3               	comf	___aldiv@divisor+1,f
  2244  0414  09F4               	comf	___aldiv@divisor+2,f
  2245  0415  09F5               	comf	___aldiv@divisor+3,f
  2246  0416  0AF2               	incf	___aldiv@divisor,f
  2247  0417  1903               	skipnz
  2248  0418  0AF3               	incf	___aldiv@divisor+1,f
  2249  0419  1903               	skipnz
  2250  041A  0AF4               	incf	___aldiv@divisor+2,f
  2251  041B  1903               	skipnz
  2252  041C  0AF5               	incf	___aldiv@divisor+3,f
  2253  041D  01BF               	clrf	___aldiv@sign
  2254  041E  0ABF               	incf	___aldiv@sign,f
  2255  041F                     l430:	
  2256  041F  1FF9               	btfss	___aldiv@dividend+3,7
  2257  0420  2C30               	goto	l2305
  2258  0421  09F6               	comf	___aldiv@dividend,f
  2259  0422  09F7               	comf	___aldiv@dividend+1,f
  2260  0423  09F8               	comf	___aldiv@dividend+2,f
  2261  0424  09F9               	comf	___aldiv@dividend+3,f
  2262  0425  0AF6               	incf	___aldiv@dividend,f
  2263  0426  1903               	skipnz
  2264  0427  0AF7               	incf	___aldiv@dividend+1,f
  2265  0428  1903               	skipnz
  2266  0429  0AF8               	incf	___aldiv@dividend+2,f
  2267  042A  1903               	skipnz
  2268  042B  0AF9               	incf	___aldiv@dividend+3,f
  2269  042C  3001               	movlw	1
  2270  042D  00BD               	movwf	??___aldiv
  2271  042E  083D               	movf	??___aldiv,w
  2272  042F  06BF               	xorwf	___aldiv@sign,f
  2273  0430                     l2305:	
  2274  0430  3000               	movlw	0
  2275  0431  00C3               	movwf	___aldiv@quotient+3
  2276  0432  3000               	movlw	0
  2277  0433  00C2               	movwf	___aldiv@quotient+2
  2278  0434  3000               	movlw	0
  2279  0435  00C1               	movwf	___aldiv@quotient+1
  2280  0436  3000               	movlw	0
  2281  0437  00C0               	movwf	___aldiv@quotient
  2282  0438  0875               	movf	___aldiv@divisor+3,w
  2283  0439  0474               	iorwf	___aldiv@divisor+2,w
  2284  043A  0473               	iorwf	___aldiv@divisor+1,w
  2285  043B  0472               	iorwf	___aldiv@divisor,w
  2286  043C  1903               	skipnz
  2287  043D  2C85               	goto	l2327
  2288  043E  01BE               	clrf	___aldiv@counter
  2289  043F  0ABE               	incf	___aldiv@counter,f
  2290  0440                     l2313:	
  2291  0440  1BF5               	btfsc	___aldiv@divisor+3,7
  2292  0441  2C50               	goto	l2315
  2293  0442  3001               	movlw	1
  2294  0443  00BD               	movwf	??___aldiv
  2295  0444                     u925:	
  2296  0444  1003               	clrc
  2297  0445  0DF2               	rlf	___aldiv@divisor,f
  2298  0446  0DF3               	rlf	___aldiv@divisor+1,f
  2299  0447  0DF4               	rlf	___aldiv@divisor+2,f
  2300  0448  0DF5               	rlf	___aldiv@divisor+3,f
  2301  0449  0BBD               	decfsz	??___aldiv,f
  2302  044A  2C44               	goto	u925
  2303  044B  3001               	movlw	1
  2304  044C  00BD               	movwf	??___aldiv
  2305  044D  083D               	movf	??___aldiv,w
  2306  044E  07BE               	addwf	___aldiv@counter,f
  2307  044F  2C40               	goto	l2313
  2308  0450                     l2315:	
  2309  0450  3001               	movlw	1
  2310  0451  00BD               	movwf	??___aldiv
  2311  0452                     u945:	
  2312  0452  1003               	clrc
  2313  0453  0DC0               	rlf	___aldiv@quotient,f
  2314  0454  0DC1               	rlf	___aldiv@quotient+1,f
  2315  0455  0DC2               	rlf	___aldiv@quotient+2,f
  2316  0456  0DC3               	rlf	___aldiv@quotient+3,f
  2317  0457  0BBD               	decfsz	??___aldiv,f
  2318  0458  2C52               	goto	u945
  2319  0459  0875               	movf	___aldiv@divisor+3,w
  2320  045A  0279               	subwf	___aldiv@dividend+3,w
  2321  045B  1D03               	skipz
  2322  045C  2C67               	goto	u955
  2323  045D  0874               	movf	___aldiv@divisor+2,w
  2324  045E  0278               	subwf	___aldiv@dividend+2,w
  2325  045F  1D03               	skipz
  2326  0460  2C67               	goto	u955
  2327  0461  0873               	movf	___aldiv@divisor+1,w
  2328  0462  0277               	subwf	___aldiv@dividend+1,w
  2329  0463  1D03               	skipz
  2330  0464  2C67               	goto	u955
  2331  0465  0872               	movf	___aldiv@divisor,w
  2332  0466  0276               	subwf	___aldiv@dividend,w
  2333  0467                     u955:	
  2334  0467  1C03               	skipc
  2335  0468  2C78               	goto	l2323
  2336  0469  0872               	movf	___aldiv@divisor,w
  2337  046A  02F6               	subwf	___aldiv@dividend,f
  2338  046B  0873               	movf	___aldiv@divisor+1,w
  2339  046C  1C03               	skipc
  2340  046D  0F73               	incfsz	___aldiv@divisor+1,w
  2341  046E  02F7               	subwf	___aldiv@dividend+1,f
  2342  046F  0874               	movf	___aldiv@divisor+2,w
  2343  0470  1C03               	skipc
  2344  0471  0F74               	incfsz	___aldiv@divisor+2,w
  2345  0472  02F8               	subwf	___aldiv@dividend+2,f
  2346  0473  0875               	movf	___aldiv@divisor+3,w
  2347  0474  1C03               	skipc
  2348  0475  0F75               	incfsz	___aldiv@divisor+3,w
  2349  0476  02F9               	subwf	___aldiv@dividend+3,f
  2350  0477  1440               	bsf	___aldiv@quotient,0
  2351  0478                     l2323:	
  2352  0478  3001               	movlw	1
  2353  0479                     u965:	
  2354  0479  1003               	clrc
  2355  047A  0CF5               	rrf	___aldiv@divisor+3,f
  2356  047B  0CF4               	rrf	___aldiv@divisor+2,f
  2357  047C  0CF3               	rrf	___aldiv@divisor+1,f
  2358  047D  0CF2               	rrf	___aldiv@divisor,f
  2359  047E  3EFF               	addlw	-1
  2360  047F  1D03               	skipz
  2361  0480  2C79               	goto	u965
  2362  0481  3001               	movlw	1
  2363  0482  02BE               	subwf	___aldiv@counter,f
  2364  0483  1D03               	btfss	3,2
  2365  0484  2C50               	goto	l2315
  2366  0485                     l2327:	
  2367  0485  083F               	movf	___aldiv@sign,w
  2368  0486  1903               	btfsc	3,2
  2369  0487  2C93               	goto	l2331
  2370  0488  09C0               	comf	___aldiv@quotient,f
  2371  0489  09C1               	comf	___aldiv@quotient+1,f
  2372  048A  09C2               	comf	___aldiv@quotient+2,f
  2373  048B  09C3               	comf	___aldiv@quotient+3,f
  2374  048C  0AC0               	incf	___aldiv@quotient,f
  2375  048D  1903               	skipnz
  2376  048E  0AC1               	incf	___aldiv@quotient+1,f
  2377  048F  1903               	skipnz
  2378  0490  0AC2               	incf	___aldiv@quotient+2,f
  2379  0491  1903               	skipnz
  2380  0492  0AC3               	incf	___aldiv@quotient+3,f
  2381  0493                     l2331:	
  2382  0493  0843               	movf	___aldiv@quotient+3,w
  2383  0494  00F5               	movwf	?___aldiv+3
  2384  0495  0842               	movf	___aldiv@quotient+2,w
  2385  0496  00F4               	movwf	?___aldiv+2
  2386  0497  0841               	movf	___aldiv@quotient+1,w
  2387  0498  00F3               	movwf	?___aldiv+1
  2388  0499  0840               	movf	___aldiv@quotient,w
  2389  049A  00F2               	movwf	?___aldiv
  2390  049B  0008               	return
  2391  049C                     __end_of___aldiv:	
  2392                           
  2393                           	psect	text7
  2394  07B5                     __ptext7:	
  2395 ;; *************** function _uartRC_Read *****************
  2396 ;; Defined at:
  2397 ;;		line 31 in file "UART.c"
  2398 ;; Parameters:    Size  Location     Type
  2399 ;;		None
  2400 ;; Auto vars:     Size  Location     Type
  2401 ;;  lectura         1    0        unsigned char 
  2402 ;; Return value:  Size  Location     Type
  2403 ;;                  1    wreg      unsigned char 
  2404 ;; Registers used:
  2405 ;;		wreg
  2406 ;; Tracked objects:
  2407 ;;		On entry : 0/0
  2408 ;;		On exit  : 0/0
  2409 ;;		Unchanged: 0/0
  2410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2411 ;;      Params:         0       0       0       0       0
  2412 ;;      Locals:         1       0       0       0       0
  2413 ;;      Temps:          2       0       0       0       0
  2414 ;;      Totals:         3       0       0       0       0
  2415 ;;Total ram usage:        3 bytes
  2416 ;; Hardware stack levels used:    1
  2417 ;; Hardware stack levels required when called:    1
  2418 ;; This function calls:
  2419 ;;		Nothing
  2420 ;; This function is called by:
  2421 ;;		_main
  2422 ;; This function uses a non-reentrant model
  2423 ;;
  2424                           
  2425                           
  2426                           ;psect for function _uartRC_Read
  2427  07B5                     _uartRC_Read:	
  2428                           
  2429                           ;UART.c: 32:     _delay((unsigned long)((5)*(4000000/4000.0)));
  2430                           
  2431                           ;incstack = 0
  2432                           ; Regs used in _uartRC_Read: [wreg]
  2433  07B5  3007               	movlw	7
  2434  07B6  00F3               	movwf	??_uartRC_Read+1
  2435  07B7  307D               	movlw	125
  2436  07B8  00F2               	movwf	??_uartRC_Read
  2437  07B9                     u1207:	
  2438  07B9  0BF2               	decfsz	??_uartRC_Read,f
  2439  07BA  2FB9               	goto	u1207
  2440  07BB  0BF3               	decfsz	??_uartRC_Read+1,f
  2441  07BC  2FB9               	goto	u1207
  2442  07BD  1283               	bcf	3,5	;RP0=0, select bank0
  2443  07BE  1303               	bcf	3,6	;RP1=0, select bank0
  2444  07BF  081A               	movf	26,w	;volatile
  2445  07C0  0008               	return
  2446  07C1                     __end_of_uartRC_Read:	
  2447                           
  2448                           	psect	text8
  2449  036F                     __ptext8:	
  2450 ;; *************** function _mapear *****************
  2451 ;; Defined at:
  2452 ;;		line 142 in file "main.c"
  2453 ;; Parameters:    Size  Location     Type
  2454 ;;  valor           1    wreg     unsigned char 
  2455 ;;  limReal         1    8[COMMON] unsigned char 
  2456 ;;  limSup          1    9[COMMON] unsigned char 
  2457 ;; Auto vars:     Size  Location     Type
  2458 ;;  valor           1    4[BANK0 ] unsigned char 
  2459 ;;  resultado       6    5[BANK0 ] unsigned int [3]
  2460 ;;  dividendo       2   11[BANK0 ] unsigned int 
  2461 ;; Return value:  Size  Location     Type
  2462 ;;                  1    wreg      PTR unsigned int 
  2463 ;; Registers used:
  2464 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2465 ;; Tracked objects:
  2466 ;;		On entry : 0/0
  2467 ;;		On exit  : 0/0
  2468 ;;		Unchanged: 0/0
  2469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2470 ;;      Params:         2       0       0       0       0
  2471 ;;      Locals:         0       9       0       0       0
  2472 ;;      Temps:          0       4       0       0       0
  2473 ;;      Totals:         2      13       0       0       0
  2474 ;;Total ram usage:       15 bytes
  2475 ;; Hardware stack levels used:    1
  2476 ;; Hardware stack levels required when called:    2
  2477 ;; This function calls:
  2478 ;;		___wmul
  2479 ;; This function is called by:
  2480 ;;		_main
  2481 ;; This function uses a non-reentrant model
  2482 ;;
  2483                           
  2484                           
  2485                           ;psect for function _mapear
  2486  036F                     _mapear:	
  2487                           
  2488                           ;incstack = 0
  2489                           ; Regs used in _mapear: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2490                           ;mapear@valor stored from wreg
  2491  036F  1283               	bcf	3,5	;RP0=0, select bank0
  2492  0370  1303               	bcf	3,6	;RP1=0, select bank0
  2493  0371  00C1               	movwf	mapear@valor
  2494                           
  2495                           ;main.c: 143:     uint16_t resultado[3] = {0,0,0};
  2496  0372  3042               	movlw	mapear@resultado& (0+255)
  2497  0373  0084               	movwf	4
  2498  0374  3006               	movlw	6
  2499  0375  00FF               	movwf	127
  2500  0376                     u760:	
  2501  0376  1383               	bcf	3,7	;select IRP bank0
  2502  0377  0180               	clrf	0
  2503  0378  0A84               	incf	4,f
  2504  0379  0BFF               	decfsz	127,f
  2505  037A  2B76               	goto	u760
  2506                           
  2507                           ;main.c: 144:     uint16_t dividendo = valor*limSup;
  2508  037B  0841               	movf	mapear@valor,w
  2509  037C  00BD               	movwf	??_mapear
  2510  037D  01BE               	clrf	??_mapear+1
  2511  037E  083D               	movf	??_mapear,w
  2512  037F  00F2               	movwf	___wmul@multiplier
  2513  0380  083E               	movf	??_mapear+1,w
  2514  0381  00F3               	movwf	___wmul@multiplier+1
  2515  0382  0879               	movf	mapear@limSup,w
  2516  0383  00BF               	movwf	??_mapear+2
  2517  0384  01C0               	clrf	??_mapear+3
  2518  0385  083F               	movf	??_mapear+2,w
  2519  0386  00F4               	movwf	___wmul@multiplicand
  2520  0387  0840               	movf	??_mapear+3,w
  2521  0388  00F5               	movwf	___wmul@multiplicand+1
  2522  0389  120A  118A  2730  120A  118A  	fcall	___wmul
  2523  038E  0873               	movf	?___wmul+1,w
  2524  038F  1283               	bcf	3,5	;RP0=0, select bank0
  2525  0390  1303               	bcf	3,6	;RP1=0, select bank0
  2526  0391  00C9               	movwf	mapear@dividendo+1
  2527  0392  0872               	movf	?___wmul,w
  2528  0393  00C8               	movwf	mapear@dividendo
  2529  0394                     l1877:	
  2530                           ;main.c: 145:     while (limReal <= dividendo){
  2531                           
  2532                           
  2533                           ;main.c: 145:     while (limReal <= dividendo){
  2534  0394  0878               	movf	mapear@limReal,w
  2535  0395  00BD               	movwf	??_mapear
  2536  0396  01BE               	clrf	??_mapear+1
  2537  0397  083E               	movf	??_mapear+1,w
  2538  0398  0249               	subwf	mapear@dividendo+1,w
  2539  0399  1D03               	skipz
  2540  039A  2B9D               	goto	u775
  2541  039B  083D               	movf	??_mapear,w
  2542  039C  0248               	subwf	mapear@dividendo,w
  2543  039D                     u775:	
  2544  039D  1C03               	btfss	3,0
  2545  039E  2BAF               	goto	l1879
  2546                           
  2547                           ;main.c: 146:         resultado[0] = resultado[0] + 1;
  2548  039F  0842               	movf	mapear@resultado,w
  2549  03A0  3E01               	addlw	1
  2550  03A1  00C2               	movwf	mapear@resultado
  2551  03A2  0843               	movf	mapear@resultado+1,w
  2552  03A3  1803               	skipnc
  2553  03A4  3E01               	addlw	1
  2554  03A5  3E00               	addlw	0
  2555  03A6  00C3               	movwf	mapear@resultado+1
  2556                           
  2557                           ;main.c: 147:         dividendo = dividendo - limReal;
  2558  03A7  0878               	movf	mapear@limReal,w
  2559  03A8  0248               	subwf	mapear@dividendo,w
  2560  03A9  00C8               	movwf	mapear@dividendo
  2561  03AA  0849               	movf	mapear@dividendo+1,w
  2562  03AB  1C03               	skipc
  2563  03AC  0349               	decf	mapear@dividendo+1,w
  2564  03AD  00C9               	movwf	mapear@dividendo+1
  2565  03AE  2B94               	goto	l1877
  2566  03AF                     l1879:	
  2567                           
  2568                           ;main.c: 149:     dividendo = dividendo *10;
  2569  03AF  0849               	movf	mapear@dividendo+1,w
  2570  03B0  00F3               	movwf	___wmul@multiplier+1
  2571  03B1  0848               	movf	mapear@dividendo,w
  2572  03B2  00F2               	movwf	___wmul@multiplier
  2573  03B3  300A               	movlw	10
  2574  03B4  00F4               	movwf	___wmul@multiplicand
  2575  03B5  3000               	movlw	0
  2576  03B6  00F5               	movwf	___wmul@multiplicand+1
  2577  03B7  120A  118A  2730  120A  118A  	fcall	___wmul
  2578  03BC  0873               	movf	?___wmul+1,w
  2579  03BD  1283               	bcf	3,5	;RP0=0, select bank0
  2580  03BE  1303               	bcf	3,6	;RP1=0, select bank0
  2581  03BF  00C9               	movwf	mapear@dividendo+1
  2582  03C0  0872               	movf	?___wmul,w
  2583  03C1  00C8               	movwf	mapear@dividendo
  2584  03C2                     l1883:	
  2585                           ;main.c: 150:     while (limReal <= dividendo){
  2586                           
  2587                           
  2588                           ;main.c: 150:     while (limReal <= dividendo){
  2589  03C2  0878               	movf	mapear@limReal,w
  2590  03C3  00BD               	movwf	??_mapear
  2591  03C4  01BE               	clrf	??_mapear+1
  2592  03C5  083E               	movf	??_mapear+1,w
  2593  03C6  0249               	subwf	mapear@dividendo+1,w
  2594  03C7  1D03               	skipz
  2595  03C8  2BCB               	goto	u785
  2596  03C9  083D               	movf	??_mapear,w
  2597  03CA  0248               	subwf	mapear@dividendo,w
  2598  03CB                     u785:	
  2599  03CB  1C03               	btfss	3,0
  2600  03CC  2BDD               	goto	l1885
  2601                           
  2602                           ;main.c: 151:         resultado[1] = resultado[1] +1;
  2603  03CD  0844               	movf	mapear@resultado+2,w
  2604  03CE  3E01               	addlw	1
  2605  03CF  00C4               	movwf	mapear@resultado+2
  2606  03D0  0845               	movf	mapear@resultado+3,w
  2607  03D1  1803               	skipnc
  2608  03D2  3E01               	addlw	1
  2609  03D3  3E00               	addlw	0
  2610  03D4  00C5               	movwf	mapear@resultado+3
  2611                           
  2612                           ;main.c: 152:         dividendo = dividendo - limReal;
  2613  03D5  0878               	movf	mapear@limReal,w
  2614  03D6  0248               	subwf	mapear@dividendo,w
  2615  03D7  00C8               	movwf	mapear@dividendo
  2616  03D8  0849               	movf	mapear@dividendo+1,w
  2617  03D9  1C03               	skipc
  2618  03DA  0349               	decf	mapear@dividendo+1,w
  2619  03DB  00C9               	movwf	mapear@dividendo+1
  2620  03DC  2BC2               	goto	l1883
  2621  03DD                     l1885:	
  2622                           
  2623                           ;main.c: 154:     dividendo = dividendo *10;
  2624  03DD  0849               	movf	mapear@dividendo+1,w
  2625  03DE  00F3               	movwf	___wmul@multiplier+1
  2626  03DF  0848               	movf	mapear@dividendo,w
  2627  03E0  00F2               	movwf	___wmul@multiplier
  2628  03E1  300A               	movlw	10
  2629  03E2  00F4               	movwf	___wmul@multiplicand
  2630  03E3  3000               	movlw	0
  2631  03E4  00F5               	movwf	___wmul@multiplicand+1
  2632  03E5  120A  118A  2730  120A  118A  	fcall	___wmul
  2633  03EA  0873               	movf	?___wmul+1,w
  2634  03EB  1283               	bcf	3,5	;RP0=0, select bank0
  2635  03EC  1303               	bcf	3,6	;RP1=0, select bank0
  2636  03ED  00C9               	movwf	mapear@dividendo+1
  2637  03EE  0872               	movf	?___wmul,w
  2638  03EF  00C8               	movwf	mapear@dividendo
  2639  03F0                     l1889:	
  2640                           ;main.c: 155:     while (limReal <= dividendo){
  2641                           
  2642                           
  2643                           ;main.c: 155:     while (limReal <= dividendo){
  2644  03F0  0878               	movf	mapear@limReal,w
  2645  03F1  00BD               	movwf	??_mapear
  2646  03F2  01BE               	clrf	??_mapear+1
  2647  03F3  083E               	movf	??_mapear+1,w
  2648  03F4  0249               	subwf	mapear@dividendo+1,w
  2649  03F5  1D03               	skipz
  2650  03F6  2BF9               	goto	u795
  2651  03F7  083D               	movf	??_mapear,w
  2652  03F8  0248               	subwf	mapear@dividendo,w
  2653  03F9                     u795:	
  2654  03F9  1C03               	btfss	3,0
  2655  03FA  2C0B               	goto	l1891
  2656                           
  2657                           ;main.c: 156:         resultado[2] = resultado[2] +1;
  2658  03FB  0846               	movf	mapear@resultado+4,w
  2659  03FC  3E01               	addlw	1
  2660  03FD  00C6               	movwf	mapear@resultado+4
  2661  03FE  0847               	movf	mapear@resultado+5,w
  2662  03FF  1803               	skipnc
  2663  0400  3E01               	addlw	1
  2664  0401  3E00               	addlw	0
  2665  0402  00C7               	movwf	mapear@resultado+5
  2666                           
  2667                           ;main.c: 157:         dividendo = dividendo - limReal;
  2668  0403  0878               	movf	mapear@limReal,w
  2669  0404  0248               	subwf	mapear@dividendo,w
  2670  0405  00C8               	movwf	mapear@dividendo
  2671  0406  0849               	movf	mapear@dividendo+1,w
  2672  0407  1C03               	skipc
  2673  0408  0349               	decf	mapear@dividendo+1,w
  2674  0409  00C9               	movwf	mapear@dividendo+1
  2675  040A  2BF0               	goto	l1889
  2676  040B                     l1891:	
  2677                           
  2678                           ;main.c: 160:     return resultado;
  2679  040B  3042               	movlw	(low (mapear@resultado| 0))& (0+255)
  2680  040C  0008               	return
  2681  040D                     __end_of_mapear:	
  2682                           
  2683                           	psect	text9
  2684  0730                     __ptext9:	
  2685 ;; *************** function ___wmul *****************
  2686 ;; Defined at:
  2687 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul16.c"
  2688 ;; Parameters:    Size  Location     Type
  2689 ;;  multiplier      2    2[COMMON] unsigned int 
  2690 ;;  multiplicand    2    4[COMMON] unsigned int 
  2691 ;; Auto vars:     Size  Location     Type
  2692 ;;  product         2    6[COMMON] unsigned int 
  2693 ;; Return value:  Size  Location     Type
  2694 ;;                  2    2[COMMON] unsigned int 
  2695 ;; Registers used:
  2696 ;;		wreg, status,2, status,0
  2697 ;; Tracked objects:
  2698 ;;		On entry : 0/0
  2699 ;;		On exit  : 0/0
  2700 ;;		Unchanged: 0/0
  2701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2702 ;;      Params:         4       0       0       0       0
  2703 ;;      Locals:         2       0       0       0       0
  2704 ;;      Temps:          0       0       0       0       0
  2705 ;;      Totals:         6       0       0       0       0
  2706 ;;Total ram usage:        6 bytes
  2707 ;; Hardware stack levels used:    1
  2708 ;; Hardware stack levels required when called:    1
  2709 ;; This function calls:
  2710 ;;		Nothing
  2711 ;; This function is called by:
  2712 ;;		_mapear
  2713 ;;		_uint_to_array
  2714 ;; This function uses a non-reentrant model
  2715 ;;
  2716                           
  2717                           
  2718                           ;psect for function ___wmul
  2719  0730                     ___wmul:	
  2720                           
  2721                           ;incstack = 0
  2722                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2723  0730  01F6               	clrf	___wmul@product
  2724  0731  01F7               	clrf	___wmul@product+1
  2725  0732                     l1605:	
  2726  0732  1C72               	btfss	___wmul@multiplier,0
  2727  0733  2F3A               	goto	l365
  2728  0734  0874               	movf	___wmul@multiplicand,w
  2729  0735  07F6               	addwf	___wmul@product,f
  2730  0736  1803               	skipnc
  2731  0737  0AF7               	incf	___wmul@product+1,f
  2732  0738  0875               	movf	___wmul@multiplicand+1,w
  2733  0739  07F7               	addwf	___wmul@product+1,f
  2734  073A                     l365:	
  2735  073A  3001               	movlw	1
  2736  073B                     u465:	
  2737  073B  1003               	clrc
  2738  073C  0DF4               	rlf	___wmul@multiplicand,f
  2739  073D  0DF5               	rlf	___wmul@multiplicand+1,f
  2740  073E  3EFF               	addlw	-1
  2741  073F  1D03               	skipz
  2742  0740  2F3B               	goto	u465
  2743  0741  3001               	movlw	1
  2744  0742                     u475:	
  2745  0742  1003               	clrc
  2746  0743  0CF3               	rrf	___wmul@multiplier+1,f
  2747  0744  0CF2               	rrf	___wmul@multiplier,f
  2748  0745  3EFF               	addlw	-1
  2749  0746  1D03               	skipz
  2750  0747  2F42               	goto	u475
  2751  0748  0872               	movf	___wmul@multiplier,w
  2752  0749  0473               	iorwf	___wmul@multiplier+1,w
  2753  074A  1D03               	btfss	3,2
  2754  074B  2F32               	goto	l1605
  2755  074C  0877               	movf	___wmul@product+1,w
  2756  074D  00F3               	movwf	?___wmul+1
  2757  074E  0876               	movf	___wmul@product,w
  2758  074F  00F2               	movwf	?___wmul
  2759  0750  0008               	return
  2760  0751                     __end_of___wmul:	
  2761                           
  2762                           	psect	text10
  2763  05AC                     __ptext10:	
  2764 ;; *************** function _LCD_init *****************
  2765 ;; Defined at:
  2766 ;;		line 44 in file "LCD_8bits.c"
  2767 ;; Parameters:    Size  Location     Type
  2768 ;;		None
  2769 ;; Auto vars:     Size  Location     Type
  2770 ;;		None
  2771 ;; Return value:  Size  Location     Type
  2772 ;;                  1    wreg      void 
  2773 ;; Registers used:
  2774 ;;		wreg, status,2, status,0, pclath, cstack
  2775 ;; Tracked objects:
  2776 ;;		On entry : 0/0
  2777 ;;		On exit  : 0/0
  2778 ;;		Unchanged: 0/0
  2779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2780 ;;      Params:         0       0       0       0       0
  2781 ;;      Locals:         0       0       0       0       0
  2782 ;;      Temps:          2       0       0       0       0
  2783 ;;      Totals:         2       0       0       0       0
  2784 ;;Total ram usage:        2 bytes
  2785 ;; Hardware stack levels used:    1
  2786 ;; Hardware stack levels required when called:    2
  2787 ;; This function calls:
  2788 ;;		_LCD_Cmd
  2789 ;; This function is called by:
  2790 ;;		_main
  2791 ;; This function uses a non-reentrant model
  2792 ;;
  2793                           
  2794                           
  2795                           ;psect for function _LCD_init
  2796  05AC                     _LCD_init:	
  2797                           
  2798                           ;LCD_8bits.c: 45:     _delay((unsigned long)((20)*(4000000/4000.0)));
  2799                           
  2800                           ;incstack = 0
  2801                           ; Regs used in _LCD_init: [wreg+status,2+status,0+pclath+cstack]
  2802  05AC  301A               	movlw	26
  2803  05AD  00F6               	movwf	??_LCD_init+1
  2804  05AE  30F8               	movlw	248
  2805  05AF  00F5               	movwf	??_LCD_init
  2806  05B0                     u1217:	
  2807  05B0  0BF5               	decfsz	??_LCD_init,f
  2808  05B1  2DB0               	goto	u1217
  2809  05B2  0BF6               	decfsz	??_LCD_init+1,f
  2810  05B3  2DB0               	goto	u1217
  2811  05B4  0000               	nop
  2812                           
  2813                           ;LCD_8bits.c: 46:     LCD_Cmd(0x30);
  2814  05B5  3030               	movlw	48
  2815  05B6  120A  118A  26B3  120A  118A  	fcall	_LCD_Cmd
  2816                           
  2817                           ;LCD_8bits.c: 47:     _delay((unsigned long)((5)*(4000000/4000.0)));
  2818  05BB  3007               	movlw	7
  2819  05BC  00F6               	movwf	??_LCD_init+1
  2820  05BD  307D               	movlw	125
  2821  05BE  00F5               	movwf	??_LCD_init
  2822  05BF                     u1227:	
  2823  05BF  0BF5               	decfsz	??_LCD_init,f
  2824  05C0  2DBF               	goto	u1227
  2825  05C1  0BF6               	decfsz	??_LCD_init+1,f
  2826  05C2  2DBF               	goto	u1227
  2827                           
  2828                           ;LCD_8bits.c: 48:     LCD_Cmd(0x30);
  2829  05C3  3030               	movlw	48
  2830  05C4  120A  118A  26B3  120A  118A  	fcall	_LCD_Cmd
  2831                           
  2832                           ;LCD_8bits.c: 49:     _delay((unsigned long)((100)*(4000000/4000000.0)));
  2833  05C9  3021               	movlw	33
  2834  05CA  00F5               	movwf	??_LCD_init
  2835  05CB                     u1237:	
  2836  05CB  0BF5               	decfsz	??_LCD_init,f
  2837  05CC  2DCB               	goto	u1237
  2838                           
  2839                           ;LCD_8bits.c: 50:     LCD_Cmd(0x30);
  2840  05CD  3030               	movlw	48
  2841  05CE  120A  118A  26B3  120A  118A  	fcall	_LCD_Cmd
  2842                           
  2843                           ;LCD_8bits.c: 51:     _delay((unsigned long)((100)*(4000000/4000000.0)));
  2844  05D3  3021               	movlw	33
  2845  05D4  00F5               	movwf	??_LCD_init
  2846  05D5                     u1247:	
  2847  05D5  0BF5               	decfsz	??_LCD_init,f
  2848  05D6  2DD5               	goto	u1247
  2849                           
  2850                           ;LCD_8bits.c: 52:     LCD_Cmd(0x38);
  2851  05D7  3038               	movlw	56
  2852  05D8  120A  118A  26B3  120A  118A  	fcall	_LCD_Cmd
  2853                           
  2854                           ;LCD_8bits.c: 53:     _delay((unsigned long)((53)*(4000000/4000000.0)));
  2855  05DD  3011               	movlw	17
  2856  05DE  00F5               	movwf	??_LCD_init
  2857  05DF                     u1257:	
  2858  05DF  0BF5               	decfsz	??_LCD_init,f
  2859  05E0  2DDF               	goto	u1257
  2860  05E1  0000               	nop
  2861                           
  2862                           ;LCD_8bits.c: 54:     LCD_Cmd(0x08);
  2863  05E2  3008               	movlw	8
  2864  05E3  120A  118A  26B3  120A  118A  	fcall	_LCD_Cmd
  2865                           
  2866                           ;LCD_8bits.c: 55:     _delay((unsigned long)((53)*(4000000/4000000.0)));
  2867  05E8  3011               	movlw	17
  2868  05E9  00F5               	movwf	??_LCD_init
  2869  05EA                     u1267:	
  2870  05EA  0BF5               	decfsz	??_LCD_init,f
  2871  05EB  2DEA               	goto	u1267
  2872  05EC  0000               	nop
  2873                           
  2874                           ;LCD_8bits.c: 56:     LCD_Cmd(0x01);
  2875  05ED  3001               	movlw	1
  2876  05EE  120A  118A  26B3  120A  118A  	fcall	_LCD_Cmd
  2877                           
  2878                           ;LCD_8bits.c: 57:     _delay((unsigned long)((3)*(4000000/4000.0)));
  2879  05F3  3004               	movlw	4
  2880  05F4  00F6               	movwf	??_LCD_init+1
  2881  05F5  30E4               	movlw	228
  2882  05F6  00F5               	movwf	??_LCD_init
  2883  05F7                     u1277:	
  2884  05F7  0BF5               	decfsz	??_LCD_init,f
  2885  05F8  2DF7               	goto	u1277
  2886  05F9  0BF6               	decfsz	??_LCD_init+1,f
  2887  05FA  2DF7               	goto	u1277
  2888  05FB  0000               	nop
  2889                           
  2890                           ;LCD_8bits.c: 58:     LCD_Cmd(0x06);
  2891  05FC  3006               	movlw	6
  2892  05FD  120A  118A  26B3  120A  118A  	fcall	_LCD_Cmd
  2893                           
  2894                           ;LCD_8bits.c: 59:     _delay((unsigned long)((53)*(4000000/4000000.0)));
  2895  0602  3011               	movlw	17
  2896  0603  00F5               	movwf	??_LCD_init
  2897  0604                     u1287:	
  2898  0604  0BF5               	decfsz	??_LCD_init,f
  2899  0605  2E04               	goto	u1287
  2900  0606  0000               	nop
  2901                           
  2902                           ;LCD_8bits.c: 60:     LCD_Cmd(0x0C);
  2903  0607  300C               	movlw	12
  2904  0608  120A  118A  26B3  120A  118A  	fcall	_LCD_Cmd
  2905                           
  2906                           ;LCD_8bits.c: 61:     _delay((unsigned long)((53)*(4000000/4000000.0)));
  2907  060D  3011               	movlw	17
  2908  060E  00F5               	movwf	??_LCD_init
  2909  060F                     u1297:	
  2910  060F  0BF5               	decfsz	??_LCD_init,f
  2911  0610  2E0F               	goto	u1297
  2912  0611  0000               	nop
  2913  0612  0008               	return
  2914  0613                     __end_of_LCD_init:	
  2915                           
  2916                           	psect	text11
  2917  070E                     __ptext11:	
  2918 ;; *************** function _LCD_Write_String *****************
  2919 ;; Defined at:
  2920 ;;		line 73 in file "LCD_8bits.c"
  2921 ;; Parameters:    Size  Location     Type
  2922 ;;  a               1    wreg     PTR unsigned char 
  2923 ;;		 -> STR_1(15), 
  2924 ;; Auto vars:     Size  Location     Type
  2925 ;;  a               1    6[COMMON] PTR unsigned char 
  2926 ;;		 -> STR_1(15), 
  2927 ;;  n               2    4[COMMON] int 
  2928 ;; Return value:  Size  Location     Type
  2929 ;;                  1    wreg      void 
  2930 ;; Registers used:
  2931 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2932 ;; Tracked objects:
  2933 ;;		On entry : 0/0
  2934 ;;		On exit  : 0/0
  2935 ;;		Unchanged: 0/0
  2936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2937 ;;      Params:         0       0       0       0       0
  2938 ;;      Locals:         3       0       0       0       0
  2939 ;;      Temps:          0       0       0       0       0
  2940 ;;      Totals:         3       0       0       0       0
  2941 ;;Total ram usage:        3 bytes
  2942 ;; Hardware stack levels used:    1
  2943 ;; Hardware stack levels required when called:    2
  2944 ;; This function calls:
  2945 ;;		_LCD_Write_Character
  2946 ;; This function is called by:
  2947 ;;		_main
  2948 ;; This function uses a non-reentrant model
  2949 ;;
  2950                           
  2951                           
  2952                           ;psect for function _LCD_Write_String
  2953  070E                     _LCD_Write_String:	
  2954                           
  2955                           ;incstack = 0
  2956                           ; Regs used in _LCD_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2957                           ;LCD_Write_String@a stored from wreg
  2958  070E  00F6               	movwf	LCD_Write_String@a
  2959                           
  2960                           ;LCD_8bits.c: 74:     int n;;LCD_8bits.c: 75:     for(n = 0; a[n] != '\0'; n++){
  2961  070F  01F4               	clrf	LCD_Write_String@n
  2962  0710  01F5               	clrf	LCD_Write_String@n+1
  2963  0711                     l1801:	
  2964  0711  0874               	movf	LCD_Write_String@n,w
  2965  0712  0776               	addwf	LCD_Write_String@a,w
  2966  0713  0084               	movwf	4
  2967  0714  120A  118A  276E  120A  118A  	fcall	stringdir
  2968  0719  3A00               	xorlw	0
  2969  071A  1903               	btfsc	3,2
  2970  071B  0008               	return
  2971                           
  2972                           ;LCD_8bits.c: 76:         LCD_Write_Character(a[n]);
  2973  071C  0874               	movf	LCD_Write_String@n,w
  2974  071D  0776               	addwf	LCD_Write_String@a,w
  2975  071E  0084               	movwf	4
  2976  071F  120A  118A  276E  120A  118A  	fcall	stringdir
  2977  0724  120A  118A  27A6  120A  118A  	fcall	_LCD_Write_Character
  2978                           
  2979                           ;LCD_8bits.c: 77:     }
  2980  0729  3001               	movlw	1
  2981  072A  07F4               	addwf	LCD_Write_String@n,f
  2982  072B  1803               	skipnc
  2983  072C  0AF5               	incf	LCD_Write_String@n+1,f
  2984  072D  3000               	movlw	0
  2985  072E  07F5               	addwf	LCD_Write_String@n+1,f
  2986  072F  2F11               	goto	l1801
  2987  0730                     __end_of_LCD_Write_String:	
  2988                           
  2989                           	psect	text12
  2990  07A6                     __ptext12:	
  2991 ;; *************** function _LCD_Write_Character *****************
  2992 ;; Defined at:
  2993 ;;		line 64 in file "LCD_8bits.c"
  2994 ;; Parameters:    Size  Location     Type
  2995 ;;  caracter        1    wreg     unsigned char 
  2996 ;; Auto vars:     Size  Location     Type
  2997 ;;  caracter        1    3[COMMON] unsigned char 
  2998 ;; Return value:  Size  Location     Type
  2999 ;;                  1    wreg      void 
  3000 ;; Registers used:
  3001 ;;		wreg
  3002 ;; Tracked objects:
  3003 ;;		On entry : 0/0
  3004 ;;		On exit  : 0/0
  3005 ;;		Unchanged: 0/0
  3006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3007 ;;      Params:         0       0       0       0       0
  3008 ;;      Locals:         1       0       0       0       0
  3009 ;;      Temps:          1       0       0       0       0
  3010 ;;      Totals:         2       0       0       0       0
  3011 ;;Total ram usage:        2 bytes
  3012 ;; Hardware stack levels used:    1
  3013 ;; Hardware stack levels required when called:    1
  3014 ;; This function calls:
  3015 ;;		Nothing
  3016 ;; This function is called by:
  3017 ;;		_main
  3018 ;;		_LCD_Write_String
  3019 ;; This function uses a non-reentrant model
  3020 ;;
  3021                           
  3022                           
  3023                           ;psect for function _LCD_Write_Character
  3024  07A6                     _LCD_Write_Character:	
  3025                           
  3026                           ;incstack = 0
  3027                           ; Regs used in _LCD_Write_Character: [wreg]
  3028                           ;LCD_Write_Character@caracter stored from wreg
  3029  07A6  00F3               	movwf	LCD_Write_Character@caracter
  3030                           
  3031                           ;LCD_8bits.c: 65:     PORTCbits.RC0 = 1;
  3032  07A7  1283               	bcf	3,5	;RP0=0, select bank0
  3033  07A8  1303               	bcf	3,6	;RP1=0, select bank0
  3034  07A9  1407               	bsf	7,0	;volatile
  3035                           
  3036                           ;LCD_8bits.c: 67:     PORTD = caracter;
  3037  07AA  0873               	movf	LCD_Write_Character@caracter,w
  3038  07AB  0088               	movwf	8	;volatile
  3039                           
  3040                           ;LCD_8bits.c: 68:     PORTCbits.RC1 = 1;
  3041  07AC  1487               	bsf	7,1	;volatile
  3042                           
  3043                           ;LCD_8bits.c: 69:     _delay((unsigned long)((40)*(4000000/4000000.0)));
  3044  07AD  300D               	movlw	13
  3045  07AE  00F2               	movwf	??_LCD_Write_Character
  3046  07AF                     u1307:	
  3047  07AF  0BF2               	decfsz	??_LCD_Write_Character,f
  3048  07B0  2FAF               	goto	u1307
  3049                           
  3050                           ;LCD_8bits.c: 70:     PORTCbits.RC1 = 0;
  3051  07B1  1283               	bcf	3,5	;RP0=0, select bank0
  3052  07B2  1303               	bcf	3,6	;RP1=0, select bank0
  3053  07B3  1087               	bcf	7,1	;volatile
  3054  07B4  0008               	return
  3055  07B5                     __end_of_LCD_Write_Character:	
  3056                           
  3057                           	psect	text13
  3058  06E2                     __ptext13:	
  3059 ;; *************** function _LCD_Set_Cursor *****************
  3060 ;; Defined at:
  3061 ;;		line 80 in file "LCD_8bits.c"
  3062 ;; Parameters:    Size  Location     Type
  3063 ;;  linea           1    wreg     unsigned char 
  3064 ;;  columna         1    5[COMMON] unsigned char 
  3065 ;; Auto vars:     Size  Location     Type
  3066 ;;  linea           1    8[COMMON] unsigned char 
  3067 ;;  corrimiento     1    9[COMMON] unsigned char 
  3068 ;; Return value:  Size  Location     Type
  3069 ;;                  1    wreg      void 
  3070 ;; Registers used:
  3071 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3072 ;; Tracked objects:
  3073 ;;		On entry : 0/0
  3074 ;;		On exit  : 0/0
  3075 ;;		Unchanged: 0/0
  3076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3077 ;;      Params:         1       0       0       0       0
  3078 ;;      Locals:         2       0       0       0       0
  3079 ;;      Temps:          2       0       0       0       0
  3080 ;;      Totals:         5       0       0       0       0
  3081 ;;Total ram usage:        5 bytes
  3082 ;; Hardware stack levels used:    1
  3083 ;; Hardware stack levels required when called:    2
  3084 ;; This function calls:
  3085 ;;		_LCD_Cmd
  3086 ;; This function is called by:
  3087 ;;		_main
  3088 ;; This function uses a non-reentrant model
  3089 ;;
  3090                           
  3091                           
  3092                           ;psect for function _LCD_Set_Cursor
  3093  06E2                     _LCD_Set_Cursor:	
  3094                           
  3095                           ;incstack = 0
  3096                           ; Regs used in _LCD_Set_Cursor: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3097                           ;LCD_Set_Cursor@linea stored from wreg
  3098  06E2  00F8               	movwf	LCD_Set_Cursor@linea
  3099                           
  3100                           ;LCD_8bits.c: 82:     switch (linea){
  3101  06E3  2EFD               	goto	l1789
  3102  06E4                     l1779:	
  3103                           
  3104                           ;LCD_8bits.c: 84:             corrimiento = 0x80 + columna;
  3105  06E4  0875               	movf	LCD_Set_Cursor@columna,w
  3106  06E5  3E80               	addlw	128
  3107  06E6  00F6               	movwf	??_LCD_Set_Cursor
  3108  06E7  0876               	movf	??_LCD_Set_Cursor,w
  3109  06E8  00F9               	movwf	LCD_Set_Cursor@corrimiento
  3110                           
  3111                           ;LCD_8bits.c: 85:             LCD_Cmd(corrimiento);
  3112  06E9  0879               	movf	LCD_Set_Cursor@corrimiento,w
  3113  06EA  120A  118A  26B3   	fcall	_LCD_Cmd
  3114                           
  3115                           ;LCD_8bits.c: 86:             break;
  3116  06ED  0008               	return
  3117  06EE                     l1783:	
  3118                           
  3119                           ;LCD_8bits.c: 88:             corrimiento = 0x80 + 0x40 + columna;
  3120  06EE  0875               	movf	LCD_Set_Cursor@columna,w
  3121  06EF  3EC0               	addlw	192
  3122  06F0  00F6               	movwf	??_LCD_Set_Cursor
  3123  06F1  0876               	movf	??_LCD_Set_Cursor,w
  3124  06F2  00F9               	movwf	LCD_Set_Cursor@corrimiento
  3125                           
  3126                           ;LCD_8bits.c: 89:             LCD_Cmd(corrimiento);
  3127  06F3  0879               	movf	LCD_Set_Cursor@corrimiento,w
  3128  06F4  120A  118A  26B3   	fcall	_LCD_Cmd
  3129                           
  3130                           ;LCD_8bits.c: 90:             break;
  3131  06F7  0008               	return
  3132  06F8                     l1787:	
  3133                           
  3134                           ;LCD_8bits.c: 92:             LCD_Cmd(0x80);
  3135  06F8  3080               	movlw	128
  3136  06F9  120A  118A  26B3   	fcall	_LCD_Cmd
  3137                           
  3138                           ;LCD_8bits.c: 93:     }
  3139  06FC  0008               	return
  3140  06FD                     l1789:	
  3141  06FD  0878               	movf	LCD_Set_Cursor@linea,w
  3142  06FE  00F6               	movwf	??_LCD_Set_Cursor
  3143  06FF  01F7               	clrf	??_LCD_Set_Cursor+1
  3144                           
  3145                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3146                           ; Switch size 1, requested type "simple"
  3147                           ; Number of cases is 1, Range of values is 0 to 0
  3148                           ; switch strategies available:
  3149                           ; Name         Instructions Cycles
  3150                           ; simple_byte            4     3 (average)
  3151                           ; direct_byte           11     8 (fixed)
  3152                           ; jumptable            260     6 (fixed)
  3153                           ;	Chosen strategy is simple_byte
  3154  0700  0877               	movf	??_LCD_Set_Cursor+1,w
  3155  0701  3A00               	xorlw	0	; case 0
  3156  0702  1903               	skipnz
  3157  0703  2F05               	goto	l2725
  3158  0704  2EF8               	goto	l1787
  3159  0705                     l2725:	
  3160                           
  3161                           ; Switch size 1, requested type "simple"
  3162                           ; Number of cases is 2, Range of values is 1 to 2
  3163                           ; switch strategies available:
  3164                           ; Name         Instructions Cycles
  3165                           ; simple_byte            7     4 (average)
  3166                           ; direct_byte           17    11 (fixed)
  3167                           ; jumptable            263     9 (fixed)
  3168                           ;	Chosen strategy is simple_byte
  3169  0705  0876               	movf	??_LCD_Set_Cursor,w
  3170  0706  3A01               	xorlw	1	; case 1
  3171  0707  1903               	skipnz
  3172  0708  2EE4               	goto	l1779
  3173  0709  3A03               	xorlw	3	; case 2
  3174  070A  1903               	skipnz
  3175  070B  2EEE               	goto	l1783
  3176  070C  2EF8               	goto	l1787
  3177  070D  0008               	return
  3178  070E                     __end_of_LCD_Set_Cursor:	
  3179                           
  3180                           	psect	text14
  3181  06B3                     __ptext14:	
  3182 ;; *************** function _LCD_Cmd *****************
  3183 ;; Defined at:
  3184 ;;		line 21 in file "LCD_8bits.c"
  3185 ;; Parameters:    Size  Location     Type
  3186 ;;  comando         1    wreg     unsigned char 
  3187 ;; Auto vars:     Size  Location     Type
  3188 ;;  comando         1    4[COMMON] unsigned char 
  3189 ;; Return value:  Size  Location     Type
  3190 ;;                  1    wreg      void 
  3191 ;; Registers used:
  3192 ;;		wreg
  3193 ;; Tracked objects:
  3194 ;;		On entry : 0/0
  3195 ;;		On exit  : 0/0
  3196 ;;		Unchanged: 0/0
  3197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3198 ;;      Params:         0       0       0       0       0
  3199 ;;      Locals:         1       0       0       0       0
  3200 ;;      Temps:          2       0       0       0       0
  3201 ;;      Totals:         3       0       0       0       0
  3202 ;;Total ram usage:        3 bytes
  3203 ;; Hardware stack levels used:    1
  3204 ;; Hardware stack levels required when called:    1
  3205 ;; This function calls:
  3206 ;;		Nothing
  3207 ;; This function is called by:
  3208 ;;		_LCD_init
  3209 ;;		_LCD_Set_Cursor
  3210 ;;		_LCD_clear
  3211 ;;		_LCD_home
  3212 ;;		_LCD_Shift_links
  3213 ;;		_LCD_Shift_rechts
  3214 ;;		_LCD_Cursor_rechts
  3215 ;;		_LCD_Cursor_links
  3216 ;; This function uses a non-reentrant model
  3217 ;;
  3218                           
  3219                           
  3220                           ;psect for function _LCD_Cmd
  3221  06B3                     _LCD_Cmd:	
  3222                           
  3223                           ;incstack = 0
  3224                           ; Regs used in _LCD_Cmd: [wreg]
  3225                           ;LCD_Cmd@comando stored from wreg
  3226  06B3  00F4               	movwf	LCD_Cmd@comando
  3227                           
  3228                           ;LCD_8bits.c: 22:     PORTCbits.RC0 = 0;
  3229  06B4  1283               	bcf	3,5	;RP0=0, select bank0
  3230  06B5  1303               	bcf	3,6	;RP1=0, select bank0
  3231  06B6  1007               	bcf	7,0	;volatile
  3232                           
  3233                           ;LCD_8bits.c: 23:     _delay((unsigned long)((5)*(4000000/4000.0)));
  3234  06B7  3007               	movlw	7
  3235  06B8  00F3               	movwf	??_LCD_Cmd+1
  3236  06B9  307D               	movlw	125
  3237  06BA  00F2               	movwf	??_LCD_Cmd
  3238  06BB                     u1317:	
  3239  06BB  0BF2               	decfsz	??_LCD_Cmd,f
  3240  06BC  2EBB               	goto	u1317
  3241  06BD  0BF3               	decfsz	??_LCD_Cmd+1,f
  3242  06BE  2EBB               	goto	u1317
  3243                           
  3244                           ;LCD_8bits.c: 24:     PORTCbits.RC1 = 1;
  3245  06BF  1283               	bcf	3,5	;RP0=0, select bank0
  3246  06C0  1303               	bcf	3,6	;RP1=0, select bank0
  3247  06C1  1487               	bsf	7,1	;volatile
  3248                           
  3249                           ;LCD_8bits.c: 25:     _delay((unsigned long)((5)*(4000000/4000.0)));
  3250  06C2  3007               	movlw	7
  3251  06C3  00F3               	movwf	??_LCD_Cmd+1
  3252  06C4  307D               	movlw	125
  3253  06C5  00F2               	movwf	??_LCD_Cmd
  3254  06C6                     u1327:	
  3255  06C6  0BF2               	decfsz	??_LCD_Cmd,f
  3256  06C7  2EC6               	goto	u1327
  3257  06C8  0BF3               	decfsz	??_LCD_Cmd+1,f
  3258  06C9  2EC6               	goto	u1327
  3259                           
  3260                           ;LCD_8bits.c: 26:     PORTD = comando;
  3261  06CA  0874               	movf	LCD_Cmd@comando,w
  3262  06CB  1283               	bcf	3,5	;RP0=0, select bank0
  3263  06CC  1303               	bcf	3,6	;RP1=0, select bank0
  3264  06CD  0088               	movwf	8	;volatile
  3265                           
  3266                           ;LCD_8bits.c: 27:     _delay((unsigned long)((5)*(4000000/4000.0)));
  3267  06CE  3007               	movlw	7
  3268  06CF  00F3               	movwf	??_LCD_Cmd+1
  3269  06D0  307D               	movlw	125
  3270  06D1  00F2               	movwf	??_LCD_Cmd
  3271  06D2                     u1337:	
  3272  06D2  0BF2               	decfsz	??_LCD_Cmd,f
  3273  06D3  2ED2               	goto	u1337
  3274  06D4  0BF3               	decfsz	??_LCD_Cmd+1,f
  3275  06D5  2ED2               	goto	u1337
  3276                           
  3277                           ;LCD_8bits.c: 28:     PORTCbits.RC1 = 0;
  3278  06D6  1283               	bcf	3,5	;RP0=0, select bank0
  3279  06D7  1303               	bcf	3,6	;RP1=0, select bank0
  3280  06D8  1087               	bcf	7,1	;volatile
  3281                           
  3282                           ;LCD_8bits.c: 29:     _delay((unsigned long)((5)*(4000000/4000.0)));
  3283  06D9  3007               	movlw	7
  3284  06DA  00F3               	movwf	??_LCD_Cmd+1
  3285  06DB  307D               	movlw	125
  3286  06DC  00F2               	movwf	??_LCD_Cmd
  3287  06DD                     u1347:	
  3288  06DD  0BF2               	decfsz	??_LCD_Cmd,f
  3289  06DE  2EDD               	goto	u1347
  3290  06DF  0BF3               	decfsz	??_LCD_Cmd+1,f
  3291  06E0  2EDD               	goto	u1347
  3292  06E1  0008               	return
  3293  06E2                     __end_of_LCD_Cmd:	
  3294                           
  3295                           	psect	text15
  3296  0751                     __ptext15:	
  3297 ;; *************** function _AnalogRead_8 *****************
  3298 ;; Defined at:
  3299 ;;		line 97 in file "ADC.c"
  3300 ;; Parameters:    Size  Location     Type
  3301 ;;  just            1    wreg     unsigned char 
  3302 ;; Auto vars:     Size  Location     Type
  3303 ;;  just            1    4[COMMON] unsigned char 
  3304 ;;  conversion      1    5[COMMON] unsigned char 
  3305 ;; Return value:  Size  Location     Type
  3306 ;;                  1    wreg      unsigned char 
  3307 ;; Registers used:
  3308 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3309 ;; Tracked objects:
  3310 ;;		On entry : 0/0
  3311 ;;		On exit  : 0/0
  3312 ;;		Unchanged: 0/0
  3313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3314 ;;      Params:         0       0       0       0       0
  3315 ;;      Locals:         2       0       0       0       0
  3316 ;;      Temps:          2       0       0       0       0
  3317 ;;      Totals:         4       0       0       0       0
  3318 ;;Total ram usage:        4 bytes
  3319 ;; Hardware stack levels used:    1
  3320 ;; Hardware stack levels required when called:    1
  3321 ;; This function calls:
  3322 ;;		Nothing
  3323 ;; This function is called by:
  3324 ;;		_main
  3325 ;; This function uses a non-reentrant model
  3326 ;;
  3327                           
  3328                           
  3329                           ;psect for function _AnalogRead_8
  3330  0751                     _AnalogRead_8:	
  3331                           
  3332                           ;incstack = 0
  3333                           ; Regs used in _AnalogRead_8: [wreg-fsr0h+status,2+status,0]
  3334                           ;AnalogRead_8@just stored from wreg
  3335  0751  00F4               	movwf	AnalogRead_8@just
  3336                           
  3337                           ;ADC.c: 99:     switch (just){
  3338  0752  2F5C               	goto	l1835
  3339  0753                     l1829:	
  3340                           
  3341                           ;ADC.c: 101:             conversion = ADRESH;
  3342  0753  1283               	bcf	3,5	;RP0=0, select bank0
  3343  0754  2F56               	goto	L11
  3344  0755                     l1831:	
  3345                           ;ADC.c: 102:             break;
  3346                           
  3347                           
  3348                           ;ADC.c: 104:             conversion = ADRESL;
  3349  0755  1683               	bsf	3,5	;RP0=1, select bank1
  3350  0756                     L11:	
  3351  0756  1303               	bcf	3,6	;RP1=0, select bank1
  3352  0757  081E               	movf	30,w	;volatile
  3353  0758  00F2               	movwf	??_AnalogRead_8
  3354  0759  0872               	movf	??_AnalogRead_8,w
  3355  075A  00F5               	movwf	AnalogRead_8@conversion
  3356                           
  3357                           ;ADC.c: 105:             break;
  3358  075B  2F6C               	goto	l1837
  3359  075C                     l1835:	
  3360  075C  0874               	movf	AnalogRead_8@just,w
  3361  075D  00F2               	movwf	??_AnalogRead_8
  3362  075E  01F3               	clrf	??_AnalogRead_8+1
  3363                           
  3364                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3365                           ; Switch size 1, requested type "simple"
  3366                           ; Number of cases is 1, Range of values is 0 to 0
  3367                           ; switch strategies available:
  3368                           ; Name         Instructions Cycles
  3369                           ; simple_byte            4     3 (average)
  3370                           ; direct_byte           11     8 (fixed)
  3371                           ; jumptable            260     6 (fixed)
  3372                           ;	Chosen strategy is simple_byte
  3373  075F  0873               	movf	??_AnalogRead_8+1,w
  3374  0760  3A00               	xorlw	0	; case 0
  3375  0761  1903               	skipnz
  3376  0762  2F64               	goto	l2727
  3377  0763  2F53               	goto	l1829
  3378  0764                     l2727:	
  3379                           
  3380                           ; Switch size 1, requested type "simple"
  3381                           ; Number of cases is 2, Range of values is 72 to 76
  3382                           ; switch strategies available:
  3383                           ; Name         Instructions Cycles
  3384                           ; simple_byte            7     4 (average)
  3385                           ; direct_byte           26    11 (fixed)
  3386                           ; jumptable            263     9 (fixed)
  3387                           ;	Chosen strategy is simple_byte
  3388  0764  0872               	movf	??_AnalogRead_8,w
  3389  0765  3A48               	xorlw	72	; case 72
  3390  0766  1903               	skipnz
  3391  0767  2F53               	goto	l1829
  3392  0768  3A04               	xorlw	4	; case 76
  3393  0769  1903               	skipnz
  3394  076A  2F55               	goto	l1831
  3395  076B  2F53               	goto	l1829
  3396  076C                     l1837:	
  3397                           
  3398                           ;ADC.c: 109:     return (conversion);
  3399  076C  0875               	movf	AnalogRead_8@conversion,w
  3400  076D  0008               	return
  3401  076E                     __end_of_AnalogRead_8:	
  3402                           
  3403                           	psect	text16
  3404  01DE                     __ptext16:	
  3405 ;; *************** function _ADConfig *****************
  3406 ;; Defined at:
  3407 ;;		line 16 in file "ADC.c"
  3408 ;; Parameters:    Size  Location     Type
  3409 ;;  oscFreq         1    wreg     unsigned char 
  3410 ;;  canal           1    2[COMMON] unsigned char 
  3411 ;;  justificado     1    3[COMMON] unsigned char 
  3412 ;; Auto vars:     Size  Location     Type
  3413 ;;  oscFreq         1    6[COMMON] unsigned char 
  3414 ;; Return value:  Size  Location     Type
  3415 ;;                  1    wreg      void 
  3416 ;; Registers used:
  3417 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3418 ;; Tracked objects:
  3419 ;;		On entry : 0/0
  3420 ;;		On exit  : 0/0
  3421 ;;		Unchanged: 0/0
  3422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3423 ;;      Params:         2       0       0       0       0
  3424 ;;      Locals:         1       0       0       0       0
  3425 ;;      Temps:          2       0       0       0       0
  3426 ;;      Totals:         5       0       0       0       0
  3427 ;;Total ram usage:        5 bytes
  3428 ;; Hardware stack levels used:    1
  3429 ;; Hardware stack levels required when called:    1
  3430 ;; This function calls:
  3431 ;;		Nothing
  3432 ;; This function is called by:
  3433 ;;		_main
  3434 ;; This function uses a non-reentrant model
  3435 ;;
  3436                           
  3437                           
  3438                           ;psect for function _ADConfig
  3439  01DE                     _ADConfig:	
  3440                           
  3441                           ;incstack = 0
  3442                           ; Regs used in _ADConfig: [wreg-fsr0h+status,2+status,0]
  3443                           ;ADConfig@oscFreq stored from wreg
  3444  01DE  00F6               	movwf	ADConfig@oscFreq
  3445                           
  3446                           ;ADC.c: 17:     switch(oscFreq){
  3447  01DF  29F8               	goto	l1737
  3448  01E0                     l1727:	
  3449                           
  3450                           ;ADC.c: 19:             ADCON0bits.ADCS = 0b00;
  3451  01E0  303F               	movlw	-193
  3452  01E1  1283               	bcf	3,5	;RP0=0, select bank0
  3453  01E2  1303               	bcf	3,6	;RP1=0, select bank0
  3454  01E3  059F               	andwf	31,f	;volatile
  3455                           
  3456                           ;ADC.c: 20:             break;
  3457  01E4  2A17               	goto	l1739
  3458  01E5                     l1729:	
  3459  01E5  29F1               	goto	l1735
  3460  01E6                     l1731:	
  3461                           ;ADC.c: 23:             break;
  3462                           
  3463                           ;ADC.c: 22:             ADCON0bits.ADCS = 0b01;
  3464                           
  3465                           
  3466                           ;ADC.c: 25:             ADCON0bits.ADCS = 0b10;
  3467  01E6  1283               	bcf	3,5	;RP0=0, select bank0
  3468  01E7  1303               	bcf	3,6	;RP1=0, select bank0
  3469  01E8  081F               	movf	31,w	;volatile
  3470  01E9  393F               	andlw	-193
  3471  01EA  3880               	iorlw	128
  3472  01EB  29F6               	goto	L13
  3473  01EC                     l1733:	
  3474                           ;ADC.c: 26:             break;
  3475                           
  3476                           
  3477                           ;ADC.c: 28:             ADCON0bits.ADCS = 0b11;
  3478  01EC  30C0               	movlw	192
  3479  01ED  1283               	bcf	3,5	;RP0=0, select bank0
  3480  01EE  1303               	bcf	3,6	;RP1=0, select bank0
  3481  01EF  049F               	iorwf	31,f	;volatile
  3482                           
  3483                           ;ADC.c: 29:             break;
  3484  01F0  2A17               	goto	l1739
  3485  01F1                     l1735:	
  3486                           
  3487                           ;ADC.c: 31:             ADCON0bits.ADCS = 0b01;
  3488  01F1  1283               	bcf	3,5	;RP0=0, select bank0
  3489  01F2  1303               	bcf	3,6	;RP1=0, select bank0
  3490  01F3  081F               	movf	31,w	;volatile
  3491  01F4  393F               	andlw	-193
  3492  01F5  3840               	iorlw	64
  3493  01F6                     L13:	
  3494  01F6  009F               	movwf	31	;volatile
  3495                           
  3496                           ;ADC.c: 32:     }
  3497  01F7  2A17               	goto	l1739
  3498  01F8                     l1737:	
  3499  01F8  0876               	movf	ADConfig@oscFreq,w
  3500  01F9  00F4               	movwf	??_ADConfig
  3501  01FA  01F5               	clrf	??_ADConfig+1
  3502                           
  3503                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3504                           ; Switch size 1, requested type "simple"
  3505                           ; Number of cases is 1, Range of values is 0 to 0
  3506                           ; switch strategies available:
  3507                           ; Name         Instructions Cycles
  3508                           ; simple_byte            4     3 (average)
  3509                           ; direct_byte           11     8 (fixed)
  3510                           ; jumptable            260     6 (fixed)
  3511                           ;	Chosen strategy is simple_byte
  3512  01FB  0875               	movf	??_ADConfig+1,w
  3513  01FC  3A00               	xorlw	0	; case 0
  3514  01FD  1903               	skipnz
  3515  01FE  2A00               	goto	l2729
  3516  01FF  29F1               	goto	l1735
  3517  0200                     l2729:	
  3518                           
  3519                           ; Switch size 1, requested type "simple"
  3520                           ; Number of cases is 4, Range of values is 1 to 20
  3521                           ; switch strategies available:
  3522                           ; Name         Instructions Cycles
  3523                           ; simple_byte           13     7 (average)
  3524                           ; direct_byte           71    11 (fixed)
  3525                           ; jumptable            263     9 (fixed)
  3526                           ;	Chosen strategy is simple_byte
  3527  0200  0874               	movf	??_ADConfig,w
  3528  0201  3A01               	xorlw	1	; case 1
  3529  0202  1903               	skipnz
  3530  0203  29E0               	goto	l1727
  3531  0204  3A05               	xorlw	5	; case 4
  3532  0205  1903               	skipnz
  3533  0206  29E5               	goto	l1729
  3534  0207  3A0C               	xorlw	12	; case 8
  3535  0208  1903               	skipnz
  3536  0209  29E6               	goto	l1731
  3537  020A  3A1C               	xorlw	28	; case 20
  3538  020B  1903               	skipnz
  3539  020C  29EC               	goto	l1733
  3540  020D  29F1               	goto	l1735
  3541  020E                     l209:	
  3542                           ;ADC.c: 34:         case 'H':
  3543                           
  3544  020E  2A13               	goto	l212
  3545  020F                     l211:	
  3546                           ;ADC.c: 37:         case 'L':
  3547                           
  3548                           ;ADC.c: 36:             break;
  3549                           
  3550                           ;ADC.c: 35:             ADCON1bits.ADFM = 0;
  3551                           
  3552                           
  3553                           ;ADC.c: 38:             ADCON1bits.ADFM = 1;
  3554  020F  1683               	bsf	3,5	;RP0=1, select bank1
  3555  0210  1303               	bcf	3,6	;RP1=0, select bank1
  3556  0211  179F               	bsf	31,7	;volatile
  3557                           
  3558                           ;ADC.c: 39:             break;
  3559  0212  2A72               	goto	l1759
  3560  0213                     l212:	
  3561                           ;ADC.c: 40:         default:
  3562                           
  3563                           
  3564                           ;ADC.c: 41:             ADCON1bits.ADFM = 0;
  3565  0213  1683               	bsf	3,5	;RP0=1, select bank1
  3566  0214  1303               	bcf	3,6	;RP1=0, select bank1
  3567  0215  139F               	bcf	31,7	;volatile
  3568                           
  3569                           ;ADC.c: 42:     }
  3570  0216  2A72               	goto	l1759
  3571  0217                     l1739:	
  3572  0217  0873               	movf	ADConfig@justificado,w
  3573  0218  00F4               	movwf	??_ADConfig
  3574  0219  01F5               	clrf	??_ADConfig+1
  3575                           
  3576                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3577                           ; Switch size 1, requested type "simple"
  3578                           ; Number of cases is 1, Range of values is 0 to 0
  3579                           ; switch strategies available:
  3580                           ; Name         Instructions Cycles
  3581                           ; simple_byte            4     3 (average)
  3582                           ; direct_byte           11     8 (fixed)
  3583                           ; jumptable            260     6 (fixed)
  3584                           ;	Chosen strategy is simple_byte
  3585  021A  0875               	movf	??_ADConfig+1,w
  3586  021B  3A00               	xorlw	0	; case 0
  3587  021C  1903               	skipnz
  3588  021D  2A1F               	goto	l2731
  3589  021E  2A13               	goto	l212
  3590  021F                     l2731:	
  3591                           
  3592                           ; Switch size 1, requested type "simple"
  3593                           ; Number of cases is 2, Range of values is 72 to 76
  3594                           ; switch strategies available:
  3595                           ; Name         Instructions Cycles
  3596                           ; simple_byte            7     4 (average)
  3597                           ; direct_byte           26    11 (fixed)
  3598                           ; jumptable            263     9 (fixed)
  3599                           ;	Chosen strategy is simple_byte
  3600  021F  0874               	movf	??_ADConfig,w
  3601  0220  3A48               	xorlw	72	; case 72
  3602  0221  1903               	skipnz
  3603  0222  2A0E               	goto	l209
  3604  0223  3A04               	xorlw	4	; case 76
  3605  0224  1903               	skipnz
  3606  0225  2A0F               	goto	l211
  3607  0226  2A13               	goto	l212
  3608  0227                     l214:	
  3609                           ;ADC.c: 44:         case 0:
  3610                           
  3611                           
  3612                           ;ADC.c: 45:             TRISAbits.TRISA0 = 1;
  3613  0227  1405               	bsf	5,0	;volatile
  3614                           
  3615                           ;ADC.c: 46:             ANSELbits.ANS0 = 1;
  3616  0228  1683               	bsf	3,5	;RP0=1, select bank3
  3617  0229  1703               	bsf	3,6	;RP1=1, select bank3
  3618  022A  1408               	bsf	8,0	;volatile
  3619                           
  3620                           ;ADC.c: 47:             ADCON0bits.CHS = 0;
  3621  022B  30C3               	movlw	-61
  3622  022C  1283               	bcf	3,5	;RP0=0, select bank0
  3623  022D  1303               	bcf	3,6	;RP1=0, select bank0
  3624  022E  059F               	andwf	31,f	;volatile
  3625                           
  3626                           ;ADC.c: 48:             break;
  3627  022F  2A94               	goto	l215
  3628  0230                     l216:	
  3629                           ;ADC.c: 49:         case 1:
  3630                           
  3631                           
  3632                           ;ADC.c: 50:             TRISAbits.TRISA1 = 1;
  3633  0230  1485               	bsf	5,1	;volatile
  3634                           
  3635                           ;ADC.c: 51:             ANSELbits.ANS1 = 1;
  3636  0231  1683               	bsf	3,5	;RP0=1, select bank3
  3637  0232  1703               	bsf	3,6	;RP1=1, select bank3
  3638  0233  1488               	bsf	8,1	;volatile
  3639                           
  3640                           ;ADC.c: 52:             ADCON0bits.CHS = 1;
  3641  0234  1283               	bcf	3,5	;RP0=0, select bank0
  3642  0235  1303               	bcf	3,6	;RP1=0, select bank0
  3643  0236  081F               	movf	31,w	;volatile
  3644  0237  39C3               	andlw	-61
  3645  0238  3804               	iorlw	4
  3646  0239  2A70               	goto	L19
  3647  023A                     l217:	
  3648                           ;ADC.c: 54:         case 2:
  3649                           
  3650                           ;ADC.c: 53:             break;
  3651                           
  3652                           
  3653                           ;ADC.c: 55:             TRISAbits.TRISA2 = 1;
  3654  023A  1505               	bsf	5,2	;volatile
  3655                           
  3656                           ;ADC.c: 56:             ANSELbits.ANS2 = 1;
  3657  023B  1683               	bsf	3,5	;RP0=1, select bank3
  3658  023C  1703               	bsf	3,6	;RP1=1, select bank3
  3659  023D  1508               	bsf	8,2	;volatile
  3660                           
  3661                           ;ADC.c: 57:             ADCON0bits.CHS = 2;
  3662  023E  1283               	bcf	3,5	;RP0=0, select bank0
  3663  023F  1303               	bcf	3,6	;RP1=0, select bank0
  3664  0240  081F               	movf	31,w	;volatile
  3665  0241  39C3               	andlw	-61
  3666  0242  3808               	iorlw	8
  3667  0243  2A70               	goto	L19
  3668  0244                     l218:	
  3669                           ;ADC.c: 59:         case 3:
  3670                           
  3671                           ;ADC.c: 58:             break;
  3672                           
  3673                           
  3674                           ;ADC.c: 60:             TRISAbits.TRISA3 = 1;
  3675  0244  1585               	bsf	5,3	;volatile
  3676                           
  3677                           ;ADC.c: 61:             ANSELbits.ANS3 = 1;
  3678  0245  1683               	bsf	3,5	;RP0=1, select bank3
  3679  0246  1703               	bsf	3,6	;RP1=1, select bank3
  3680  0247  1588               	bsf	8,3	;volatile
  3681  0248  2A4D               	goto	L20
  3682  0249                     l219:	
  3683                           ;ADC.c: 64:         case 4:
  3684                           
  3685                           ;ADC.c: 63:             break;
  3686                           
  3687                           ;ADC.c: 62:             ADCON0bits.CHS = 3;
  3688                           
  3689                           
  3690                           ;ADC.c: 65:             TRISAbits.TRISA5 = 1;
  3691  0249  1685               	bsf	5,5	;volatile
  3692                           
  3693                           ;ADC.c: 66:             ANSELbits.ANS4 = 1;
  3694  024A  1683               	bsf	3,5	;RP0=1, select bank3
  3695  024B  1703               	bsf	3,6	;RP1=1, select bank3
  3696  024C  1608               	bsf	8,4	;volatile
  3697  024D                     L20:	
  3698                           
  3699                           ;ADC.c: 67:             ADCON0bits.CHS = 3;
  3700  024D  1283               	bcf	3,5	;RP0=0, select bank0
  3701  024E  1303               	bcf	3,6	;RP1=0, select bank0
  3702  024F  081F               	movf	31,w	;volatile
  3703  0250  39C3               	andlw	-61
  3704  0251  380C               	iorlw	12
  3705  0252  2A70               	goto	L19
  3706  0253                     l220:	
  3707                           ;ADC.c: 69:         case 5:
  3708                           
  3709                           ;ADC.c: 68:             break;
  3710                           
  3711                           
  3712                           ;ADC.c: 70:             TRISEbits.TRISE0 = 1;
  3713  0253  1409               	bsf	9,0	;volatile
  3714                           
  3715                           ;ADC.c: 71:             ANSELbits.ANS5 = 1;
  3716  0254  1683               	bsf	3,5	;RP0=1, select bank3
  3717  0255  1703               	bsf	3,6	;RP1=1, select bank3
  3718  0256  1688               	bsf	8,5	;volatile
  3719                           
  3720                           ;ADC.c: 72:             ADCON0bits.CHS = 5;
  3721  0257  1283               	bcf	3,5	;RP0=0, select bank0
  3722  0258  1303               	bcf	3,6	;RP1=0, select bank0
  3723  0259  081F               	movf	31,w	;volatile
  3724  025A  39C3               	andlw	-61
  3725  025B  3814               	iorlw	20
  3726  025C  2A70               	goto	L19
  3727  025D                     l221:	
  3728                           ;ADC.c: 74:         case 6:
  3729                           
  3730                           ;ADC.c: 73:             break;
  3731                           
  3732                           
  3733                           ;ADC.c: 75:             TRISEbits.TRISE1 = 1;
  3734  025D  1489               	bsf	9,1	;volatile
  3735                           
  3736                           ;ADC.c: 76:             ANSELbits.ANS6 = 1;
  3737  025E  1683               	bsf	3,5	;RP0=1, select bank3
  3738  025F  1703               	bsf	3,6	;RP1=1, select bank3
  3739  0260  1708               	bsf	8,6	;volatile
  3740                           
  3741                           ;ADC.c: 77:             ADCON0bits.CHS = 6;
  3742  0261  1283               	bcf	3,5	;RP0=0, select bank0
  3743  0262  1303               	bcf	3,6	;RP1=0, select bank0
  3744  0263  081F               	movf	31,w	;volatile
  3745  0264  39C3               	andlw	-61
  3746  0265  3818               	iorlw	24
  3747  0266  2A70               	goto	L19
  3748  0267                     l222:	
  3749                           ;ADC.c: 79:         case 7:
  3750                           
  3751                           ;ADC.c: 78:             break;
  3752                           
  3753                           
  3754                           ;ADC.c: 80:             TRISEbits.TRISE2 = 1;
  3755  0267  1509               	bsf	9,2	;volatile
  3756                           
  3757                           ;ADC.c: 81:             ANSELbits.ANS7 = 1;
  3758  0268  1683               	bsf	3,5	;RP0=1, select bank3
  3759  0269  1703               	bsf	3,6	;RP1=1, select bank3
  3760  026A  1788               	bsf	8,7	;volatile
  3761                           
  3762                           ;ADC.c: 82:             ADCON0bits.CHS = 7;
  3763  026B  1283               	bcf	3,5	;RP0=0, select bank0
  3764  026C  1303               	bcf	3,6	;RP1=0, select bank0
  3765  026D  081F               	movf	31,w	;volatile
  3766  026E  39C3               	andlw	-61
  3767  026F  381C               	iorlw	28
  3768  0270                     L19:	
  3769  0270  009F               	movwf	31	;volatile
  3770                           
  3771                           ;ADC.c: 83:             break;
  3772  0271  2A94               	goto	l215
  3773  0272                     l1759:	
  3774  0272  0872               	movf	ADConfig@canal,w
  3775  0273  00F4               	movwf	??_ADConfig
  3776  0274  01F5               	clrf	??_ADConfig+1
  3777                           
  3778                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3779                           ; Switch size 1, requested type "simple"
  3780                           ; Number of cases is 1, Range of values is 0 to 0
  3781                           ; switch strategies available:
  3782                           ; Name         Instructions Cycles
  3783                           ; simple_byte            4     3 (average)
  3784                           ; direct_byte           11     8 (fixed)
  3785                           ; jumptable            260     6 (fixed)
  3786                           ;	Chosen strategy is simple_byte
  3787  0275  0875               	movf	??_ADConfig+1,w
  3788  0276  3A00               	xorlw	0	; case 0
  3789  0277  1903               	skipnz
  3790  0278  2A7A               	goto	l2733
  3791  0279  2A94               	goto	l215
  3792  027A                     l2733:	
  3793                           
  3794                           ; Switch size 1, requested type "simple"
  3795                           ; Number of cases is 8, Range of values is 0 to 7
  3796                           ; switch strategies available:
  3797                           ; Name         Instructions Cycles
  3798                           ; simple_byte           25    13 (average)
  3799                           ; direct_byte           32     8 (fixed)
  3800                           ; jumptable            260     6 (fixed)
  3801                           ;	Chosen strategy is simple_byte
  3802  027A  0874               	movf	??_ADConfig,w
  3803  027B  3A00               	xorlw	0	; case 0
  3804  027C  1903               	skipnz
  3805  027D  2A27               	goto	l214
  3806  027E  3A01               	xorlw	1	; case 1
  3807  027F  1903               	skipnz
  3808  0280  2A30               	goto	l216
  3809  0281  3A03               	xorlw	3	; case 2
  3810  0282  1903               	skipnz
  3811  0283  2A3A               	goto	l217
  3812  0284  3A01               	xorlw	1	; case 3
  3813  0285  1903               	skipnz
  3814  0286  2A44               	goto	l218
  3815  0287  3A07               	xorlw	7	; case 4
  3816  0288  1903               	skipnz
  3817  0289  2A49               	goto	l219
  3818  028A  3A01               	xorlw	1	; case 5
  3819  028B  1903               	skipnz
  3820  028C  2A53               	goto	l220
  3821  028D  3A03               	xorlw	3	; case 6
  3822  028E  1903               	skipnz
  3823  028F  2A5D               	goto	l221
  3824  0290  3A01               	xorlw	1	; case 7
  3825  0291  1903               	skipnz
  3826  0292  2A67               	goto	l222
  3827  0293  2A94               	goto	l215
  3828  0294                     l215:	
  3829                           
  3830                           ;ADC.c: 88:     ADCON0bits.ADON = 1;
  3831  0294  1283               	bcf	3,5	;RP0=0, select bank0
  3832  0295  141F               	bsf	31,0	;volatile
  3833                           
  3834                           ;ADC.c: 89:     PIR1bits.ADIF = 0;
  3835  0296  130C               	bcf	12,6	;volatile
  3836                           
  3837                           ;ADC.c: 90:     PIE1bits.ADIE = 1;
  3838  0297  1683               	bsf	3,5	;RP0=1, select bank1
  3839  0298  1303               	bcf	3,6	;RP1=0, select bank1
  3840  0299  170C               	bsf	12,6	;volatile
  3841                           
  3842                           ;ADC.c: 91:     INTCONbits.PEIE = 1;
  3843  029A  170B               	bsf	11,6	;volatile
  3844                           
  3845                           ;ADC.c: 92:     INTCONbits.GIE = 1;
  3846  029B  178B               	bsf	11,7	;volatile
  3847                           
  3848                           ;ADC.c: 93:     _delay((unsigned long)((30)*(4000000/4000.0)));
  3849  029C  3027               	movlw	39
  3850  029D  00F5               	movwf	??_ADConfig+1
  3851  029E  30F5               	movlw	245
  3852  029F  00F4               	movwf	??_ADConfig
  3853  02A0                     u1357:	
  3854  02A0  0BF4               	decfsz	??_ADConfig,f
  3855  02A1  2AA0               	goto	u1357
  3856  02A2  0BF5               	decfsz	??_ADConfig+1,f
  3857  02A3  2AA0               	goto	u1357
  3858                           
  3859                           ;ADC.c: 94:     ADCON0bits.GO_nDONE = 1;
  3860  02A4  1283               	bcf	3,5	;RP0=0, select bank0
  3861  02A5  1303               	bcf	3,6	;RP1=0, select bank0
  3862  02A6  149F               	bsf	31,1	;volatile
  3863  02A7  0008               	return
  3864  02A8                     __end_of_ADConfig:	
  3865                           
  3866                           	psect	text17
  3867  049C                     __ptext17:	
  3868 ;; *************** function _ADC_CHselect *****************
  3869 ;; Defined at:
  3870 ;;		line 121 in file "ADC.c"
  3871 ;; Parameters:    Size  Location     Type
  3872 ;;  canal           1    wreg     unsigned char 
  3873 ;; Auto vars:     Size  Location     Type
  3874 ;;  canal           1    4[COMMON] unsigned char 
  3875 ;; Return value:  Size  Location     Type
  3876 ;;                  1    wreg      void 
  3877 ;; Registers used:
  3878 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3879 ;; Tracked objects:
  3880 ;;		On entry : 0/0
  3881 ;;		On exit  : 0/0
  3882 ;;		Unchanged: 0/0
  3883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3884 ;;      Params:         0       0       0       0       0
  3885 ;;      Locals:         1       0       0       0       0
  3886 ;;      Temps:          2       0       0       0       0
  3887 ;;      Totals:         3       0       0       0       0
  3888 ;;Total ram usage:        3 bytes
  3889 ;; Hardware stack levels used:    1
  3890 ;; Hardware stack levels required when called:    1
  3891 ;; This function calls:
  3892 ;;		Nothing
  3893 ;; This function is called by:
  3894 ;;		_main
  3895 ;; This function uses a non-reentrant model
  3896 ;;
  3897                           
  3898                           
  3899                           ;psect for function _ADC_CHselect
  3900  049C                     _ADC_CHselect:	
  3901                           
  3902                           ;incstack = 0
  3903                           ; Regs used in _ADC_CHselect: [wreg-fsr0h+status,2+status,0]
  3904                           ;ADC_CHselect@canal stored from wreg
  3905  049C  00F4               	movwf	ADC_CHselect@canal
  3906                           
  3907                           ;ADC.c: 122:     switch (canal){
  3908  049D  2D04               	goto	l1865
  3909  049E                     l238:	
  3910                           ;ADC.c: 123:         case 0:
  3911                           
  3912                           
  3913                           ;ADC.c: 124:             TRISAbits.TRISA0 = 1;
  3914  049E  1683               	bsf	3,5	;RP0=1, select bank1
  3915  049F  1303               	bcf	3,6	;RP1=0, select bank1
  3916  04A0  1405               	bsf	5,0	;volatile
  3917                           
  3918                           ;ADC.c: 125:             ANSELbits.ANS0 = 1;
  3919  04A1  1683               	bsf	3,5	;RP0=1, select bank3
  3920  04A2  1703               	bsf	3,6	;RP1=1, select bank3
  3921  04A3  1408               	bsf	8,0	;volatile
  3922                           
  3923                           ;ADC.c: 126:             ADCON0bits.CHS = 0;
  3924  04A4  30C3               	movlw	-61
  3925  04A5  1283               	bcf	3,5	;RP0=0, select bank0
  3926  04A6  1303               	bcf	3,6	;RP1=0, select bank0
  3927  04A7  059F               	andwf	31,f	;volatile
  3928                           
  3929                           ;ADC.c: 127:             break;
  3930  04A8  0008               	return
  3931  04A9                     l240:	
  3932                           ;ADC.c: 128:         case 1:
  3933                           
  3934                           
  3935                           ;ADC.c: 129:             TRISAbits.TRISA1 = 1;
  3936  04A9  1683               	bsf	3,5	;RP0=1, select bank1
  3937  04AA  1303               	bcf	3,6	;RP1=0, select bank1
  3938  04AB  1485               	bsf	5,1	;volatile
  3939                           
  3940                           ;ADC.c: 130:             ANSELbits.ANS1 = 1;
  3941  04AC  1683               	bsf	3,5	;RP0=1, select bank3
  3942  04AD  1703               	bsf	3,6	;RP1=1, select bank3
  3943  04AE  1488               	bsf	8,1	;volatile
  3944                           
  3945                           ;ADC.c: 131:             ADCON0bits.CHS = 1;
  3946  04AF  1283               	bcf	3,5	;RP0=0, select bank0
  3947  04B0  1303               	bcf	3,6	;RP1=0, select bank0
  3948  04B1  081F               	movf	31,w	;volatile
  3949  04B2  39C3               	andlw	-61
  3950  04B3  3804               	iorlw	4
  3951  04B4  009F               	movwf	31	;volatile
  3952                           
  3953                           ;ADC.c: 132:             break;
  3954  04B5  0008               	return
  3955  04B6                     l241:	
  3956                           ;ADC.c: 133:         case 2:
  3957                           
  3958                           
  3959                           ;ADC.c: 134:             TRISAbits.TRISA2 = 1;
  3960  04B6  1683               	bsf	3,5	;RP0=1, select bank1
  3961  04B7  1303               	bcf	3,6	;RP1=0, select bank1
  3962  04B8  1505               	bsf	5,2	;volatile
  3963                           
  3964                           ;ADC.c: 135:             ANSELbits.ANS2 = 1;
  3965  04B9  1683               	bsf	3,5	;RP0=1, select bank3
  3966  04BA  1703               	bsf	3,6	;RP1=1, select bank3
  3967  04BB  1508               	bsf	8,2	;volatile
  3968                           
  3969                           ;ADC.c: 136:             ADCON0bits.CHS = 2;
  3970  04BC  1283               	bcf	3,5	;RP0=0, select bank0
  3971  04BD  1303               	bcf	3,6	;RP1=0, select bank0
  3972  04BE  081F               	movf	31,w	;volatile
  3973  04BF  39C3               	andlw	-61
  3974  04C0  3808               	iorlw	8
  3975  04C1  009F               	movwf	31	;volatile
  3976                           
  3977                           ;ADC.c: 137:             break;
  3978  04C2  0008               	return
  3979  04C3                     l242:	
  3980                           ;ADC.c: 138:         case 3:
  3981                           
  3982                           
  3983                           ;ADC.c: 139:             TRISAbits.TRISA3 = 1;
  3984  04C3  1683               	bsf	3,5	;RP0=1, select bank1
  3985  04C4  1303               	bcf	3,6	;RP1=0, select bank1
  3986  04C5  1585               	bsf	5,3	;volatile
  3987                           
  3988                           ;ADC.c: 140:             ANSELbits.ANS3 = 1;
  3989  04C6  1683               	bsf	3,5	;RP0=1, select bank3
  3990  04C7  1703               	bsf	3,6	;RP1=1, select bank3
  3991  04C8  1588               	bsf	8,3	;volatile
  3992                           
  3993                           ;ADC.c: 141:             ADCON0bits.CHS = 3;
  3994  04C9  1283               	bcf	3,5	;RP0=0, select bank0
  3995  04CA  1303               	bcf	3,6	;RP1=0, select bank0
  3996  04CB  081F               	movf	31,w	;volatile
  3997  04CC  39C3               	andlw	-61
  3998  04CD  380C               	iorlw	12
  3999  04CE  009F               	movwf	31	;volatile
  4000                           
  4001                           ;ADC.c: 142:             break;
  4002  04CF  0008               	return
  4003  04D0                     l243:	
  4004                           ;ADC.c: 143:         case 4:
  4005                           
  4006                           
  4007                           ;ADC.c: 144:             TRISAbits.TRISA5 = 1;
  4008  04D0  1683               	bsf	3,5	;RP0=1, select bank1
  4009  04D1  1303               	bcf	3,6	;RP1=0, select bank1
  4010  04D2  1685               	bsf	5,5	;volatile
  4011                           
  4012                           ;ADC.c: 145:             ANSELbits.ANS4 = 1;
  4013  04D3  1683               	bsf	3,5	;RP0=1, select bank3
  4014  04D4  1703               	bsf	3,6	;RP1=1, select bank3
  4015  04D5  1608               	bsf	8,4	;volatile
  4016                           
  4017                           ;ADC.c: 146:             ADCON0bits.CHS = 3;
  4018  04D6  1283               	bcf	3,5	;RP0=0, select bank0
  4019  04D7  1303               	bcf	3,6	;RP1=0, select bank0
  4020  04D8  081F               	movf	31,w	;volatile
  4021  04D9  39C3               	andlw	-61
  4022  04DA  380C               	iorlw	12
  4023  04DB  009F               	movwf	31	;volatile
  4024                           
  4025                           ;ADC.c: 147:             break;
  4026  04DC  0008               	return
  4027  04DD                     l244:	
  4028                           ;ADC.c: 148:         case 5:
  4029                           
  4030                           
  4031                           ;ADC.c: 149:             TRISEbits.TRISE0 = 1;
  4032  04DD  1683               	bsf	3,5	;RP0=1, select bank1
  4033  04DE  1303               	bcf	3,6	;RP1=0, select bank1
  4034  04DF  1409               	bsf	9,0	;volatile
  4035                           
  4036                           ;ADC.c: 150:             ANSELbits.ANS5 = 1;
  4037  04E0  1683               	bsf	3,5	;RP0=1, select bank3
  4038  04E1  1703               	bsf	3,6	;RP1=1, select bank3
  4039  04E2  1688               	bsf	8,5	;volatile
  4040                           
  4041                           ;ADC.c: 151:             ADCON0bits.CHS = 5;
  4042  04E3  1283               	bcf	3,5	;RP0=0, select bank0
  4043  04E4  1303               	bcf	3,6	;RP1=0, select bank0
  4044  04E5  081F               	movf	31,w	;volatile
  4045  04E6  39C3               	andlw	-61
  4046  04E7  3814               	iorlw	20
  4047  04E8  009F               	movwf	31	;volatile
  4048                           
  4049                           ;ADC.c: 152:             break;
  4050  04E9  0008               	return
  4051  04EA                     l245:	
  4052                           ;ADC.c: 153:         case 6:
  4053                           
  4054                           
  4055                           ;ADC.c: 154:             TRISEbits.TRISE1 = 1;
  4056  04EA  1683               	bsf	3,5	;RP0=1, select bank1
  4057  04EB  1303               	bcf	3,6	;RP1=0, select bank1
  4058  04EC  1489               	bsf	9,1	;volatile
  4059                           
  4060                           ;ADC.c: 155:             ANSELbits.ANS6 = 1;
  4061  04ED  1683               	bsf	3,5	;RP0=1, select bank3
  4062  04EE  1703               	bsf	3,6	;RP1=1, select bank3
  4063  04EF  1708               	bsf	8,6	;volatile
  4064                           
  4065                           ;ADC.c: 156:             ADCON0bits.CHS = 6;
  4066  04F0  1283               	bcf	3,5	;RP0=0, select bank0
  4067  04F1  1303               	bcf	3,6	;RP1=0, select bank0
  4068  04F2  081F               	movf	31,w	;volatile
  4069  04F3  39C3               	andlw	-61
  4070  04F4  3818               	iorlw	24
  4071  04F5  009F               	movwf	31	;volatile
  4072                           
  4073                           ;ADC.c: 157:             break;
  4074  04F6  0008               	return
  4075  04F7                     l246:	
  4076                           ;ADC.c: 158:         case 7:
  4077                           
  4078                           
  4079                           ;ADC.c: 159:             TRISEbits.TRISE2 = 1;
  4080  04F7  1683               	bsf	3,5	;RP0=1, select bank1
  4081  04F8  1303               	bcf	3,6	;RP1=0, select bank1
  4082  04F9  1509               	bsf	9,2	;volatile
  4083                           
  4084                           ;ADC.c: 160:             ANSELbits.ANS7 = 1;
  4085  04FA  1683               	bsf	3,5	;RP0=1, select bank3
  4086  04FB  1703               	bsf	3,6	;RP1=1, select bank3
  4087  04FC  1788               	bsf	8,7	;volatile
  4088                           
  4089                           ;ADC.c: 161:             ADCON0bits.CHS = 7;
  4090  04FD  1283               	bcf	3,5	;RP0=0, select bank0
  4091  04FE  1303               	bcf	3,6	;RP1=0, select bank0
  4092  04FF  081F               	movf	31,w	;volatile
  4093  0500  39C3               	andlw	-61
  4094  0501  381C               	iorlw	28
  4095  0502  009F               	movwf	31	;volatile
  4096                           
  4097                           ;ADC.c: 162:             break;
  4098  0503  0008               	return
  4099  0504                     l1865:	
  4100  0504  0874               	movf	ADC_CHselect@canal,w
  4101  0505  00F2               	movwf	??_ADC_CHselect
  4102  0506  01F3               	clrf	??_ADC_CHselect+1
  4103                           
  4104                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4105                           ; Switch size 1, requested type "simple"
  4106                           ; Number of cases is 1, Range of values is 0 to 0
  4107                           ; switch strategies available:
  4108                           ; Name         Instructions Cycles
  4109                           ; simple_byte            4     3 (average)
  4110                           ; direct_byte           11     8 (fixed)
  4111                           ; jumptable            260     6 (fixed)
  4112                           ;	Chosen strategy is simple_byte
  4113  0507  0873               	movf	??_ADC_CHselect+1,w
  4114  0508  3A00               	xorlw	0	; case 0
  4115  0509  1903               	skipnz
  4116  050A  2D0C               	goto	l2735
  4117  050B  2D26               	goto	l247
  4118  050C                     l2735:	
  4119                           
  4120                           ; Switch size 1, requested type "simple"
  4121                           ; Number of cases is 8, Range of values is 0 to 7
  4122                           ; switch strategies available:
  4123                           ; Name         Instructions Cycles
  4124                           ; simple_byte           25    13 (average)
  4125                           ; direct_byte           32     8 (fixed)
  4126                           ; jumptable            260     6 (fixed)
  4127                           ;	Chosen strategy is simple_byte
  4128  050C  0872               	movf	??_ADC_CHselect,w
  4129  050D  3A00               	xorlw	0	; case 0
  4130  050E  1903               	skipnz
  4131  050F  2C9E               	goto	l238
  4132  0510  3A01               	xorlw	1	; case 1
  4133  0511  1903               	skipnz
  4134  0512  2CA9               	goto	l240
  4135  0513  3A03               	xorlw	3	; case 2
  4136  0514  1903               	skipnz
  4137  0515  2CB6               	goto	l241
  4138  0516  3A01               	xorlw	1	; case 3
  4139  0517  1903               	skipnz
  4140  0518  2CC3               	goto	l242
  4141  0519  3A07               	xorlw	7	; case 4
  4142  051A  1903               	skipnz
  4143  051B  2CD0               	goto	l243
  4144  051C  3A01               	xorlw	1	; case 5
  4145  051D  1903               	skipnz
  4146  051E  2CDD               	goto	l244
  4147  051F  3A03               	xorlw	3	; case 6
  4148  0520  1903               	skipnz
  4149  0521  2CEA               	goto	l245
  4150  0522  3A01               	xorlw	1	; case 7
  4151  0523  1903               	skipnz
  4152  0524  2CF7               	goto	l246
  4153  0525  2D26               	goto	l247
  4154  0526                     l247:	
  4155  0526  0008               	return
  4156  0527                     __end_of_ADC_CHselect:	
  4157                           
  4158                           	psect	text18
  4159  0783                     __ptext18:	
  4160 ;; *************** function _ISR_ADC *****************
  4161 ;; Defined at:
  4162 ;;		line 51 in file "main.c"
  4163 ;; Parameters:    Size  Location     Type
  4164 ;;		None
  4165 ;; Auto vars:     Size  Location     Type
  4166 ;;		None
  4167 ;; Return value:  Size  Location     Type
  4168 ;;                  1    wreg      void 
  4169 ;; Registers used:
  4170 ;;		None
  4171 ;; Tracked objects:
  4172 ;;		On entry : 0/0
  4173 ;;		On exit  : 0/0
  4174 ;;		Unchanged: 0/0
  4175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4176 ;;      Params:         0       0       0       0       0
  4177 ;;      Locals:         0       0       0       0       0
  4178 ;;      Temps:          2       0       0       0       0
  4179 ;;      Totals:         2       0       0       0       0
  4180 ;;Total ram usage:        2 bytes
  4181 ;; Hardware stack levels used:    1
  4182 ;; This function calls:
  4183 ;;		Nothing
  4184 ;; This function is called by:
  4185 ;;		Interrupt level 1
  4186 ;; This function uses a non-reentrant model
  4187 ;;
  4188                           
  4189                           
  4190                           ;psect for function _ISR_ADC
  4191  0783                     _ISR_ADC:	
  4192                           
  4193                           ;main.c: 52:     if (PIR1bits.ADIF && PIE1bits.ADIE){
  4194  0783  1283               	bcf	3,5	;RP0=0, select bank0
  4195  0784  1303               	bcf	3,6	;RP1=0, select bank0
  4196  0785  1F0C               	btfss	12,6	;volatile
  4197  0786  2F90               	goto	i1l68
  4198  0787  1683               	bsf	3,5	;RP0=1, select bank1
  4199  0788  1303               	bcf	3,6	;RP1=0, select bank1
  4200  0789  1F0C               	btfss	12,6	;volatile
  4201  078A  2F90               	goto	i1l68
  4202                           
  4203                           ;main.c: 53:         PIE1bits.ADIE = 0;
  4204  078B  130C               	bcf	12,6	;volatile
  4205                           
  4206                           ;main.c: 54:         banderaADC = 1;
  4207  078C  1283               	bcf	3,5	;RP0=0, select bank0
  4208  078D  1303               	bcf	3,6	;RP1=0, select bank0
  4209  078E  01D8               	clrf	_banderaADC
  4210  078F  0AD8               	incf	_banderaADC,f
  4211  0790                     i1l68:	
  4212  0790  0871               	movf	??_ISR_ADC+1,w
  4213  0791  008A               	movwf	10
  4214  0792  0E70               	swapf	??_ISR_ADC^(0+4294967168),w
  4215  0793  0083               	movwf	3
  4216  0794  0EFE               	swapf	126,f
  4217  0795  0E7E               	swapf	126,w
  4218  0796  0009               	retfie
  4219  0797                     __end_of_ISR_ADC:	
  4220  007E                     btemp	set	126	;btemp
  4221  007E                     wtemp0	set	126
  4222                           
  4223                           	psect	intentry
  4224  0004                     __pintentry:	
  4225                           ;incstack = 0
  4226                           ; Regs used in _ISR_ADC: []
  4227                           
  4228  0004                     interrupt_function:	
  4229  007E                     saved_w	set	btemp
  4230  0004  00FE               	movwf	btemp
  4231  0005  0E03               	swapf	3,w
  4232  0006  00F0               	movwf	??_ISR_ADC
  4233  0007  080A               	movf	10,w
  4234  0008  00F1               	movwf	??_ISR_ADC+1
  4235  0009  120A  118A  2F83   	ljmp	_ISR_ADC


Data Sizes:
    Strings     15
    Constant    0
    Data        2
    BSS         31
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     26      57
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    LCD_Write_String@a	PTR unsigned char  size(1) Largest target is 15
		 -> STR_1(CODE[15]), 

    sp__uint_to_array	PTR unsigned int  size(1) Largest target is 6
		 -> uint_to_array@resultado(BANK0[6]), 

    num3	PTR unsigned int  size(1) Largest target is 6
		 -> NULL(NULL[0]), uint_to_array@resultado(BANK0[6]), 

    num2	PTR unsigned int  size(1) Largest target is 6
		 -> NULL(NULL[0]), mapear@resultado(BANK0[6]), 

    sp__mapear	PTR unsigned int  size(1) Largest target is 6
		 -> mapear@resultado(BANK0[6]), 

    num1	PTR unsigned int  size(1) Largest target is 6
		 -> NULL(NULL[0]), mapear@resultado(BANK0[6]), 


Critical Paths under _main in COMMON

    _main->_LCD_Set_Cursor
    _main->_mapear
    _uint_to_array->___awdiv
    ___awdiv->___wmul
    _uartRC_init->___aldiv
    _mapear->___wmul
    _LCD_init->_LCD_Cmd
    _LCD_Write_String->_LCD_Write_Character
    _LCD_Set_Cursor->_LCD_Cmd

Critical Paths under _ISR_ADC in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_uartRC_init
    _main->_uint_to_array
    _uint_to_array->___awdiv
    _uartRC_init->___aldiv

Critical Paths under _ISR_ADC in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR_ADC in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR_ADC in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR_ADC in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    6111
                                             23 BANK0      3     3      0
                       _ADC_CHselect
                           _ADConfig
                       _AnalogRead_8
                     _LCD_Set_Cursor
                _LCD_Write_Character
                   _LCD_Write_String
                           _LCD_init
                             _mapear
                        _uartRC_Read
                        _uartRC_init
                       _uartTX_Write
                      _uint_to_array
                       _uint_to_char
 ---------------------------------------------------------------------------------
 (1) _uint_to_char                                         4     4      0      56
                                              2 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _uint_to_array                                       15    15      0    2186
                                              8 BANK0     15    15      0
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     805
                                              8 COMMON     1     1      0
                                              0 BANK0      8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _uartTX_Write                                         2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _uartRC_init                                         16    14      2    1118
                                              7 BANK0     16    14      2
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     805
                                              2 COMMON     8     0      8
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _uartRC_Read                                          3     3      0       1
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _mapear                                              15    13      2    1812
                                              8 COMMON     2     0      2
                                              0 BANK0     13    13      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1004
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) _LCD_init                                             2     2      0      22
                                              5 COMMON     2     2      0
                            _LCD_Cmd
 ---------------------------------------------------------------------------------
 (1) _LCD_Write_String                                     3     3      0     145
                                              4 COMMON     3     3      0
                _LCD_Write_Character
 ---------------------------------------------------------------------------------
 (2) _LCD_Write_Character                                  2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _LCD_Set_Cursor                                       5     4      1     439
                                              5 COMMON     5     4      1
                            _LCD_Cmd
 ---------------------------------------------------------------------------------
 (2) _LCD_Cmd                                              3     3      0      22
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _AnalogRead_8                                         4     4      0      48
                                              2 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _ADConfig                                             5     3      2     218
                                              2 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (1) _ADC_CHselect                                         3     3      0      22
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR_ADC                                              2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_CHselect
   _ADConfig
   _AnalogRead_8
   _LCD_Set_Cursor
     _LCD_Cmd
   _LCD_Write_Character
   _LCD_Write_String
     _LCD_Write_Character
   _LCD_init
     _LCD_Cmd
   _mapear
     ___wmul
   _uartRC_Read
   _uartRC_init
     ___aldiv
   _uartTX_Write
   _uint_to_array
     ___awdiv
       ___wmul (ARG)
     ___wmul
   _uint_to_char

 _ISR_ADC (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     1A      39       5       71.3%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      A       C       1       85.7%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      45      12        0.0%
ABS                  0      0      45       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Mon Feb 10 12:09:36 2020

                           pc 0002                   __CFG_CP$OFF 0000                  ___awdiv@sign 0042  
             mapear@resultado 0042                            fsr 0004           ___wmul@multiplicand 0074  
                         l211 020F                           l220 0253                           l212 0213  
                         l221 025D                           l222 0267                           l214 0227  
                         l215 0294                           l240 04A9                           l216 0230  
                         l241 04B6                           l217 023A                           l209 020E  
                         l242 04C3                           l218 0244                           l243 04D0  
                         l219 0249                           l244 04DD                           l245 04EA  
                         l246 04F7                           l238 049E                           l430 041F  
                         l247 0526                           l365 073A                  __CFG_CPD$OFF 0000  
                         u465 073B                           u475 0742                           u760 0376  
                         u925 0444                           u775 039D                           u785 03CB  
                         u945 0452                           u795 03F9                           u955 0467  
                         u965 0479                  _uint_to_char 066E                           fsr0 0004  
                         indf 0000         __size_of_ADC_CHselect 008B  __size_of_LCD_Write_Character 000F  
             __end_of_LCD_Cmd 06E2                  __CFG_LVP$OFF 0000                _LCD_Set_Cursor 06E2  
                        l2313 0440                          l2305 0430                          l2331 0493  
                        l2323 0478                          l2315 0450                          l1605 0732  
                        l2327 0485                          l2343 061F                          l1801 0711  
                        l2361 0640                          l1731 01E6                          l2371 0661  
                        l2435 0077                          l1733 01EC                          l2349 062A  
                        l1901 0674                          l2429 005E                          l1735 01F1  
                        l1727 01E0                          l1831 0755                          l2375 0669  
                        l2367 0656                          l2359 0632                          l1911 067E  
                        l1903 0676                          l2471 014C                          l2455 00E3  
                        l2439 007D                          l1729 01E5                          l1737 01F8  
                        l1913 0680                          l1905 0678                          l1921 06B1  
                        l2721 017E                          l2473 014F                          l2731 021F  
                        l1739 0217                          l1835 075C                          l2387 035A  
                        l2723 0691                          l1915 0682                          l1907 067A  
                        l2483 016D                          l2475 0162                          l2491 0176  
                        l2733 027A                          l1837 076C                          l1829 0753  
                        l2725 0705                          l1917 0684                          l1909 067C  
                        l2493 0186                          l2485 0171                          l2735 050C  
                        l1759 0272                          l2727 0764                          l1783 06EE  
                        l1919 0689                          l2487 0173                          l2719 015A  
                        l1865 0504                          l2729 0200                          l1787 06F8  
                        l1779 06E4                          l1891 040B                          l1883 03C2  
                        l1789 06FD                          l1885 03DD                          l1877 0394  
                        l1949 079C                          l1879 03AF                          l1889 03F0  
                        l1897 0670                          l1899 0672                          STR_1 0774  
                        u1111 02DB                          u1112 02DC                          u1113 02E1  
                        u1105 02C1                          u1025 0635                          u1114 02E2  
                        u1131 0337                          u1115 02E7                          u1132 0338  
                        u1116 02E8                          u1133 033D                          u1045 0641  
                        u1134 033E                          u1150 052E                          u1207 07B9  
                        u1135 0343                          u1055 064D                          u1136 0344  
                        u1217 05B0                          u1065 0657                          u1307 07AF  
                        u1227 05BF                          u1317 06BB                          u1237 05CB  
                        u1327 06C6                          u1247 05D5                          u1095 02B0  
                        u1337 06D2                          u1257 05DF                          u1347 06DD  
                        u1267 05EA                          u1187 0072                          u1357 02A0  
                        u1277 05F7                          u1197 07A2                          u1287 0604  
                        u1297 060F                          i1l68 0790               __end_of_ISR_ADC 0797  
                __CFG_WRT$OFF 0000             ?_LCD_Write_String 0070                          _main 0028  
                        _num1 007B                          _num2 007A                          _num3 003A  
                        btemp 007E                 _uint_to_array 0527                          start 000C  
          ??_LCD_Write_String 0074                 __CFG_IESO$OFF 0000              __end_of_ADConfig 02A8  
            __end_of_LCD_init 0613               __end_of___aldiv 049C                         ?_main 0070  
                _ADC_CHselect 049C               __end_of___awdiv 066E                 __CFG_WDTE$OFF 0000  
          uint_to_char@numChr 0075               ___awdiv@divisor 003D            uint_to_char@numero 0074  
             ___awdiv@counter 0041                         _RCREG 001A                         _SPBRG 0099  
                       _PORTC 0007                         _PORTD 0008                         _TRISC 0087  
                       _TRISD 0088                         _TXREG 0019                __CFG_FCMEN$OFF 0000  
      __end_of_LCD_Set_Cursor 070E                   mapear@F1350 0032                __CFG_BOREN$OFF 0000  
                       pclath 000A                ?_uint_to_array 0070                         status 0003  
                       wtemp0 007E                   mapear@valor 0041                __CFG_MCLRE$OFF 0000  
             __initialization 000F                  __end_of_main 01DE                        ??_main 0054  
                   ??_LCD_Cmd 0072         __size_of_AnalogRead_8 001D                     ??_ISR_ADC 0070  
             ?_LCD_Set_Cursor 0075                        _ADRESH 001E                        _ADRESL 009E  
            ___awdiv@dividend 003F                  ?_uartRC_Read 0070            uint_to_array@F1341 002C  
                ?_uartRC_init 0044   LCD_Write_Character@caracter 0073                __CFG_PWRTE$OFF 0000  
                   ??___aldiv 003D                        ___wmul 0730                     ??___awdiv 0078  
                      _mapear 036F                  _AnalogRead_8 0751                        _linea2 0020  
            ___awdiv@quotient 0043                        saved_w 007E                     ?_ADConfig 0072  
             ??_uint_to_array 0045                  mapear@limSup 0079       __end_of__initialization 0024  
                   ?_LCD_init 0070                __pcstackCOMMON 0070           _LCD_Write_Character 07A6  
                __pidataBANK0 07C9                    _banderaADC 0058          ?_LCD_Write_Character 0070  
                  ??_ADConfig 0074                LCD_Cmd@comando 0074                    __pbssBANK0 0020  
   LCD_Set_Cursor@corrimiento 0079                    ??_LCD_init 0075                    __pmaintext 0028  
               ADConfig@canal 0072                       ?___wmul 0072                    __pintentry 0004  
                     ?_mapear 0078     __size_of_LCD_Write_String 0022               ADConfig@oscFreq 0076  
                     _LCD_Cmd 06B3                 _banderaSerial 0039                       _ISR_ADC 0783  
       ??_LCD_Write_Character 0072                    __stringtab 076E        AnalogRead_8@conversion 0075  
        __size_of_uartRC_Read 000C                 ?_uartTX_Write 0070          __size_of_uartRC_init 00C7  
      uint_to_array@resultado 004C                       ___aldiv 040D                       ___awdiv 0613  
             __size_of___wmul 0021               __size_of_mapear 009E                     _ANSELbits 0188  
            ??_LCD_Set_Cursor 0076                       __ptext1 066E                       __ptext2 0527  
                     __ptext3 0613                       __ptext4 0797                       __ptext5 02A8  
                     __ptext6 040D                       __ptext7 07B5                       __ptext8 036F  
                     __ptext9 0730           uint_to_array@numero 0053              ___aldiv@dividend 0076  
                     clrloop0 07C2          end_of_initialization 0024                ??_uartTX_Write 0072  
                   _RCSTAbits 0018              ___aldiv@quotient 0040                     _PORTCbits 0007  
               mapear@limReal 0078                     _TRISAbits 0085                     _TRISEbits 0089  
           LCD_Write_String@a 0076             LCD_Write_String@n 0074             __size_of_ADConfig 00CA  
                   _TXSTAbits 0098             __size_of_LCD_init 0067         LCD_Set_Cursor@columna 0075  
              __end_of___wmul 0751              _LCD_Write_String 070E                __end_of_mapear 040D  
               ?_uint_to_char 0070           start_initialization 000F         __end_of_uint_to_array 05AC  
    __CFG_FOSC$INTRC_NOCLKOUT 0000                      ??___wmul 0076                   __pdataBANK0 0057  
                    ??_mapear 003D                 ?_ADC_CHselect 0070                ??_uint_to_char 0072  
                    ?_LCD_Cmd 0070          __end_of_uartTX_Write 07A6                   __pbssCOMMON 007A  
                   ___latbits 0002                 __pcstackBANK0 003D                      ?_ISR_ADC 0070  
       uint_to_array@centenas 0052                      ?___aldiv 0072                      ?___awdiv 003D  
              ??_ADC_CHselect 0072                     __pstrings 076E   __end_of_LCD_Write_Character 07B5  
                    _ADConfig 01DE                 ??_uartRC_Read 0072               ___aldiv@divisor 0072  
           interrupt_function 0004                 ??_uartRC_init 0046               ___aldiv@counter 003E  
              ___wmul@product 0076                      _LCD_init 05AC                     clear_ram0 07C1  
                    _PIE1bits 008C                      _PIR1bits 000C                 ?_AnalogRead_8 0070  
                  _ADCON0bits 001F                   __stringbase 0773                    _ADCON1bits 009F  
           ___wmul@multiplier 0072           ADConfig@justificado 0073              __size_of_LCD_Cmd 002F  
            __size_of_ISR_ADC 0014           uartRC_init@baudrate 0044      __end_of_LCD_Write_String 0730  
        __end_of_uint_to_char 06B3           __end_of_uartRC_Read 07C1           __end_of_uartRC_init 036F  
              ??_AnalogRead_8 0072              __size_of___aldiv 008F              __size_of___awdiv 005B  
       __size_of_uartTX_Write 000F              uartTX_Write@dato 0073            __end_of__stringtab 0774  
                uartRC_init@n 0052          uint_to_array@decenas 004B                      __ptext10 05AC  
                    __ptext11 070E                      __ptext12 07A6                      __ptext13 06E2  
                    __ptext14 06B3                      __ptext15 0751                      __ptext16 01DE  
                    __ptext17 049C                      __ptext18 0783             __CFG_BOR4V$BOR40V 0000  
                _valorADC_CH0 003B                  _valorADC_CH5 003C             ADC_CHselect@canal 0074  
     __size_of_LCD_Set_Cursor 002C                      _contador 0038          __end_of_ADC_CHselect 0527  
               __size_of_main 01B6                  _uartTX_Write 0797           LCD_Set_Cursor@linea 0078  
                  _INTCONbits 000B                      intlevel1 0000                   _uartRC_Read 07B5  
                 _uartRC_init 02A8                     stringcode 076E              AnalogRead_8@just 0074  
                 _valorSerial 0057               mapear@dividendo 0048        __size_of_uint_to_array 0085  
                    stringdir 076E                      stringtab 076E                  ___aldiv@sign 003F  
        __end_of_AnalogRead_8 076E         __size_of_uint_to_char 0045  
