

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sun Feb 09 00:30:28 2020

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	intentry,global,class=CODE,delta=2
    27                           	dabs	1,0x7E,2
    28  0000                     
    29                           ; Version 2.05
    30                           ; Generated 20/12/2018 GMT
    31                           ; 
    32                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    33                           ; All rights reserved.
    34                           ; 
    35                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    36                           ; 
    37                           ; Redistribution and use in source and binary forms, with or without modification, are
    38                           ; permitted provided that the following conditions are met:
    39                           ; 
    40                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    41                           ;        conditions and the following disclaimer.
    42                           ; 
    43                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    44                           ;        of conditions and the following disclaimer in the documentation and/or other
    45                           ;        materials provided with the distribution.
    46                           ; 
    47                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    48                           ;        software without specific prior written permission.
    49                           ; 
    50                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    51                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    52                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    53                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    54                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    55                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    56                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    57                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    58                           ; 
    59                           ; 
    60                           ; Code-generator required, PIC16F887 Definitions
    61                           ; 
    62                           ; SFR Addresses
    63  0000                     	;# 
    64  0001                     	;# 
    65  0002                     	;# 
    66  0003                     	;# 
    67  0004                     	;# 
    68  0005                     	;# 
    69  0006                     	;# 
    70  0007                     	;# 
    71  0008                     	;# 
    72  0009                     	;# 
    73  000A                     	;# 
    74  000B                     	;# 
    75  000C                     	;# 
    76  000D                     	;# 
    77  000E                     	;# 
    78  000E                     	;# 
    79  000F                     	;# 
    80  0010                     	;# 
    81  0011                     	;# 
    82  0012                     	;# 
    83  0013                     	;# 
    84  0014                     	;# 
    85  0015                     	;# 
    86  0015                     	;# 
    87  0016                     	;# 
    88  0017                     	;# 
    89  0018                     	;# 
    90  0019                     	;# 
    91  001A                     	;# 
    92  001B                     	;# 
    93  001B                     	;# 
    94  001C                     	;# 
    95  001D                     	;# 
    96  001E                     	;# 
    97  001F                     	;# 
    98  0081                     	;# 
    99  0085                     	;# 
   100  0086                     	;# 
   101  0087                     	;# 
   102  0088                     	;# 
   103  0089                     	;# 
   104  008C                     	;# 
   105  008D                     	;# 
   106  008E                     	;# 
   107  008F                     	;# 
   108  0090                     	;# 
   109  0091                     	;# 
   110  0092                     	;# 
   111  0093                     	;# 
   112  0093                     	;# 
   113  0093                     	;# 
   114  0094                     	;# 
   115  0095                     	;# 
   116  0096                     	;# 
   117  0097                     	;# 
   118  0098                     	;# 
   119  0099                     	;# 
   120  009A                     	;# 
   121  009B                     	;# 
   122  009C                     	;# 
   123  009D                     	;# 
   124  009E                     	;# 
   125  009F                     	;# 
   126  0105                     	;# 
   127  0107                     	;# 
   128  0108                     	;# 
   129  0109                     	;# 
   130  010C                     	;# 
   131  010C                     	;# 
   132  010D                     	;# 
   133  010E                     	;# 
   134  010F                     	;# 
   135  0185                     	;# 
   136  0187                     	;# 
   137  0188                     	;# 
   138  0189                     	;# 
   139  018C                     	;# 
   140  018D                     	;# 
   141  0000                     	;# 
   142  0001                     	;# 
   143  0002                     	;# 
   144  0003                     	;# 
   145  0004                     	;# 
   146  0005                     	;# 
   147  0006                     	;# 
   148  0007                     	;# 
   149  0008                     	;# 
   150  0009                     	;# 
   151  000A                     	;# 
   152  000B                     	;# 
   153  000C                     	;# 
   154  000D                     	;# 
   155  000E                     	;# 
   156  000E                     	;# 
   157  000F                     	;# 
   158  0010                     	;# 
   159  0011                     	;# 
   160  0012                     	;# 
   161  0013                     	;# 
   162  0014                     	;# 
   163  0015                     	;# 
   164  0015                     	;# 
   165  0016                     	;# 
   166  0017                     	;# 
   167  0018                     	;# 
   168  0019                     	;# 
   169  001A                     	;# 
   170  001B                     	;# 
   171  001B                     	;# 
   172  001C                     	;# 
   173  001D                     	;# 
   174  001E                     	;# 
   175  001F                     	;# 
   176  0081                     	;# 
   177  0085                     	;# 
   178  0086                     	;# 
   179  0087                     	;# 
   180  0088                     	;# 
   181  0089                     	;# 
   182  008C                     	;# 
   183  008D                     	;# 
   184  008E                     	;# 
   185  008F                     	;# 
   186  0090                     	;# 
   187  0091                     	;# 
   188  0092                     	;# 
   189  0093                     	;# 
   190  0093                     	;# 
   191  0093                     	;# 
   192  0094                     	;# 
   193  0095                     	;# 
   194  0096                     	;# 
   195  0097                     	;# 
   196  0098                     	;# 
   197  0099                     	;# 
   198  009A                     	;# 
   199  009B                     	;# 
   200  009C                     	;# 
   201  009D                     	;# 
   202  009E                     	;# 
   203  009F                     	;# 
   204  0105                     	;# 
   205  0107                     	;# 
   206  0108                     	;# 
   207  0109                     	;# 
   208  010C                     	;# 
   209  010C                     	;# 
   210  010D                     	;# 
   211  010E                     	;# 
   212  010F                     	;# 
   213  0185                     	;# 
   214  0187                     	;# 
   215  0188                     	;# 
   216  0189                     	;# 
   217  018C                     	;# 
   218  018D                     	;# 
   219  0000                     	;# 
   220  0001                     	;# 
   221  0002                     	;# 
   222  0003                     	;# 
   223  0004                     	;# 
   224  0005                     	;# 
   225  0006                     	;# 
   226  0007                     	;# 
   227  0008                     	;# 
   228  0009                     	;# 
   229  000A                     	;# 
   230  000B                     	;# 
   231  000C                     	;# 
   232  000D                     	;# 
   233  000E                     	;# 
   234  000E                     	;# 
   235  000F                     	;# 
   236  0010                     	;# 
   237  0011                     	;# 
   238  0012                     	;# 
   239  0013                     	;# 
   240  0014                     	;# 
   241  0015                     	;# 
   242  0015                     	;# 
   243  0016                     	;# 
   244  0017                     	;# 
   245  0018                     	;# 
   246  0019                     	;# 
   247  001A                     	;# 
   248  001B                     	;# 
   249  001B                     	;# 
   250  001C                     	;# 
   251  001D                     	;# 
   252  001E                     	;# 
   253  001F                     	;# 
   254  0081                     	;# 
   255  0085                     	;# 
   256  0086                     	;# 
   257  0087                     	;# 
   258  0088                     	;# 
   259  0089                     	;# 
   260  008C                     	;# 
   261  008D                     	;# 
   262  008E                     	;# 
   263  008F                     	;# 
   264  0090                     	;# 
   265  0091                     	;# 
   266  0092                     	;# 
   267  0093                     	;# 
   268  0093                     	;# 
   269  0093                     	;# 
   270  0094                     	;# 
   271  0095                     	;# 
   272  0096                     	;# 
   273  0097                     	;# 
   274  0098                     	;# 
   275  0099                     	;# 
   276  009A                     	;# 
   277  009B                     	;# 
   278  009C                     	;# 
   279  009D                     	;# 
   280  009E                     	;# 
   281  009F                     	;# 
   282  0105                     	;# 
   283  0107                     	;# 
   284  0108                     	;# 
   285  0109                     	;# 
   286  010C                     	;# 
   287  010C                     	;# 
   288  010D                     	;# 
   289  010E                     	;# 
   290  010F                     	;# 
   291  0185                     	;# 
   292  0187                     	;# 
   293  0188                     	;# 
   294  0189                     	;# 
   295  018C                     	;# 
   296  018D                     	;# 
   297  0000                     	;# 
   298  0001                     	;# 
   299  0002                     	;# 
   300  0003                     	;# 
   301  0004                     	;# 
   302  0005                     	;# 
   303  0006                     	;# 
   304  0007                     	;# 
   305  0008                     	;# 
   306  0009                     	;# 
   307  000A                     	;# 
   308  000B                     	;# 
   309  000C                     	;# 
   310  000D                     	;# 
   311  000E                     	;# 
   312  000E                     	;# 
   313  000F                     	;# 
   314  0010                     	;# 
   315  0011                     	;# 
   316  0012                     	;# 
   317  0013                     	;# 
   318  0014                     	;# 
   319  0015                     	;# 
   320  0015                     	;# 
   321  0016                     	;# 
   322  0017                     	;# 
   323  0018                     	;# 
   324  0019                     	;# 
   325  001A                     	;# 
   326  001B                     	;# 
   327  001B                     	;# 
   328  001C                     	;# 
   329  001D                     	;# 
   330  001E                     	;# 
   331  001F                     	;# 
   332  0081                     	;# 
   333  0085                     	;# 
   334  0086                     	;# 
   335  0087                     	;# 
   336  0088                     	;# 
   337  0089                     	;# 
   338  008C                     	;# 
   339  008D                     	;# 
   340  008E                     	;# 
   341  008F                     	;# 
   342  0090                     	;# 
   343  0091                     	;# 
   344  0092                     	;# 
   345  0093                     	;# 
   346  0093                     	;# 
   347  0093                     	;# 
   348  0094                     	;# 
   349  0095                     	;# 
   350  0096                     	;# 
   351  0097                     	;# 
   352  0098                     	;# 
   353  0099                     	;# 
   354  009A                     	;# 
   355  009B                     	;# 
   356  009C                     	;# 
   357  009D                     	;# 
   358  009E                     	;# 
   359  009F                     	;# 
   360  0105                     	;# 
   361  0107                     	;# 
   362  0108                     	;# 
   363  0109                     	;# 
   364  010C                     	;# 
   365  010C                     	;# 
   366  010D                     	;# 
   367  010E                     	;# 
   368  010F                     	;# 
   369  0185                     	;# 
   370  0187                     	;# 
   371  0188                     	;# 
   372  0189                     	;# 
   373  018C                     	;# 
   374  018D                     	;# 
   375                           
   376                           	psect	idataCOMMON
   377  04DE                     __pidataCOMMON:	
   378                           
   379                           ;initializer for _banderaADC
   380  04DE  3401               	retlw	1
   381  001E                     _ADRESH	set	30
   382  000B                     _INTCONbits	set	11
   383  0007                     _PORTCbits	set	7
   384  001F                     _ADCON0bits	set	31
   385  0007                     _PORTC	set	7
   386  0008                     _PORTD	set	8
   387  000C                     _PIR1bits	set	12
   388  009E                     _ADRESL	set	158
   389  0089                     _TRISEbits	set	137
   390  0085                     _TRISAbits	set	133
   391  009F                     _ADCON1bits	set	159
   392  0087                     _TRISC	set	135
   393  0088                     _TRISD	set	136
   394  008C                     _PIE1bits	set	140
   395  0188                     _ANSELbits	set	392
   396                           
   397                           	psect	strings
   398  04A0                     __pstrings:	
   399  04A0                     stringtab:	
   400  04A0                     __stringtab:	
   401  04A0                     stringcode:	
   402                           ;	String table - string pointers are 1 byte each
   403                           
   404  04A0                     stringdir:	
   405  04A0  3004               	movlw	high stringdir
   406  04A1  008A               	movwf	10
   407  04A2  0804               	movf	4,w
   408  04A3  0A84               	incf	4,f
   409  04A4  0782               	addwf	2,f
   410  04A5                     __stringbase:	
   411  04A5  3400               	retlw	0
   412  04A6                     __end_of__stringtab:	
   413  04A6                     STR_1:	
   414  04A6  3453               	retlw	83	;'S'
   415  04A7  3431               	retlw	49	;'1'
   416  04A8  3420               	retlw	32	;' '
   417  04A9  3420               	retlw	32	;' '
   418  04AA  3420               	retlw	32	;' '
   419  04AB  3420               	retlw	32	;' '
   420  04AC  3453               	retlw	83	;'S'
   421  04AD  3432               	retlw	50	;'2'
   422  04AE  3420               	retlw	32	;' '
   423  04AF  3420               	retlw	32	;' '
   424  04B0  3420               	retlw	32	;' '
   425  04B1  3420               	retlw	32	;' '
   426  04B2  3453               	retlw	83	;'S'
   427  04B3  3433               	retlw	51	;'3'
   428  04B4  3400               	retlw	0
   429                           
   430                           ; #config settings
   431  0000                     
   432                           	psect	cinit
   433  000F                     start_initialization:	
   434  000F                     __initialization:	
   435                           
   436                           ; Initialize objects allocated to COMMON
   437  000F  120A  118A  24DE  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
   438  0014  00FB               	movwf	__pdataCOMMON& (0+127)
   439                           
   440                           ; Clear objects allocated to BANK0
   441  0015  1383               	bcf	3,7	;select IRP bank0
   442  0016  3020               	movlw	low __pbssBANK0
   443  0017  0084               	movwf	4
   444  0018  3033               	movlw	low (__pbssBANK0+19)
   445  0019  120A  118A  24D6   	fcall	clear_ram0
   446                           
   447                           ; Clear objects allocated to COMMON
   448  001C  01F8               	clrf	__pbssCOMMON& (0+127)
   449  001D  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
   450  001E  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
   451  001F                     end_of_initialization:	
   452                           ;End of C runtime variable initialization code
   453                           
   454  001F                     __end_of__initialization:	
   455  001F  0183               	clrf	3
   456  0020  120A  118A  2823   	ljmp	_main	;jump to C main() function
   457                           
   458                           	psect	bssCOMMON
   459  0078                     __pbssCOMMON:	
   460  0078                     _num2:	
   461  0078                     	ds	1
   462  0079                     _num1:	
   463  0079                     	ds	1
   464  007A                     _valorADC_CH5:	
   465  007A                     	ds	1
   466                           
   467                           	psect	dataCOMMON
   468  007B                     __pdataCOMMON:	
   469  007B                     _banderaADC:	
   470  007B                     	ds	1
   471                           
   472                           	psect	bssBANK0
   473  0020                     __pbssBANK0:	
   474  0020                     _linea2:	
   475  0020                     	ds	12
   476  002C                     mapear@F1339:	
   477  002C                     	ds	6
   478  0032                     _valorADC_CH0:	
   479  0032                     	ds	1
   480                           
   481                           	psect	clrtext
   482  04D6                     clear_ram0:	
   483                           ;	Called with FSR containing the base address, and
   484                           ;	W with the last address+1
   485                           
   486  04D6  0064               	clrwdt	;clear the watchdog before getting into this loop
   487  04D7                     clrloop0:	
   488  04D7  0180               	clrf	0	;clear RAM location pointed to by FSR
   489  04D8  0A84               	incf	4,f	;increment pointer
   490  04D9  0604               	xorwf	4,w	;XOR with final address
   491  04DA  1903               	btfsc	3,2	;have we reached the end yet?
   492  04DB  3400               	retlw	0	;all done for this memory range, return
   493  04DC  0604               	xorwf	4,w	;XOR again to restore value
   494  04DD  2CD7               	goto	clrloop0	;do the next byte
   495                           
   496                           	psect	cstackCOMMON
   497  0070                     __pcstackCOMMON:	
   498  0070                     ?_LCD_init:	
   499  0070                     ?_LCD_Write_String:	
   500                           ; 1 bytes @ 0x0
   501                           
   502  0070                     ?_AnalogRead_8:	
   503                           ; 1 bytes @ 0x0
   504                           
   505  0070                     ?_ADC_CHselect:	
   506                           ; 1 bytes @ 0x0
   507                           
   508  0070                     ?_LCD_Write_Character:	
   509                           ; 1 bytes @ 0x0
   510                           
   511  0070                     ?_uint_to_char:	
   512                           ; 1 bytes @ 0x0
   513                           
   514  0070                     ?_ISR_ADC:	
   515                           ; 1 bytes @ 0x0
   516                           
   517  0070                     ??_ISR_ADC:	
   518                           ; 1 bytes @ 0x0
   519                           
   520  0070                     ?_main:	
   521                           ; 1 bytes @ 0x0
   522                           
   523  0070                     ?_LCD_Cmd:	
   524                           ; 1 bytes @ 0x0
   525                           
   526                           
   527                           ; 1 bytes @ 0x0
   528  0070                     	ds	2
   529  0072                     ?_ADConfig:	
   530  0072                     ??_AnalogRead_8:	
   531                           ; 1 bytes @ 0x2
   532                           
   533  0072                     ??_ADC_CHselect:	
   534                           ; 1 bytes @ 0x2
   535                           
   536  0072                     ??_LCD_Write_Character:	
   537                           ; 1 bytes @ 0x2
   538                           
   539  0072                     ??_uint_to_char:	
   540                           ; 1 bytes @ 0x2
   541                           
   542  0072                     ??_LCD_Cmd:	
   543                           ; 1 bytes @ 0x2
   544                           
   545  0072                     ?___wmul:	
   546                           ; 1 bytes @ 0x2
   547                           
   548  0072                     ADConfig@canal:	
   549                           ; 2 bytes @ 0x2
   550                           
   551  0072                     ___wmul@multiplier:	
   552                           ; 1 bytes @ 0x2
   553                           
   554                           
   555                           ; 2 bytes @ 0x2
   556  0072                     	ds	1
   557  0073                     LCD_Write_Character@caracter:	
   558  0073                     ADConfig@justificado:	
   559                           ; 1 bytes @ 0x3
   560                           
   561                           
   562                           ; 1 bytes @ 0x3
   563  0073                     	ds	1
   564  0074                     ??_ADConfig:	
   565  0074                     ??_LCD_Write_String:	
   566                           ; 1 bytes @ 0x4
   567                           
   568  0074                     LCD_Cmd@comando:	
   569                           ; 1 bytes @ 0x4
   570                           
   571  0074                     uint_to_char@numero:	
   572                           ; 1 bytes @ 0x4
   573                           
   574  0074                     AnalogRead_8@just:	
   575                           ; 1 bytes @ 0x4
   576                           
   577  0074                     ADC_CHselect@canal:	
   578                           ; 1 bytes @ 0x4
   579                           
   580  0074                     LCD_Write_String@n:	
   581                           ; 1 bytes @ 0x4
   582                           
   583  0074                     ___wmul@multiplicand:	
   584                           ; 2 bytes @ 0x4
   585                           
   586                           
   587                           ; 2 bytes @ 0x4
   588  0074                     	ds	1
   589  0075                     ??_LCD_init:	
   590  0075                     ?_LCD_Set_Cursor:	
   591                           ; 1 bytes @ 0x5
   592                           
   593  0075                     LCD_Set_Cursor@columna:	
   594                           ; 1 bytes @ 0x5
   595                           
   596  0075                     uint_to_char@numChr:	
   597                           ; 1 bytes @ 0x5
   598                           
   599  0075                     AnalogRead_8@conversion:	
   600                           ; 1 bytes @ 0x5
   601                           
   602                           
   603                           ; 1 bytes @ 0x5
   604  0075                     	ds	1
   605  0076                     ??_LCD_Set_Cursor:	
   606  0076                     ??___wmul:	
   607                           ; 1 bytes @ 0x6
   608                           
   609  0076                     LCD_Write_String@a:	
   610                           ; 1 bytes @ 0x6
   611                           
   612  0076                     ADConfig@oscFreq:	
   613                           ; 1 bytes @ 0x6
   614                           
   615  0076                     ___wmul@product:	
   616                           ; 1 bytes @ 0x6
   617                           
   618                           
   619                           ; 2 bytes @ 0x6
   620  0076                     	ds	2
   621                           
   622                           	psect	cstackBANK0
   623  0033                     __pcstackBANK0:	
   624  0033                     ?_mapear:	
   625  0033                     mapear@limReal:	
   626                           ; 1 bytes @ 0x0
   627                           
   628  0033                     LCD_Set_Cursor@linea:	
   629                           ; 1 bytes @ 0x0
   630                           
   631                           
   632                           ; 1 bytes @ 0x0
   633  0033                     	ds	1
   634  0034                     mapear@limSup:	
   635  0034                     LCD_Set_Cursor@corrimiento:	
   636                           ; 1 bytes @ 0x1
   637                           
   638                           
   639                           ; 1 bytes @ 0x1
   640  0034                     	ds	1
   641  0035                     ??_mapear:	
   642                           
   643                           ; 1 bytes @ 0x2
   644  0035                     	ds	4
   645  0039                     mapear@valor:	
   646                           
   647                           ; 1 bytes @ 0x6
   648  0039                     	ds	1
   649  003A                     mapear@resultado:	
   650                           
   651                           ; 6 bytes @ 0x7
   652  003A                     	ds	6
   653  0040                     mapear@dividendo:	
   654                           
   655                           ; 2 bytes @ 0xD
   656  0040                     	ds	2
   657  0042                     ??_main:	
   658                           
   659                           ; 1 bytes @ 0xF
   660  0042                     	ds	3
   661                           
   662                           	psect	maintext
   663  0023                     __pmaintext:	
   664 ;;
   665 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   666 ;;
   667 ;; *************** function _main *****************
   668 ;; Defined at:
   669 ;;		line 51 in file "main.c"
   670 ;; Parameters:    Size  Location     Type
   671 ;;		None
   672 ;; Auto vars:     Size  Location     Type
   673 ;;		None
   674 ;; Return value:  Size  Location     Type
   675 ;;                  1    wreg      void 
   676 ;; Registers used:
   677 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   678 ;; Tracked objects:
   679 ;;		On entry : B00/0
   680 ;;		On exit  : 0/0
   681 ;;		Unchanged: 0/0
   682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   683 ;;      Params:         0       0       0       0       0
   684 ;;      Locals:         0       0       0       0       0
   685 ;;      Temps:          0       3       0       0       0
   686 ;;      Totals:         0       3       0       0       0
   687 ;;Total ram usage:        3 bytes
   688 ;; Hardware stack levels required when called:    3
   689 ;; This function calls:
   690 ;;		_ADC_CHselect
   691 ;;		_ADConfig
   692 ;;		_AnalogRead_8
   693 ;;		_LCD_Set_Cursor
   694 ;;		_LCD_Write_Character
   695 ;;		_LCD_Write_String
   696 ;;		_LCD_init
   697 ;;		_mapear
   698 ;;		_uint_to_char
   699 ;; This function is called by:
   700 ;;		Startup code after reset
   701 ;; This function uses a non-reentrant model
   702 ;;
   703                           
   704                           
   705                           ;psect for function _main
   706  0023                     _main:	
   707                           
   708                           ;main.c: 52:     TRISD = 0;
   709                           
   710                           ;incstack = 0
   711                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   712  0023  1683               	bsf	3,5	;RP0=1, select bank1
   713  0024  1303               	bcf	3,6	;RP1=0, select bank1
   714  0025  0188               	clrf	8	;volatile
   715                           
   716                           ;main.c: 53:     TRISC = 0;
   717  0026  0187               	clrf	7	;volatile
   718                           
   719                           ;main.c: 54:     PORTD = 0;
   720  0027  1283               	bcf	3,5	;RP0=0, select bank0
   721  0028  1303               	bcf	3,6	;RP1=0, select bank0
   722  0029  0188               	clrf	8	;volatile
   723                           
   724                           ;main.c: 55:     PORTC = 0;
   725  002A  0187               	clrf	7	;volatile
   726                           
   727                           ;main.c: 56:     LCD_init();
   728  002B  120A  118A  2337  120A  118A  	fcall	_LCD_init
   729                           
   730                           ;main.c: 57:     ADConfig(8, 5, 'H');
   731  0030  3005               	movlw	5
   732  0031  1283               	bcf	3,5	;RP0=0, select bank0
   733  0032  1303               	bcf	3,6	;RP1=0, select bank0
   734  0033  00C2               	movwf	??_main
   735  0034  0842               	movf	??_main,w
   736  0035  00F2               	movwf	ADConfig@canal
   737  0036  3048               	movlw	72
   738  0037  00C3               	movwf	??_main+1
   739  0038  0843               	movf	??_main+1,w
   740  0039  00F3               	movwf	ADConfig@justificado
   741  003A  3008               	movlw	8
   742  003B  120A  118A  2144  120A  118A  	fcall	_ADConfig
   743                           
   744                           ;main.c: 58:     LCD_Set_Cursor(1,1);
   745  0040  01F5               	clrf	LCD_Set_Cursor@columna
   746  0041  0AF5               	incf	LCD_Set_Cursor@columna,f
   747  0042  3001               	movlw	1
   748  0043  120A  118A  2412  120A  118A  	fcall	_LCD_Set_Cursor
   749                           
   750                           ;main.c: 59:     LCD_Write_String("S1    S2    S3");
   751  0048  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   752  0049  120A  118A  2440  120A  118A  	fcall	_LCD_Write_String
   753  004E                     l1907:	
   754                           
   755                           ;main.c: 61:         if (banderaADC == 1){
   756  004E  037B               	decf	_banderaADC,w
   757  004F  1903               	btfsc	3,2
   758  0050  2924               	goto	l1945
   759  0051  284E               	goto	l1907
   760  0052                     l1911:	
   761                           
   762                           ;main.c: 64:                     valorADC_CH5 = AnalogRead_8('H');
   763  0052  3048               	movlw	72
   764  0053  120A  118A  2483  120A  118A  	fcall	_AnalogRead_8
   765  0058  1283               	bcf	3,5	;RP0=0, select bank0
   766  0059  1303               	bcf	3,6	;RP1=0, select bank0
   767  005A  00C2               	movwf	??_main
   768  005B  0842               	movf	??_main,w
   769  005C  00FA               	movwf	_valorADC_CH5
   770                           
   771                           ;main.c: 65:                     ADC_CHselect(0);
   772  005D  3000               	movlw	0
   773  005E  120A  118A  22AC  120A  118A  	fcall	_ADC_CHselect
   774                           
   775                           ;main.c: 66:                     num1 = mapear(valorADC_CH5, 255, 5);
   776  0063  30FF               	movlw	255
   777  0064  1283               	bcf	3,5	;RP0=0, select bank0
   778  0065  1303               	bcf	3,6	;RP1=0, select bank0
   779  0066  00C2               	movwf	??_main
   780  0067  0842               	movf	??_main,w
   781  0068  00B3               	movwf	mapear@limReal
   782  0069  3005               	movlw	5
   783  006A  00C3               	movwf	??_main+1
   784  006B  0843               	movf	??_main+1,w
   785  006C  00B4               	movwf	mapear@limSup
   786  006D  087A               	movf	_valorADC_CH5,w
   787  006E  120A  118A  220E  120A  118A  	fcall	_mapear
   788  0073  1283               	bcf	3,5	;RP0=0, select bank0
   789  0074  1303               	bcf	3,6	;RP1=0, select bank0
   790  0075  00C4               	movwf	??_main+2
   791  0076  0844               	movf	??_main+2,w
   792  0077  00F9               	movwf	_num1
   793                           
   794                           ;main.c: 67:                     LCD_Set_Cursor(2, 0);
   795  0078  01F5               	clrf	LCD_Set_Cursor@columna
   796  0079  3002               	movlw	2
   797  007A  120A  118A  2412  120A  118A  	fcall	_LCD_Set_Cursor
   798                           
   799                           ;main.c: 68:                     LCD_Write_Character(uint_to_char(num1[0]));
   800  007F  0879               	movf	_num1,w
   801  0080  0084               	movwf	4
   802  0081  1383               	bcf	3,7	;select IRP bank0
   803  0082  0800               	movf	0,w
   804  0083  120A  118A  239E  120A  118A  	fcall	_uint_to_char
   805  0088  120A  118A  24C7  120A  118A  	fcall	_LCD_Write_Character
   806                           
   807                           ;main.c: 69:                     LCD_Write_Character('.');
   808  008D  302E               	movlw	46
   809  008E  120A  118A  24C7  120A  118A  	fcall	_LCD_Write_Character
   810                           
   811                           ;main.c: 70:                     LCD_Write_Character(uint_to_char(num1[1]));
   812  0093  0879               	movf	_num1,w
   813  0094  3E02               	addlw	2
   814  0095  0084               	movwf	4
   815  0096  1383               	bcf	3,7	;select IRP bank0
   816  0097  0800               	movf	0,w
   817  0098  120A  118A  239E  120A  118A  	fcall	_uint_to_char
   818  009D  120A  118A  24C7  120A  118A  	fcall	_LCD_Write_Character
   819                           
   820                           ;main.c: 71:                     LCD_Write_Character(uint_to_char(num1[2]));
   821  00A2  0879               	movf	_num1,w
   822  00A3  3E04               	addlw	4
   823  00A4  0084               	movwf	4
   824  00A5  1383               	bcf	3,7	;select IRP bank0
   825  00A6  0800               	movf	0,w
   826  00A7  120A  118A  239E  120A  118A  	fcall	_uint_to_char
   827  00AC  120A  118A  24C7  120A  118A  	fcall	_LCD_Write_Character
   828                           
   829                           ;main.c: 72:                     LCD_Write_Character('V');
   830  00B1  3056               	movlw	86
   831  00B2  120A  118A  24C7  120A  118A  	fcall	_LCD_Write_Character
   832                           
   833                           ;main.c: 73:                     break;
   834  00B7  2939               	goto	l1947
   835  00B8                     l1927:	
   836                           
   837                           ;main.c: 75:                     valorADC_CH0 = AnalogRead_8('H');
   838  00B8  3048               	movlw	72
   839  00B9  120A  118A  2483  120A  118A  	fcall	_AnalogRead_8
   840  00BE  1283               	bcf	3,5	;RP0=0, select bank0
   841  00BF  1303               	bcf	3,6	;RP1=0, select bank0
   842  00C0  00C2               	movwf	??_main
   843  00C1  0842               	movf	??_main,w
   844  00C2  00B2               	movwf	_valorADC_CH0
   845                           
   846                           ;main.c: 76:                     ADC_CHselect(5);
   847  00C3  3005               	movlw	5
   848  00C4  120A  118A  22AC  120A  118A  	fcall	_ADC_CHselect
   849                           
   850                           ;main.c: 77:                     num2 = mapear(valorADC_CH0, 255, 5);
   851  00C9  30FF               	movlw	255
   852  00CA  1283               	bcf	3,5	;RP0=0, select bank0
   853  00CB  1303               	bcf	3,6	;RP1=0, select bank0
   854  00CC  00C2               	movwf	??_main
   855  00CD  0842               	movf	??_main,w
   856  00CE  00B3               	movwf	mapear@limReal
   857  00CF  3005               	movlw	5
   858  00D0  00C3               	movwf	??_main+1
   859  00D1  0843               	movf	??_main+1,w
   860  00D2  00B4               	movwf	mapear@limSup
   861  00D3  0832               	movf	_valorADC_CH0,w
   862  00D4  120A  118A  220E  120A  118A  	fcall	_mapear
   863  00D9  1283               	bcf	3,5	;RP0=0, select bank0
   864  00DA  1303               	bcf	3,6	;RP1=0, select bank0
   865  00DB  00C4               	movwf	??_main+2
   866  00DC  0844               	movf	??_main+2,w
   867  00DD  00F8               	movwf	_num2
   868                           
   869                           ;main.c: 78:                     LCD_Set_Cursor(2, 6);
   870  00DE  3006               	movlw	6
   871  00DF  00C2               	movwf	??_main
   872  00E0  0842               	movf	??_main,w
   873  00E1  00F5               	movwf	LCD_Set_Cursor@columna
   874  00E2  3002               	movlw	2
   875  00E3  120A  118A  2412  120A  118A  	fcall	_LCD_Set_Cursor
   876                           
   877                           ;main.c: 79:                     LCD_Write_Character(uint_to_char(num2[0]));
   878  00E8  0878               	movf	_num2,w
   879  00E9  0084               	movwf	4
   880  00EA  1383               	bcf	3,7	;select IRP bank0
   881  00EB  0800               	movf	0,w
   882  00EC  120A  118A  239E  120A  118A  	fcall	_uint_to_char
   883  00F1  120A  118A  24C7  120A  118A  	fcall	_LCD_Write_Character
   884                           
   885                           ;main.c: 80:                     LCD_Write_Character('.');
   886  00F6  302E               	movlw	46
   887  00F7  120A  118A  24C7  120A  118A  	fcall	_LCD_Write_Character
   888                           
   889                           ;main.c: 81:                     LCD_Write_Character(uint_to_char(num2[1]));
   890  00FC  0878               	movf	_num2,w
   891  00FD  3E02               	addlw	2
   892  00FE  0084               	movwf	4
   893  00FF  1383               	bcf	3,7	;select IRP bank0
   894  0100  0800               	movf	0,w
   895  0101  120A  118A  239E  120A  118A  	fcall	_uint_to_char
   896  0106  120A  118A  24C7  120A  118A  	fcall	_LCD_Write_Character
   897                           
   898                           ;main.c: 82:                     LCD_Write_Character(uint_to_char(num2[2]));
   899  010B  0878               	movf	_num2,w
   900  010C  3E04               	addlw	4
   901  010D  0084               	movwf	4
   902  010E  1383               	bcf	3,7	;select IRP bank0
   903  010F  0800               	movf	0,w
   904  0110  120A  118A  239E  120A  118A  	fcall	_uint_to_char
   905  0115  120A  118A  24C7  120A  118A  	fcall	_LCD_Write_Character
   906                           
   907                           ;main.c: 83:                     LCD_Write_Character('V');
   908  011A  3056               	movlw	86
   909  011B  120A  118A  24C7  120A  118A  	fcall	_LCD_Write_Character
   910                           
   911                           ;main.c: 84:                     break;
   912  0120  2939               	goto	l1947
   913  0121                     l1943:	
   914                           
   915                           ;main.c: 86:                     valorADC_CH0 = 0;
   916  0121  01B2               	clrf	_valorADC_CH0
   917                           
   918                           ;main.c: 87:                     valorADC_CH5 = 0;
   919  0122  01FA               	clrf	_valorADC_CH5
   920                           
   921                           ;main.c: 88:             }
   922  0123  2939               	goto	l1947
   923  0124                     l1945:	
   924  0124  1283               	bcf	3,5	;RP0=0, select bank0
   925  0125  1303               	bcf	3,6	;RP1=0, select bank0
   926  0126  0C1F               	rrf	31,w	;volatile
   927  0127  00C2               	movwf	??_main
   928  0128  0C42               	rrf	??_main,w
   929  0129  390F               	andlw	15
   930  012A  00C3               	movwf	??_main+1
   931  012B  01C4               	clrf	??_main+2
   932                           
   933                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   934                           ; Switch size 1, requested type "simple"
   935                           ; Number of cases is 1, Range of values is 0 to 0
   936                           ; switch strategies available:
   937                           ; Name         Instructions Cycles
   938                           ; simple_byte            4     3 (average)
   939                           ; direct_byte           11     8 (fixed)
   940                           ; jumptable            260     6 (fixed)
   941                           ;	Chosen strategy is simple_byte
   942  012C  0844               	movf	??_main+2,w
   943  012D  3A00               	xorlw	0	; case 0
   944  012E  1903               	skipnz
   945  012F  2931               	goto	l2169
   946  0130  2921               	goto	l1943
   947  0131                     l2169:	
   948                           
   949                           ; Switch size 1, requested type "simple"
   950                           ; Number of cases is 2, Range of values is 0 to 5
   951                           ; switch strategies available:
   952                           ; Name         Instructions Cycles
   953                           ; simple_byte            7     4 (average)
   954                           ; direct_byte           26     8 (fixed)
   955                           ; jumptable            260     6 (fixed)
   956                           ;	Chosen strategy is simple_byte
   957  0131  0843               	movf	??_main+1,w
   958  0132  3A00               	xorlw	0	; case 0
   959  0133  1903               	skipnz
   960  0134  28B8               	goto	l1927
   961  0135  3A05               	xorlw	5	; case 5
   962  0136  1903               	skipnz
   963  0137  2852               	goto	l1911
   964  0138  2921               	goto	l1943
   965  0139                     l1947:	
   966                           
   967                           ;main.c: 89:             banderaADC = 0;
   968  0139  01FB               	clrf	_banderaADC
   969                           
   970                           ;main.c: 90:             PIR1bits.ADIF = 0;
   971  013A  1283               	bcf	3,5	;RP0=0, select bank0
   972  013B  1303               	bcf	3,6	;RP1=0, select bank0
   973  013C  130C               	bcf	12,6	;volatile
   974                           
   975                           ;main.c: 91:             PIE1bits.ADIE = 1;
   976  013D  1683               	bsf	3,5	;RP0=1, select bank1
   977  013E  1303               	bcf	3,6	;RP1=0, select bank1
   978  013F  170C               	bsf	12,6	;volatile
   979                           
   980                           ;main.c: 92:             ADCON0bits.GO_nDONE = 1;
   981  0140  1283               	bcf	3,5	;RP0=0, select bank0
   982  0141  1303               	bcf	3,6	;RP1=0, select bank0
   983  0142  149F               	bsf	31,1	;volatile
   984  0143  284E               	goto	l1907
   985  0144                     __end_of_main:	
   986                           
   987                           	psect	text1
   988  039E                     __ptext1:	
   989 ;; *************** function _uint_to_char *****************
   990 ;; Defined at:
   991 ;;		line 129 in file "LCD_8bits.c"
   992 ;; Parameters:    Size  Location     Type
   993 ;;  numero          1    wreg     unsigned char 
   994 ;; Auto vars:     Size  Location     Type
   995 ;;  numero          1    4[COMMON] unsigned char 
   996 ;;  numChr          1    5[COMMON] unsigned char 
   997 ;; Return value:  Size  Location     Type
   998 ;;                  1    wreg      unsigned char 
   999 ;; Registers used:
  1000 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1001 ;; Tracked objects:
  1002 ;;		On entry : 0/0
  1003 ;;		On exit  : 0/0
  1004 ;;		Unchanged: 0/0
  1005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1006 ;;      Params:         0       0       0       0       0
  1007 ;;      Locals:         2       0       0       0       0
  1008 ;;      Temps:          2       0       0       0       0
  1009 ;;      Totals:         4       0       0       0       0
  1010 ;;Total ram usage:        4 bytes
  1011 ;; Hardware stack levels used:    1
  1012 ;; Hardware stack levels required when called:    1
  1013 ;; This function calls:
  1014 ;;		Nothing
  1015 ;; This function is called by:
  1016 ;;		_main
  1017 ;; This function uses a non-reentrant model
  1018 ;;
  1019                           
  1020                           
  1021                           ;psect for function _uint_to_char
  1022  039E                     _uint_to_char:	
  1023                           
  1024                           ;incstack = 0
  1025                           ; Regs used in _uint_to_char: [wreg-fsr0h+status,2+status,0]
  1026                           ;uint_to_char@numero stored from wreg
  1027  039E  00F4               	movwf	uint_to_char@numero
  1028                           
  1029                           ;LCD_8bits.c: 131:     switch (numero){
  1030  039F  2BB9               	goto	l1549
  1031  03A0                     l1527:	
  1032                           
  1033                           ;LCD_8bits.c: 133:             numChr = 48;
  1034  03A0  3030               	movlw	48
  1035  03A1  2BB5               	goto	L10
  1036  03A2                     l1529:	
  1037                           ;LCD_8bits.c: 134:             break;
  1038                           
  1039                           
  1040                           ;LCD_8bits.c: 136:             numChr = 49;
  1041  03A2  3031               	movlw	49
  1042  03A3  2BB5               	goto	L10
  1043  03A4                     l1531:	
  1044                           ;LCD_8bits.c: 137:             break;
  1045                           
  1046                           
  1047                           ;LCD_8bits.c: 139:             numChr = 50;
  1048  03A4  3032               	movlw	50
  1049  03A5  2BB5               	goto	L10
  1050  03A6                     l1533:	
  1051                           ;LCD_8bits.c: 140:             break;
  1052                           
  1053                           
  1054                           ;LCD_8bits.c: 142:             numChr = 51;
  1055  03A6  3033               	movlw	51
  1056  03A7  2BB5               	goto	L10
  1057  03A8                     l1535:	
  1058                           ;LCD_8bits.c: 143:             break;
  1059                           
  1060                           
  1061                           ;LCD_8bits.c: 145:             numChr = 52;
  1062  03A8  3034               	movlw	52
  1063  03A9  2BB5               	goto	L10
  1064  03AA                     l1537:	
  1065                           ;LCD_8bits.c: 146:             break;
  1066                           
  1067                           
  1068                           ;LCD_8bits.c: 148:             numChr = 53;
  1069  03AA  3035               	movlw	53
  1070  03AB  2BB5               	goto	L10
  1071  03AC                     l1539:	
  1072                           ;LCD_8bits.c: 149:             break;
  1073                           
  1074                           
  1075                           ;LCD_8bits.c: 151:             numChr = 54;
  1076  03AC  3036               	movlw	54
  1077  03AD  2BB5               	goto	L10
  1078  03AE                     l1541:	
  1079                           ;LCD_8bits.c: 152:             break;
  1080                           
  1081                           
  1082                           ;LCD_8bits.c: 154:             numChr = 55;
  1083  03AE  3037               	movlw	55
  1084  03AF  2BB5               	goto	L10
  1085  03B0                     l1543:	
  1086                           ;LCD_8bits.c: 155:             break;
  1087                           
  1088                           
  1089                           ;LCD_8bits.c: 157:             numChr = 56;
  1090  03B0  3038               	movlw	56
  1091  03B1  2BB5               	goto	L10
  1092  03B2                     l1545:	
  1093                           ;LCD_8bits.c: 158:             break;
  1094                           
  1095                           
  1096                           ;LCD_8bits.c: 160:             numChr = 57;
  1097  03B2  3039               	movlw	57
  1098  03B3  2BB5               	goto	L10
  1099  03B4                     l1547:	
  1100                           ;LCD_8bits.c: 161:             break;
  1101                           
  1102                           
  1103                           ;LCD_8bits.c: 163:             numChr = 214;
  1104  03B4  30D6               	movlw	214
  1105  03B5                     L10:	
  1106  03B5  00F2               	movwf	??_uint_to_char
  1107  03B6  0872               	movf	??_uint_to_char,w
  1108  03B7  00F5               	movwf	uint_to_char@numChr
  1109                           
  1110                           ;LCD_8bits.c: 164:     }
  1111  03B8  2BE1               	goto	l1551
  1112  03B9                     l1549:	
  1113  03B9  0874               	movf	uint_to_char@numero,w
  1114  03BA  00F2               	movwf	??_uint_to_char
  1115  03BB  01F3               	clrf	??_uint_to_char+1
  1116                           
  1117                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1118                           ; Switch size 1, requested type "simple"
  1119                           ; Number of cases is 1, Range of values is 0 to 0
  1120                           ; switch strategies available:
  1121                           ; Name         Instructions Cycles
  1122                           ; simple_byte            4     3 (average)
  1123                           ; direct_byte           11     8 (fixed)
  1124                           ; jumptable            260     6 (fixed)
  1125                           ;	Chosen strategy is simple_byte
  1126  03BC  0873               	movf	??_uint_to_char+1,w
  1127  03BD  3A00               	xorlw	0	; case 0
  1128  03BE  1903               	skipnz
  1129  03BF  2BC1               	goto	l2171
  1130  03C0  2BB4               	goto	l1547
  1131  03C1                     l2171:	
  1132                           
  1133                           ; Switch size 1, requested type "simple"
  1134                           ; Number of cases is 10, Range of values is 0 to 9
  1135                           ; switch strategies available:
  1136                           ; Name         Instructions Cycles
  1137                           ; simple_byte           31    16 (average)
  1138                           ; direct_byte           38     8 (fixed)
  1139                           ; jumptable            260     6 (fixed)
  1140                           ;	Chosen strategy is simple_byte
  1141  03C1  0872               	movf	??_uint_to_char,w
  1142  03C2  3A00               	xorlw	0	; case 0
  1143  03C3  1903               	skipnz
  1144  03C4  2BA0               	goto	l1527
  1145  03C5  3A01               	xorlw	1	; case 1
  1146  03C6  1903               	skipnz
  1147  03C7  2BA2               	goto	l1529
  1148  03C8  3A03               	xorlw	3	; case 2
  1149  03C9  1903               	skipnz
  1150  03CA  2BA4               	goto	l1531
  1151  03CB  3A01               	xorlw	1	; case 3
  1152  03CC  1903               	skipnz
  1153  03CD  2BA6               	goto	l1533
  1154  03CE  3A07               	xorlw	7	; case 4
  1155  03CF  1903               	skipnz
  1156  03D0  2BA8               	goto	l1535
  1157  03D1  3A01               	xorlw	1	; case 5
  1158  03D2  1903               	skipnz
  1159  03D3  2BAA               	goto	l1537
  1160  03D4  3A03               	xorlw	3	; case 6
  1161  03D5  1903               	skipnz
  1162  03D6  2BAC               	goto	l1539
  1163  03D7  3A01               	xorlw	1	; case 7
  1164  03D8  1903               	skipnz
  1165  03D9  2BAE               	goto	l1541
  1166  03DA  3A0F               	xorlw	15	; case 8
  1167  03DB  1903               	skipnz
  1168  03DC  2BB0               	goto	l1543
  1169  03DD  3A01               	xorlw	1	; case 9
  1170  03DE  1903               	skipnz
  1171  03DF  2BB2               	goto	l1545
  1172  03E0  2BB4               	goto	l1547
  1173  03E1                     l1551:	
  1174                           
  1175                           ;LCD_8bits.c: 165:     return(numChr);
  1176  03E1  0875               	movf	uint_to_char@numChr,w
  1177  03E2  0008               	return
  1178  03E3                     __end_of_uint_to_char:	
  1179                           
  1180                           	psect	text2
  1181  020E                     __ptext2:	
  1182 ;; *************** function _mapear *****************
  1183 ;; Defined at:
  1184 ;;		line 99 in file "main.c"
  1185 ;; Parameters:    Size  Location     Type
  1186 ;;  valor           1    wreg     unsigned char 
  1187 ;;  limReal         1    0[BANK0 ] unsigned char 
  1188 ;;  limSup          1    1[BANK0 ] unsigned char 
  1189 ;; Auto vars:     Size  Location     Type
  1190 ;;  valor           1    6[BANK0 ] unsigned char 
  1191 ;;  resultado       6    7[BANK0 ] unsigned int [3]
  1192 ;;  dividendo       2   13[BANK0 ] unsigned int 
  1193 ;; Return value:  Size  Location     Type
  1194 ;;                  1    wreg      PTR unsigned int 
  1195 ;; Registers used:
  1196 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1197 ;; Tracked objects:
  1198 ;;		On entry : 0/0
  1199 ;;		On exit  : 0/0
  1200 ;;		Unchanged: 0/0
  1201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1202 ;;      Params:         0       2       0       0       0
  1203 ;;      Locals:         0       9       0       0       0
  1204 ;;      Temps:          0       4       0       0       0
  1205 ;;      Totals:         0      15       0       0       0
  1206 ;;Total ram usage:       15 bytes
  1207 ;; Hardware stack levels used:    1
  1208 ;; Hardware stack levels required when called:    2
  1209 ;; This function calls:
  1210 ;;		___wmul
  1211 ;; This function is called by:
  1212 ;;		_main
  1213 ;; This function uses a non-reentrant model
  1214 ;;
  1215                           
  1216                           
  1217                           ;psect for function _mapear
  1218  020E                     _mapear:	
  1219                           
  1220                           ;incstack = 0
  1221                           ; Regs used in _mapear: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1222                           ;mapear@valor stored from wreg
  1223  020E  1283               	bcf	3,5	;RP0=0, select bank0
  1224  020F  1303               	bcf	3,6	;RP1=0, select bank0
  1225  0210  00B9               	movwf	mapear@valor
  1226                           
  1227                           ;main.c: 100:     uint16_t resultado[3] = {0,0,0};
  1228  0211  303A               	movlw	mapear@resultado& (0+255)
  1229  0212  0084               	movwf	4
  1230  0213  3006               	movlw	6
  1231  0214  00FF               	movwf	127
  1232  0215                     u270:	
  1233  0215  1383               	bcf	3,7	;select IRP bank0
  1234  0216  0180               	clrf	0
  1235  0217  0A84               	incf	4,f
  1236  0218  0BFF               	decfsz	127,f
  1237  0219  2A15               	goto	u270
  1238                           
  1239                           ;main.c: 101:     uint16_t dividendo = valor*limSup;
  1240  021A  0839               	movf	mapear@valor,w
  1241  021B  00B5               	movwf	??_mapear
  1242  021C  01B6               	clrf	??_mapear+1
  1243  021D  0835               	movf	??_mapear,w
  1244  021E  00F2               	movwf	___wmul@multiplier
  1245  021F  0836               	movf	??_mapear+1,w
  1246  0220  00F3               	movwf	___wmul@multiplier+1
  1247  0221  0834               	movf	mapear@limSup,w
  1248  0222  00B7               	movwf	??_mapear+2
  1249  0223  01B8               	clrf	??_mapear+3
  1250  0224  0837               	movf	??_mapear+2,w
  1251  0225  00F4               	movwf	___wmul@multiplicand
  1252  0226  0838               	movf	??_mapear+3,w
  1253  0227  00F5               	movwf	___wmul@multiplicand+1
  1254  0228  120A  118A  2462  120A  118A  	fcall	___wmul
  1255  022D  0873               	movf	?___wmul+1,w
  1256  022E  1283               	bcf	3,5	;RP0=0, select bank0
  1257  022F  1303               	bcf	3,6	;RP1=0, select bank0
  1258  0230  00C1               	movwf	mapear@dividendo+1
  1259  0231  0872               	movf	?___wmul,w
  1260  0232  00C0               	movwf	mapear@dividendo
  1261  0233                     l1879:	
  1262                           ;main.c: 102:     while (limReal <= dividendo){
  1263                           
  1264                           
  1265                           ;main.c: 102:     while (limReal <= dividendo){
  1266  0233  0833               	movf	mapear@limReal,w
  1267  0234  00B5               	movwf	??_mapear
  1268  0235  01B6               	clrf	??_mapear+1
  1269  0236  0836               	movf	??_mapear+1,w
  1270  0237  0241               	subwf	mapear@dividendo+1,w
  1271  0238  1D03               	skipz
  1272  0239  2A3C               	goto	u285
  1273  023A  0835               	movf	??_mapear,w
  1274  023B  0240               	subwf	mapear@dividendo,w
  1275  023C                     u285:	
  1276  023C  1C03               	btfss	3,0
  1277  023D  2A4E               	goto	l1881
  1278                           
  1279                           ;main.c: 103:         resultado[0] = resultado[0] + 1;
  1280  023E  083A               	movf	mapear@resultado,w
  1281  023F  3E01               	addlw	1
  1282  0240  00BA               	movwf	mapear@resultado
  1283  0241  083B               	movf	mapear@resultado+1,w
  1284  0242  1803               	skipnc
  1285  0243  3E01               	addlw	1
  1286  0244  3E00               	addlw	0
  1287  0245  00BB               	movwf	mapear@resultado+1
  1288                           
  1289                           ;main.c: 104:         dividendo = dividendo - limReal;
  1290  0246  0833               	movf	mapear@limReal,w
  1291  0247  0240               	subwf	mapear@dividendo,w
  1292  0248  00C0               	movwf	mapear@dividendo
  1293  0249  0841               	movf	mapear@dividendo+1,w
  1294  024A  1C03               	skipc
  1295  024B  0341               	decf	mapear@dividendo+1,w
  1296  024C  00C1               	movwf	mapear@dividendo+1
  1297  024D  2A33               	goto	l1879
  1298  024E                     l1881:	
  1299                           
  1300                           ;main.c: 106:     dividendo = dividendo *10;
  1301  024E  0841               	movf	mapear@dividendo+1,w
  1302  024F  00F3               	movwf	___wmul@multiplier+1
  1303  0250  0840               	movf	mapear@dividendo,w
  1304  0251  00F2               	movwf	___wmul@multiplier
  1305  0252  300A               	movlw	10
  1306  0253  00F4               	movwf	___wmul@multiplicand
  1307  0254  3000               	movlw	0
  1308  0255  00F5               	movwf	___wmul@multiplicand+1
  1309  0256  120A  118A  2462  120A  118A  	fcall	___wmul
  1310  025B  0873               	movf	?___wmul+1,w
  1311  025C  1283               	bcf	3,5	;RP0=0, select bank0
  1312  025D  1303               	bcf	3,6	;RP1=0, select bank0
  1313  025E  00C1               	movwf	mapear@dividendo+1
  1314  025F  0872               	movf	?___wmul,w
  1315  0260  00C0               	movwf	mapear@dividendo
  1316  0261                     l1885:	
  1317                           ;main.c: 107:     while (limReal <= dividendo){
  1318                           
  1319                           
  1320                           ;main.c: 107:     while (limReal <= dividendo){
  1321  0261  0833               	movf	mapear@limReal,w
  1322  0262  00B5               	movwf	??_mapear
  1323  0263  01B6               	clrf	??_mapear+1
  1324  0264  0836               	movf	??_mapear+1,w
  1325  0265  0241               	subwf	mapear@dividendo+1,w
  1326  0266  1D03               	skipz
  1327  0267  2A6A               	goto	u295
  1328  0268  0835               	movf	??_mapear,w
  1329  0269  0240               	subwf	mapear@dividendo,w
  1330  026A                     u295:	
  1331  026A  1C03               	btfss	3,0
  1332  026B  2A7C               	goto	l1887
  1333                           
  1334                           ;main.c: 108:         resultado[1] = resultado[1] +1;
  1335  026C  083C               	movf	mapear@resultado+2,w
  1336  026D  3E01               	addlw	1
  1337  026E  00BC               	movwf	mapear@resultado+2
  1338  026F  083D               	movf	mapear@resultado+3,w
  1339  0270  1803               	skipnc
  1340  0271  3E01               	addlw	1
  1341  0272  3E00               	addlw	0
  1342  0273  00BD               	movwf	mapear@resultado+3
  1343                           
  1344                           ;main.c: 109:         dividendo = dividendo - limReal;
  1345  0274  0833               	movf	mapear@limReal,w
  1346  0275  0240               	subwf	mapear@dividendo,w
  1347  0276  00C0               	movwf	mapear@dividendo
  1348  0277  0841               	movf	mapear@dividendo+1,w
  1349  0278  1C03               	skipc
  1350  0279  0341               	decf	mapear@dividendo+1,w
  1351  027A  00C1               	movwf	mapear@dividendo+1
  1352  027B  2A61               	goto	l1885
  1353  027C                     l1887:	
  1354                           
  1355                           ;main.c: 111:     dividendo = dividendo *10;
  1356  027C  0841               	movf	mapear@dividendo+1,w
  1357  027D  00F3               	movwf	___wmul@multiplier+1
  1358  027E  0840               	movf	mapear@dividendo,w
  1359  027F  00F2               	movwf	___wmul@multiplier
  1360  0280  300A               	movlw	10
  1361  0281  00F4               	movwf	___wmul@multiplicand
  1362  0282  3000               	movlw	0
  1363  0283  00F5               	movwf	___wmul@multiplicand+1
  1364  0284  120A  118A  2462  120A  118A  	fcall	___wmul
  1365  0289  0873               	movf	?___wmul+1,w
  1366  028A  1283               	bcf	3,5	;RP0=0, select bank0
  1367  028B  1303               	bcf	3,6	;RP1=0, select bank0
  1368  028C  00C1               	movwf	mapear@dividendo+1
  1369  028D  0872               	movf	?___wmul,w
  1370  028E  00C0               	movwf	mapear@dividendo
  1371  028F                     l1891:	
  1372                           ;main.c: 112:     while (limReal <= dividendo){
  1373                           
  1374                           
  1375                           ;main.c: 112:     while (limReal <= dividendo){
  1376  028F  0833               	movf	mapear@limReal,w
  1377  0290  00B5               	movwf	??_mapear
  1378  0291  01B6               	clrf	??_mapear+1
  1379  0292  0836               	movf	??_mapear+1,w
  1380  0293  0241               	subwf	mapear@dividendo+1,w
  1381  0294  1D03               	skipz
  1382  0295  2A98               	goto	u305
  1383  0296  0835               	movf	??_mapear,w
  1384  0297  0240               	subwf	mapear@dividendo,w
  1385  0298                     u305:	
  1386  0298  1C03               	btfss	3,0
  1387  0299  2AAA               	goto	l1893
  1388                           
  1389                           ;main.c: 113:         resultado[2] = resultado[2] +1;
  1390  029A  083E               	movf	mapear@resultado+4,w
  1391  029B  3E01               	addlw	1
  1392  029C  00BE               	movwf	mapear@resultado+4
  1393  029D  083F               	movf	mapear@resultado+5,w
  1394  029E  1803               	skipnc
  1395  029F  3E01               	addlw	1
  1396  02A0  3E00               	addlw	0
  1397  02A1  00BF               	movwf	mapear@resultado+5
  1398                           
  1399                           ;main.c: 114:         dividendo = dividendo - limReal;
  1400  02A2  0833               	movf	mapear@limReal,w
  1401  02A3  0240               	subwf	mapear@dividendo,w
  1402  02A4  00C0               	movwf	mapear@dividendo
  1403  02A5  0841               	movf	mapear@dividendo+1,w
  1404  02A6  1C03               	skipc
  1405  02A7  0341               	decf	mapear@dividendo+1,w
  1406  02A8  00C1               	movwf	mapear@dividendo+1
  1407  02A9  2A8F               	goto	l1891
  1408  02AA                     l1893:	
  1409                           
  1410                           ;main.c: 117:     return resultado;
  1411  02AA  303A               	movlw	(low (mapear@resultado| 0))& (0+255)
  1412  02AB  0008               	return
  1413  02AC                     __end_of_mapear:	
  1414                           
  1415                           	psect	text3
  1416  0462                     __ptext3:	
  1417 ;; *************** function ___wmul *****************
  1418 ;; Defined at:
  1419 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul16.c"
  1420 ;; Parameters:    Size  Location     Type
  1421 ;;  multiplier      2    2[COMMON] unsigned int 
  1422 ;;  multiplicand    2    4[COMMON] unsigned int 
  1423 ;; Auto vars:     Size  Location     Type
  1424 ;;  product         2    6[COMMON] unsigned int 
  1425 ;; Return value:  Size  Location     Type
  1426 ;;                  2    2[COMMON] unsigned int 
  1427 ;; Registers used:
  1428 ;;		wreg, status,2, status,0
  1429 ;; Tracked objects:
  1430 ;;		On entry : 0/0
  1431 ;;		On exit  : 0/0
  1432 ;;		Unchanged: 0/0
  1433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1434 ;;      Params:         4       0       0       0       0
  1435 ;;      Locals:         2       0       0       0       0
  1436 ;;      Temps:          0       0       0       0       0
  1437 ;;      Totals:         6       0       0       0       0
  1438 ;;Total ram usage:        6 bytes
  1439 ;; Hardware stack levels used:    1
  1440 ;; Hardware stack levels required when called:    1
  1441 ;; This function calls:
  1442 ;;		Nothing
  1443 ;; This function is called by:
  1444 ;;		_mapear
  1445 ;; This function uses a non-reentrant model
  1446 ;;
  1447                           
  1448                           
  1449                           ;psect for function ___wmul
  1450  0462                     ___wmul:	
  1451                           
  1452                           ;incstack = 0
  1453                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1454  0462  01F6               	clrf	___wmul@product
  1455  0463  01F7               	clrf	___wmul@product+1
  1456  0464                     l1343:	
  1457  0464  1C72               	btfss	___wmul@multiplier,0
  1458  0465  2C6C               	goto	l307
  1459  0466  0874               	movf	___wmul@multiplicand,w
  1460  0467  07F6               	addwf	___wmul@product,f
  1461  0468  1803               	skipnc
  1462  0469  0AF7               	incf	___wmul@product+1,f
  1463  046A  0875               	movf	___wmul@multiplicand+1,w
  1464  046B  07F7               	addwf	___wmul@product+1,f
  1465  046C                     l307:	
  1466  046C  3001               	movlw	1
  1467  046D                     u165:	
  1468  046D  1003               	clrc
  1469  046E  0DF4               	rlf	___wmul@multiplicand,f
  1470  046F  0DF5               	rlf	___wmul@multiplicand+1,f
  1471  0470  3EFF               	addlw	-1
  1472  0471  1D03               	skipz
  1473  0472  2C6D               	goto	u165
  1474  0473  3001               	movlw	1
  1475  0474                     u175:	
  1476  0474  1003               	clrc
  1477  0475  0CF3               	rrf	___wmul@multiplier+1,f
  1478  0476  0CF2               	rrf	___wmul@multiplier,f
  1479  0477  3EFF               	addlw	-1
  1480  0478  1D03               	skipz
  1481  0479  2C74               	goto	u175
  1482  047A  0872               	movf	___wmul@multiplier,w
  1483  047B  0473               	iorwf	___wmul@multiplier+1,w
  1484  047C  1D03               	btfss	3,2
  1485  047D  2C64               	goto	l1343
  1486  047E  0877               	movf	___wmul@product+1,w
  1487  047F  00F3               	movwf	?___wmul+1
  1488  0480  0876               	movf	___wmul@product,w
  1489  0481  00F2               	movwf	?___wmul
  1490  0482  0008               	return
  1491  0483                     __end_of___wmul:	
  1492                           
  1493                           	psect	text4
  1494  0337                     __ptext4:	
  1495 ;; *************** function _LCD_init *****************
  1496 ;; Defined at:
  1497 ;;		line 57 in file "LCD_8bits.c"
  1498 ;; Parameters:    Size  Location     Type
  1499 ;;		None
  1500 ;; Auto vars:     Size  Location     Type
  1501 ;;		None
  1502 ;; Return value:  Size  Location     Type
  1503 ;;                  1    wreg      void 
  1504 ;; Registers used:
  1505 ;;		wreg, status,2, status,0, pclath, cstack
  1506 ;; Tracked objects:
  1507 ;;		On entry : 0/0
  1508 ;;		On exit  : 0/0
  1509 ;;		Unchanged: 0/0
  1510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1511 ;;      Params:         0       0       0       0       0
  1512 ;;      Locals:         0       0       0       0       0
  1513 ;;      Temps:          2       0       0       0       0
  1514 ;;      Totals:         2       0       0       0       0
  1515 ;;Total ram usage:        2 bytes
  1516 ;; Hardware stack levels used:    1
  1517 ;; Hardware stack levels required when called:    2
  1518 ;; This function calls:
  1519 ;;		_LCD_Cmd
  1520 ;; This function is called by:
  1521 ;;		_main
  1522 ;; This function uses a non-reentrant model
  1523 ;;
  1524                           
  1525                           
  1526                           ;psect for function _LCD_init
  1527  0337                     _LCD_init:	
  1528                           
  1529                           ;LCD_8bits.c: 58:     _delay((unsigned long)((20)*(4000000/4000.0)));
  1530                           
  1531                           ;incstack = 0
  1532                           ; Regs used in _LCD_init: [wreg+status,2+status,0+pclath+cstack]
  1533  0337  301A               	movlw	26
  1534  0338  00F6               	movwf	??_LCD_init+1
  1535  0339  30F8               	movlw	248
  1536  033A  00F5               	movwf	??_LCD_init
  1537  033B                     u347:	
  1538  033B  0BF5               	decfsz	??_LCD_init,f
  1539  033C  2B3B               	goto	u347
  1540  033D  0BF6               	decfsz	??_LCD_init+1,f
  1541  033E  2B3B               	goto	u347
  1542  033F  0000               	nop
  1543                           
  1544                           ;LCD_8bits.c: 59:     LCD_Cmd(0x30);
  1545  0340  3030               	movlw	48
  1546  0341  120A  118A  23E3  120A  118A  	fcall	_LCD_Cmd
  1547                           
  1548                           ;LCD_8bits.c: 60:     _delay((unsigned long)((5)*(4000000/4000.0)));
  1549  0346  3007               	movlw	7
  1550  0347  00F6               	movwf	??_LCD_init+1
  1551  0348  307D               	movlw	125
  1552  0349  00F5               	movwf	??_LCD_init
  1553  034A                     u357:	
  1554  034A  0BF5               	decfsz	??_LCD_init,f
  1555  034B  2B4A               	goto	u357
  1556  034C  0BF6               	decfsz	??_LCD_init+1,f
  1557  034D  2B4A               	goto	u357
  1558                           
  1559                           ;LCD_8bits.c: 61:     LCD_Cmd(0x30);
  1560  034E  3030               	movlw	48
  1561  034F  120A  118A  23E3  120A  118A  	fcall	_LCD_Cmd
  1562                           
  1563                           ;LCD_8bits.c: 62:     _delay((unsigned long)((100)*(4000000/4000000.0)));
  1564  0354  3021               	movlw	33
  1565  0355  00F5               	movwf	??_LCD_init
  1566  0356                     u367:	
  1567  0356  0BF5               	decfsz	??_LCD_init,f
  1568  0357  2B56               	goto	u367
  1569                           
  1570                           ;LCD_8bits.c: 63:     LCD_Cmd(0x30);
  1571  0358  3030               	movlw	48
  1572  0359  120A  118A  23E3  120A  118A  	fcall	_LCD_Cmd
  1573                           
  1574                           ;LCD_8bits.c: 64:     _delay((unsigned long)((100)*(4000000/4000000.0)));
  1575  035E  3021               	movlw	33
  1576  035F  00F5               	movwf	??_LCD_init
  1577  0360                     u377:	
  1578  0360  0BF5               	decfsz	??_LCD_init,f
  1579  0361  2B60               	goto	u377
  1580                           
  1581                           ;LCD_8bits.c: 65:     LCD_Cmd(0x38);
  1582  0362  3038               	movlw	56
  1583  0363  120A  118A  23E3  120A  118A  	fcall	_LCD_Cmd
  1584                           
  1585                           ;LCD_8bits.c: 66:     _delay((unsigned long)((53)*(4000000/4000000.0)));
  1586  0368  3011               	movlw	17
  1587  0369  00F5               	movwf	??_LCD_init
  1588  036A                     u387:	
  1589  036A  0BF5               	decfsz	??_LCD_init,f
  1590  036B  2B6A               	goto	u387
  1591  036C  0000               	nop
  1592                           
  1593                           ;LCD_8bits.c: 67:     LCD_Cmd(0x08);
  1594  036D  3008               	movlw	8
  1595  036E  120A  118A  23E3  120A  118A  	fcall	_LCD_Cmd
  1596                           
  1597                           ;LCD_8bits.c: 68:     _delay((unsigned long)((53)*(4000000/4000000.0)));
  1598  0373  3011               	movlw	17
  1599  0374  00F5               	movwf	??_LCD_init
  1600  0375                     u397:	
  1601  0375  0BF5               	decfsz	??_LCD_init,f
  1602  0376  2B75               	goto	u397
  1603  0377  0000               	nop
  1604                           
  1605                           ;LCD_8bits.c: 69:     LCD_Cmd(0x01);
  1606  0378  3001               	movlw	1
  1607  0379  120A  118A  23E3  120A  118A  	fcall	_LCD_Cmd
  1608                           
  1609                           ;LCD_8bits.c: 70:     _delay((unsigned long)((3)*(4000000/4000.0)));
  1610  037E  3004               	movlw	4
  1611  037F  00F6               	movwf	??_LCD_init+1
  1612  0380  30E4               	movlw	228
  1613  0381  00F5               	movwf	??_LCD_init
  1614  0382                     u407:	
  1615  0382  0BF5               	decfsz	??_LCD_init,f
  1616  0383  2B82               	goto	u407
  1617  0384  0BF6               	decfsz	??_LCD_init+1,f
  1618  0385  2B82               	goto	u407
  1619  0386  0000               	nop
  1620                           
  1621                           ;LCD_8bits.c: 71:     LCD_Cmd(0x06);
  1622  0387  3006               	movlw	6
  1623  0388  120A  118A  23E3  120A  118A  	fcall	_LCD_Cmd
  1624                           
  1625                           ;LCD_8bits.c: 72:     _delay((unsigned long)((53)*(4000000/4000000.0)));
  1626  038D  3011               	movlw	17
  1627  038E  00F5               	movwf	??_LCD_init
  1628  038F                     u417:	
  1629  038F  0BF5               	decfsz	??_LCD_init,f
  1630  0390  2B8F               	goto	u417
  1631  0391  0000               	nop
  1632                           
  1633                           ;LCD_8bits.c: 73:     LCD_Cmd(0x0C);
  1634  0392  300C               	movlw	12
  1635  0393  120A  118A  23E3  120A  118A  	fcall	_LCD_Cmd
  1636                           
  1637                           ;LCD_8bits.c: 74:     _delay((unsigned long)((53)*(4000000/4000000.0)));
  1638  0398  3011               	movlw	17
  1639  0399  00F5               	movwf	??_LCD_init
  1640  039A                     u427:	
  1641  039A  0BF5               	decfsz	??_LCD_init,f
  1642  039B  2B9A               	goto	u427
  1643  039C  0000               	nop
  1644  039D  0008               	return
  1645  039E                     __end_of_LCD_init:	
  1646                           
  1647                           	psect	text5
  1648  0440                     __ptext5:	
  1649 ;; *************** function _LCD_Write_String *****************
  1650 ;; Defined at:
  1651 ;;		line 86 in file "LCD_8bits.c"
  1652 ;; Parameters:    Size  Location     Type
  1653 ;;  a               1    wreg     PTR unsigned char 
  1654 ;;		 -> STR_1(15), 
  1655 ;; Auto vars:     Size  Location     Type
  1656 ;;  a               1    6[COMMON] PTR unsigned char 
  1657 ;;		 -> STR_1(15), 
  1658 ;;  n               2    4[COMMON] int 
  1659 ;; Return value:  Size  Location     Type
  1660 ;;                  1    wreg      void 
  1661 ;; Registers used:
  1662 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1663 ;; Tracked objects:
  1664 ;;		On entry : 0/0
  1665 ;;		On exit  : 0/0
  1666 ;;		Unchanged: 0/0
  1667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1668 ;;      Params:         0       0       0       0       0
  1669 ;;      Locals:         3       0       0       0       0
  1670 ;;      Temps:          0       0       0       0       0
  1671 ;;      Totals:         3       0       0       0       0
  1672 ;;Total ram usage:        3 bytes
  1673 ;; Hardware stack levels used:    1
  1674 ;; Hardware stack levels required when called:    2
  1675 ;; This function calls:
  1676 ;;		_LCD_Write_Character
  1677 ;; This function is called by:
  1678 ;;		_main
  1679 ;; This function uses a non-reentrant model
  1680 ;;
  1681                           
  1682                           
  1683                           ;psect for function _LCD_Write_String
  1684  0440                     _LCD_Write_String:	
  1685                           
  1686                           ;incstack = 0
  1687                           ; Regs used in _LCD_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1688                           ;LCD_Write_String@a stored from wreg
  1689  0440  00F6               	movwf	LCD_Write_String@a
  1690                           
  1691                           ;LCD_8bits.c: 87:     int n;;LCD_8bits.c: 88:     for(n = 0; a[n] != '\0'; n++){
  1692  0441  01F4               	clrf	LCD_Write_String@n
  1693  0442  01F5               	clrf	LCD_Write_String@n+1
  1694  0443                     l1455:	
  1695  0443  0874               	movf	LCD_Write_String@n,w
  1696  0444  0776               	addwf	LCD_Write_String@a,w
  1697  0445  0084               	movwf	4
  1698  0446  120A  118A  24A0  120A  118A  	fcall	stringdir
  1699  044B  3A00               	xorlw	0
  1700  044C  1903               	btfsc	3,2
  1701  044D  0008               	return
  1702                           
  1703                           ;LCD_8bits.c: 89:         LCD_Write_Character(a[n]);
  1704  044E  0874               	movf	LCD_Write_String@n,w
  1705  044F  0776               	addwf	LCD_Write_String@a,w
  1706  0450  0084               	movwf	4
  1707  0451  120A  118A  24A0  120A  118A  	fcall	stringdir
  1708  0456  120A  118A  24C7  120A  118A  	fcall	_LCD_Write_Character
  1709                           
  1710                           ;LCD_8bits.c: 90:     }
  1711  045B  3001               	movlw	1
  1712  045C  07F4               	addwf	LCD_Write_String@n,f
  1713  045D  1803               	skipnc
  1714  045E  0AF5               	incf	LCD_Write_String@n+1,f
  1715  045F  3000               	movlw	0
  1716  0460  07F5               	addwf	LCD_Write_String@n+1,f
  1717  0461  2C43               	goto	l1455
  1718  0462                     __end_of_LCD_Write_String:	
  1719                           
  1720                           	psect	text6
  1721  04C7                     __ptext6:	
  1722 ;; *************** function _LCD_Write_Character *****************
  1723 ;; Defined at:
  1724 ;;		line 77 in file "LCD_8bits.c"
  1725 ;; Parameters:    Size  Location     Type
  1726 ;;  caracter        1    wreg     unsigned char 
  1727 ;; Auto vars:     Size  Location     Type
  1728 ;;  caracter        1    3[COMMON] unsigned char 
  1729 ;; Return value:  Size  Location     Type
  1730 ;;                  1    wreg      void 
  1731 ;; Registers used:
  1732 ;;		wreg
  1733 ;; Tracked objects:
  1734 ;;		On entry : 0/0
  1735 ;;		On exit  : 0/0
  1736 ;;		Unchanged: 0/0
  1737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1738 ;;      Params:         0       0       0       0       0
  1739 ;;      Locals:         1       0       0       0       0
  1740 ;;      Temps:          1       0       0       0       0
  1741 ;;      Totals:         2       0       0       0       0
  1742 ;;Total ram usage:        2 bytes
  1743 ;; Hardware stack levels used:    1
  1744 ;; Hardware stack levels required when called:    1
  1745 ;; This function calls:
  1746 ;;		Nothing
  1747 ;; This function is called by:
  1748 ;;		_main
  1749 ;;		_LCD_Write_String
  1750 ;; This function uses a non-reentrant model
  1751 ;;
  1752                           
  1753                           
  1754                           ;psect for function _LCD_Write_Character
  1755  04C7                     _LCD_Write_Character:	
  1756                           
  1757                           ;incstack = 0
  1758                           ; Regs used in _LCD_Write_Character: [wreg]
  1759                           ;LCD_Write_Character@caracter stored from wreg
  1760  04C7  00F3               	movwf	LCD_Write_Character@caracter
  1761                           
  1762                           ;LCD_8bits.c: 78:     PORTCbits.RC0 = 1;
  1763  04C8  1283               	bcf	3,5	;RP0=0, select bank0
  1764  04C9  1303               	bcf	3,6	;RP1=0, select bank0
  1765  04CA  1407               	bsf	7,0	;volatile
  1766                           
  1767                           ;LCD_8bits.c: 80:     PORTD = caracter;
  1768  04CB  0873               	movf	LCD_Write_Character@caracter,w
  1769  04CC  0088               	movwf	8	;volatile
  1770                           
  1771                           ;LCD_8bits.c: 81:     PORTCbits.RC1 = 1;
  1772  04CD  1487               	bsf	7,1	;volatile
  1773                           
  1774                           ;LCD_8bits.c: 82:     _delay((unsigned long)((40)*(4000000/4000000.0)));
  1775  04CE  300D               	movlw	13
  1776  04CF  00F2               	movwf	??_LCD_Write_Character
  1777  04D0                     u437:	
  1778  04D0  0BF2               	decfsz	??_LCD_Write_Character,f
  1779  04D1  2CD0               	goto	u437
  1780                           
  1781                           ;LCD_8bits.c: 83:     PORTCbits.RC1 = 0;
  1782  04D2  1283               	bcf	3,5	;RP0=0, select bank0
  1783  04D3  1303               	bcf	3,6	;RP1=0, select bank0
  1784  04D4  1087               	bcf	7,1	;volatile
  1785  04D5  0008               	return
  1786  04D6                     __end_of_LCD_Write_Character:	
  1787                           
  1788                           	psect	text7
  1789  0412                     __ptext7:	
  1790 ;; *************** function _LCD_Set_Cursor *****************
  1791 ;; Defined at:
  1792 ;;		line 93 in file "LCD_8bits.c"
  1793 ;; Parameters:    Size  Location     Type
  1794 ;;  linea           1    wreg     unsigned char 
  1795 ;;  columna         1    5[COMMON] unsigned char 
  1796 ;; Auto vars:     Size  Location     Type
  1797 ;;  linea           1    0[BANK0 ] unsigned char 
  1798 ;;  corrimiento     1    1[BANK0 ] unsigned char 
  1799 ;; Return value:  Size  Location     Type
  1800 ;;                  1    wreg      void 
  1801 ;; Registers used:
  1802 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1803 ;; Tracked objects:
  1804 ;;		On entry : 0/0
  1805 ;;		On exit  : 0/0
  1806 ;;		Unchanged: 0/0
  1807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1808 ;;      Params:         1       0       0       0       0
  1809 ;;      Locals:         0       2       0       0       0
  1810 ;;      Temps:          2       0       0       0       0
  1811 ;;      Totals:         3       2       0       0       0
  1812 ;;Total ram usage:        5 bytes
  1813 ;; Hardware stack levels used:    1
  1814 ;; Hardware stack levels required when called:    2
  1815 ;; This function calls:
  1816 ;;		_LCD_Cmd
  1817 ;; This function is called by:
  1818 ;;		_main
  1819 ;; This function uses a non-reentrant model
  1820 ;;
  1821                           
  1822                           
  1823                           ;psect for function _LCD_Set_Cursor
  1824  0412                     _LCD_Set_Cursor:	
  1825                           
  1826                           ;incstack = 0
  1827                           ; Regs used in _LCD_Set_Cursor: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1828                           ;LCD_Set_Cursor@linea stored from wreg
  1829  0412  1283               	bcf	3,5	;RP0=0, select bank0
  1830  0413  1303               	bcf	3,6	;RP1=0, select bank0
  1831  0414  00B3               	movwf	LCD_Set_Cursor@linea
  1832                           
  1833                           ;LCD_8bits.c: 95:     switch (linea){
  1834  0415  2C2F               	goto	l1865
  1835  0416                     l1855:	
  1836                           
  1837                           ;LCD_8bits.c: 97:             corrimiento = 0x80 + columna;
  1838  0416  0875               	movf	LCD_Set_Cursor@columna,w
  1839  0417  3E80               	addlw	128
  1840  0418  00F6               	movwf	??_LCD_Set_Cursor
  1841  0419  0876               	movf	??_LCD_Set_Cursor,w
  1842  041A  00B4               	movwf	LCD_Set_Cursor@corrimiento
  1843                           
  1844                           ;LCD_8bits.c: 98:             LCD_Cmd(corrimiento);
  1845  041B  0834               	movf	LCD_Set_Cursor@corrimiento,w
  1846  041C  120A  118A  23E3   	fcall	_LCD_Cmd
  1847                           
  1848                           ;LCD_8bits.c: 99:             break;
  1849  041F  0008               	return
  1850  0420                     l1859:	
  1851                           
  1852                           ;LCD_8bits.c: 101:             corrimiento = 0x80 + 0x40 + columna;
  1853  0420  0875               	movf	LCD_Set_Cursor@columna,w
  1854  0421  3EC0               	addlw	192
  1855  0422  00F6               	movwf	??_LCD_Set_Cursor
  1856  0423  0876               	movf	??_LCD_Set_Cursor,w
  1857  0424  00B4               	movwf	LCD_Set_Cursor@corrimiento
  1858                           
  1859                           ;LCD_8bits.c: 102:             LCD_Cmd(corrimiento);
  1860  0425  0834               	movf	LCD_Set_Cursor@corrimiento,w
  1861  0426  120A  118A  23E3   	fcall	_LCD_Cmd
  1862                           
  1863                           ;LCD_8bits.c: 103:             break;
  1864  0429  0008               	return
  1865  042A                     l1863:	
  1866                           
  1867                           ;LCD_8bits.c: 105:             LCD_Cmd(0x80);
  1868  042A  3080               	movlw	128
  1869  042B  120A  118A  23E3   	fcall	_LCD_Cmd
  1870                           
  1871                           ;LCD_8bits.c: 106:     }
  1872  042E  0008               	return
  1873  042F                     l1865:	
  1874  042F  0833               	movf	LCD_Set_Cursor@linea,w
  1875  0430  00F6               	movwf	??_LCD_Set_Cursor
  1876  0431  01F7               	clrf	??_LCD_Set_Cursor+1
  1877                           
  1878                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1879                           ; Switch size 1, requested type "simple"
  1880                           ; Number of cases is 1, Range of values is 0 to 0
  1881                           ; switch strategies available:
  1882                           ; Name         Instructions Cycles
  1883                           ; simple_byte            4     3 (average)
  1884                           ; direct_byte           11     8 (fixed)
  1885                           ; jumptable            260     6 (fixed)
  1886                           ;	Chosen strategy is simple_byte
  1887  0432  0877               	movf	??_LCD_Set_Cursor+1,w
  1888  0433  3A00               	xorlw	0	; case 0
  1889  0434  1903               	skipnz
  1890  0435  2C37               	goto	l2173
  1891  0436  2C2A               	goto	l1863
  1892  0437                     l2173:	
  1893                           
  1894                           ; Switch size 1, requested type "simple"
  1895                           ; Number of cases is 2, Range of values is 1 to 2
  1896                           ; switch strategies available:
  1897                           ; Name         Instructions Cycles
  1898                           ; simple_byte            7     4 (average)
  1899                           ; direct_byte           17    11 (fixed)
  1900                           ; jumptable            263     9 (fixed)
  1901                           ;	Chosen strategy is simple_byte
  1902  0437  0876               	movf	??_LCD_Set_Cursor,w
  1903  0438  3A01               	xorlw	1	; case 1
  1904  0439  1903               	skipnz
  1905  043A  2C16               	goto	l1855
  1906  043B  3A03               	xorlw	3	; case 2
  1907  043C  1903               	skipnz
  1908  043D  2C20               	goto	l1859
  1909  043E  2C2A               	goto	l1863
  1910  043F  0008               	return
  1911  0440                     __end_of_LCD_Set_Cursor:	
  1912                           
  1913                           	psect	text8
  1914  03E3                     __ptext8:	
  1915 ;; *************** function _LCD_Cmd *****************
  1916 ;; Defined at:
  1917 ;;		line 33 in file "LCD_8bits.c"
  1918 ;; Parameters:    Size  Location     Type
  1919 ;;  comando         1    wreg     unsigned char 
  1920 ;; Auto vars:     Size  Location     Type
  1921 ;;  comando         1    4[COMMON] unsigned char 
  1922 ;; Return value:  Size  Location     Type
  1923 ;;                  1    wreg      void 
  1924 ;; Registers used:
  1925 ;;		wreg
  1926 ;; Tracked objects:
  1927 ;;		On entry : 0/0
  1928 ;;		On exit  : 0/0
  1929 ;;		Unchanged: 0/0
  1930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1931 ;;      Params:         0       0       0       0       0
  1932 ;;      Locals:         1       0       0       0       0
  1933 ;;      Temps:          2       0       0       0       0
  1934 ;;      Totals:         3       0       0       0       0
  1935 ;;Total ram usage:        3 bytes
  1936 ;; Hardware stack levels used:    1
  1937 ;; Hardware stack levels required when called:    1
  1938 ;; This function calls:
  1939 ;;		Nothing
  1940 ;; This function is called by:
  1941 ;;		_LCD_init
  1942 ;;		_LCD_Set_Cursor
  1943 ;;		_LCD_clear
  1944 ;;		_LCD_home
  1945 ;;		_LCD_Shift_links
  1946 ;;		_LCD_Shift_rechts
  1947 ;;		_LCD_Cursor_rechts
  1948 ;;		_LCD_Cursor_links
  1949 ;; This function uses a non-reentrant model
  1950 ;;
  1951                           
  1952                           
  1953                           ;psect for function _LCD_Cmd
  1954  03E3                     _LCD_Cmd:	
  1955                           
  1956                           ;incstack = 0
  1957                           ; Regs used in _LCD_Cmd: [wreg]
  1958                           ;LCD_Cmd@comando stored from wreg
  1959  03E3  00F4               	movwf	LCD_Cmd@comando
  1960                           
  1961                           ;LCD_8bits.c: 34:     PORTCbits.RC0 = 0;
  1962  03E4  1283               	bcf	3,5	;RP0=0, select bank0
  1963  03E5  1303               	bcf	3,6	;RP1=0, select bank0
  1964  03E6  1007               	bcf	7,0	;volatile
  1965                           
  1966                           ;LCD_8bits.c: 35:     _delay((unsigned long)((5)*(4000000/4000.0)));
  1967  03E7  3007               	movlw	7
  1968  03E8  00F3               	movwf	??_LCD_Cmd+1
  1969  03E9  307D               	movlw	125
  1970  03EA  00F2               	movwf	??_LCD_Cmd
  1971  03EB                     u447:	
  1972  03EB  0BF2               	decfsz	??_LCD_Cmd,f
  1973  03EC  2BEB               	goto	u447
  1974  03ED  0BF3               	decfsz	??_LCD_Cmd+1,f
  1975  03EE  2BEB               	goto	u447
  1976                           
  1977                           ;LCD_8bits.c: 36:     PORTCbits.RC1 = 1;
  1978  03EF  1283               	bcf	3,5	;RP0=0, select bank0
  1979  03F0  1303               	bcf	3,6	;RP1=0, select bank0
  1980  03F1  1487               	bsf	7,1	;volatile
  1981                           
  1982                           ;LCD_8bits.c: 37:     _delay((unsigned long)((5)*(4000000/4000.0)));
  1983  03F2  3007               	movlw	7
  1984  03F3  00F3               	movwf	??_LCD_Cmd+1
  1985  03F4  307D               	movlw	125
  1986  03F5  00F2               	movwf	??_LCD_Cmd
  1987  03F6                     u457:	
  1988  03F6  0BF2               	decfsz	??_LCD_Cmd,f
  1989  03F7  2BF6               	goto	u457
  1990  03F8  0BF3               	decfsz	??_LCD_Cmd+1,f
  1991  03F9  2BF6               	goto	u457
  1992                           
  1993                           ;LCD_8bits.c: 39:     PORTD = comando;
  1994  03FA  0874               	movf	LCD_Cmd@comando,w
  1995  03FB  1283               	bcf	3,5	;RP0=0, select bank0
  1996  03FC  1303               	bcf	3,6	;RP1=0, select bank0
  1997  03FD  0088               	movwf	8	;volatile
  1998                           
  1999                           ;LCD_8bits.c: 40:     _delay((unsigned long)((5)*(4000000/4000.0)));
  2000  03FE  3007               	movlw	7
  2001  03FF  00F3               	movwf	??_LCD_Cmd+1
  2002  0400  307D               	movlw	125
  2003  0401  00F2               	movwf	??_LCD_Cmd
  2004  0402                     u467:	
  2005  0402  0BF2               	decfsz	??_LCD_Cmd,f
  2006  0403  2C02               	goto	u467
  2007  0404  0BF3               	decfsz	??_LCD_Cmd+1,f
  2008  0405  2C02               	goto	u467
  2009                           
  2010                           ;LCD_8bits.c: 41:     PORTCbits.RC1 = 0;
  2011  0406  1283               	bcf	3,5	;RP0=0, select bank0
  2012  0407  1303               	bcf	3,6	;RP1=0, select bank0
  2013  0408  1087               	bcf	7,1	;volatile
  2014                           
  2015                           ;LCD_8bits.c: 42:     _delay((unsigned long)((5)*(4000000/4000.0)));
  2016  0409  3007               	movlw	7
  2017  040A  00F3               	movwf	??_LCD_Cmd+1
  2018  040B  307D               	movlw	125
  2019  040C  00F2               	movwf	??_LCD_Cmd
  2020  040D                     u477:	
  2021  040D  0BF2               	decfsz	??_LCD_Cmd,f
  2022  040E  2C0D               	goto	u477
  2023  040F  0BF3               	decfsz	??_LCD_Cmd+1,f
  2024  0410  2C0D               	goto	u477
  2025  0411  0008               	return
  2026  0412                     __end_of_LCD_Cmd:	
  2027                           
  2028                           	psect	text9
  2029  0483                     __ptext9:	
  2030 ;; *************** function _AnalogRead_8 *****************
  2031 ;; Defined at:
  2032 ;;		line 97 in file "ADC.c"
  2033 ;; Parameters:    Size  Location     Type
  2034 ;;  just            1    wreg     unsigned char 
  2035 ;; Auto vars:     Size  Location     Type
  2036 ;;  just            1    4[COMMON] unsigned char 
  2037 ;;  conversion      1    5[COMMON] unsigned char 
  2038 ;; Return value:  Size  Location     Type
  2039 ;;                  1    wreg      unsigned char 
  2040 ;; Registers used:
  2041 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2042 ;; Tracked objects:
  2043 ;;		On entry : 0/0
  2044 ;;		On exit  : 0/0
  2045 ;;		Unchanged: 0/0
  2046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2047 ;;      Params:         0       0       0       0       0
  2048 ;;      Locals:         2       0       0       0       0
  2049 ;;      Temps:          2       0       0       0       0
  2050 ;;      Totals:         4       0       0       0       0
  2051 ;;Total ram usage:        4 bytes
  2052 ;; Hardware stack levels used:    1
  2053 ;; Hardware stack levels required when called:    1
  2054 ;; This function calls:
  2055 ;;		Nothing
  2056 ;; This function is called by:
  2057 ;;		_main
  2058 ;; This function uses a non-reentrant model
  2059 ;;
  2060                           
  2061                           
  2062                           ;psect for function _AnalogRead_8
  2063  0483                     _AnalogRead_8:	
  2064                           
  2065                           ;incstack = 0
  2066                           ; Regs used in _AnalogRead_8: [wreg-fsr0h+status,2+status,0]
  2067                           ;AnalogRead_8@just stored from wreg
  2068  0483  00F4               	movwf	AnalogRead_8@just
  2069                           
  2070                           ;ADC.c: 99:     switch (just){
  2071  0484  2C8E               	goto	l1465
  2072  0485                     l1459:	
  2073                           
  2074                           ;ADC.c: 101:             conversion = ADRESH;
  2075  0485  1283               	bcf	3,5	;RP0=0, select bank0
  2076  0486  2C88               	goto	L11
  2077  0487                     l1461:	
  2078                           ;ADC.c: 102:             break;
  2079                           
  2080                           
  2081                           ;ADC.c: 104:             conversion = ADRESL;
  2082  0487  1683               	bsf	3,5	;RP0=1, select bank1
  2083  0488                     L11:	
  2084  0488  1303               	bcf	3,6	;RP1=0, select bank1
  2085  0489  081E               	movf	30,w	;volatile
  2086  048A  00F2               	movwf	??_AnalogRead_8
  2087  048B  0872               	movf	??_AnalogRead_8,w
  2088  048C  00F5               	movwf	AnalogRead_8@conversion
  2089                           
  2090                           ;ADC.c: 105:             break;
  2091  048D  2C9E               	goto	l1467
  2092  048E                     l1465:	
  2093  048E  0874               	movf	AnalogRead_8@just,w
  2094  048F  00F2               	movwf	??_AnalogRead_8
  2095  0490  01F3               	clrf	??_AnalogRead_8+1
  2096                           
  2097                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2098                           ; Switch size 1, requested type "simple"
  2099                           ; Number of cases is 1, Range of values is 0 to 0
  2100                           ; switch strategies available:
  2101                           ; Name         Instructions Cycles
  2102                           ; simple_byte            4     3 (average)
  2103                           ; direct_byte           11     8 (fixed)
  2104                           ; jumptable            260     6 (fixed)
  2105                           ;	Chosen strategy is simple_byte
  2106  0491  0873               	movf	??_AnalogRead_8+1,w
  2107  0492  3A00               	xorlw	0	; case 0
  2108  0493  1903               	skipnz
  2109  0494  2C96               	goto	l2175
  2110  0495  2C85               	goto	l1459
  2111  0496                     l2175:	
  2112                           
  2113                           ; Switch size 1, requested type "simple"
  2114                           ; Number of cases is 2, Range of values is 72 to 76
  2115                           ; switch strategies available:
  2116                           ; Name         Instructions Cycles
  2117                           ; simple_byte            7     4 (average)
  2118                           ; direct_byte           26    11 (fixed)
  2119                           ; jumptable            263     9 (fixed)
  2120                           ;	Chosen strategy is simple_byte
  2121  0496  0872               	movf	??_AnalogRead_8,w
  2122  0497  3A48               	xorlw	72	; case 72
  2123  0498  1903               	skipnz
  2124  0499  2C85               	goto	l1459
  2125  049A  3A04               	xorlw	4	; case 76
  2126  049B  1903               	skipnz
  2127  049C  2C87               	goto	l1461
  2128  049D  2C85               	goto	l1459
  2129  049E                     l1467:	
  2130                           
  2131                           ;ADC.c: 109:     return (conversion);
  2132  049E  0875               	movf	AnalogRead_8@conversion,w
  2133  049F  0008               	return
  2134  04A0                     __end_of_AnalogRead_8:	
  2135                           
  2136                           	psect	text10
  2137  0144                     __ptext10:	
  2138 ;; *************** function _ADConfig *****************
  2139 ;; Defined at:
  2140 ;;		line 16 in file "ADC.c"
  2141 ;; Parameters:    Size  Location     Type
  2142 ;;  oscFreq         1    wreg     unsigned char 
  2143 ;;  canal           1    2[COMMON] unsigned char 
  2144 ;;  justificado     1    3[COMMON] unsigned char 
  2145 ;; Auto vars:     Size  Location     Type
  2146 ;;  oscFreq         1    6[COMMON] unsigned char 
  2147 ;; Return value:  Size  Location     Type
  2148 ;;                  1    wreg      void 
  2149 ;; Registers used:
  2150 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2151 ;; Tracked objects:
  2152 ;;		On entry : 0/0
  2153 ;;		On exit  : 0/0
  2154 ;;		Unchanged: 0/0
  2155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2156 ;;      Params:         2       0       0       0       0
  2157 ;;      Locals:         1       0       0       0       0
  2158 ;;      Temps:          2       0       0       0       0
  2159 ;;      Totals:         5       0       0       0       0
  2160 ;;Total ram usage:        5 bytes
  2161 ;; Hardware stack levels used:    1
  2162 ;; Hardware stack levels required when called:    1
  2163 ;; This function calls:
  2164 ;;		Nothing
  2165 ;; This function is called by:
  2166 ;;		_main
  2167 ;; This function uses a non-reentrant model
  2168 ;;
  2169                           
  2170                           
  2171                           ;psect for function _ADConfig
  2172  0144                     _ADConfig:	
  2173                           
  2174                           ;incstack = 0
  2175                           ; Regs used in _ADConfig: [wreg-fsr0h+status,2+status,0]
  2176                           ;ADConfig@oscFreq stored from wreg
  2177  0144  00F6               	movwf	ADConfig@oscFreq
  2178                           
  2179                           ;ADC.c: 17:     switch(oscFreq){
  2180  0145  295E               	goto	l1391
  2181  0146                     l1381:	
  2182                           
  2183                           ;ADC.c: 19:             ADCON0bits.ADCS = 0b00;
  2184  0146  303F               	movlw	-193
  2185  0147  1283               	bcf	3,5	;RP0=0, select bank0
  2186  0148  1303               	bcf	3,6	;RP1=0, select bank0
  2187  0149  059F               	andwf	31,f	;volatile
  2188                           
  2189                           ;ADC.c: 20:             break;
  2190  014A  297D               	goto	l1393
  2191  014B                     l1383:	
  2192  014B  2957               	goto	l1389
  2193  014C                     l1385:	
  2194                           ;ADC.c: 23:             break;
  2195                           
  2196                           ;ADC.c: 22:             ADCON0bits.ADCS = 0b01;
  2197                           
  2198                           
  2199                           ;ADC.c: 25:             ADCON0bits.ADCS = 0b10;
  2200  014C  1283               	bcf	3,5	;RP0=0, select bank0
  2201  014D  1303               	bcf	3,6	;RP1=0, select bank0
  2202  014E  081F               	movf	31,w	;volatile
  2203  014F  393F               	andlw	-193
  2204  0150  3880               	iorlw	128
  2205  0151  295C               	goto	L13
  2206  0152                     l1387:	
  2207                           ;ADC.c: 26:             break;
  2208                           
  2209                           
  2210                           ;ADC.c: 28:             ADCON0bits.ADCS = 0b11;
  2211  0152  30C0               	movlw	192
  2212  0153  1283               	bcf	3,5	;RP0=0, select bank0
  2213  0154  1303               	bcf	3,6	;RP1=0, select bank0
  2214  0155  049F               	iorwf	31,f	;volatile
  2215                           
  2216                           ;ADC.c: 29:             break;
  2217  0156  297D               	goto	l1393
  2218  0157                     l1389:	
  2219                           
  2220                           ;ADC.c: 31:             ADCON0bits.ADCS = 0b01;
  2221  0157  1283               	bcf	3,5	;RP0=0, select bank0
  2222  0158  1303               	bcf	3,6	;RP1=0, select bank0
  2223  0159  081F               	movf	31,w	;volatile
  2224  015A  393F               	andlw	-193
  2225  015B  3840               	iorlw	64
  2226  015C                     L13:	
  2227  015C  009F               	movwf	31	;volatile
  2228                           
  2229                           ;ADC.c: 32:     }
  2230  015D  297D               	goto	l1393
  2231  015E                     l1391:	
  2232  015E  0876               	movf	ADConfig@oscFreq,w
  2233  015F  00F4               	movwf	??_ADConfig
  2234  0160  01F5               	clrf	??_ADConfig+1
  2235                           
  2236                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2237                           ; Switch size 1, requested type "simple"
  2238                           ; Number of cases is 1, Range of values is 0 to 0
  2239                           ; switch strategies available:
  2240                           ; Name         Instructions Cycles
  2241                           ; simple_byte            4     3 (average)
  2242                           ; direct_byte           11     8 (fixed)
  2243                           ; jumptable            260     6 (fixed)
  2244                           ;	Chosen strategy is simple_byte
  2245  0161  0875               	movf	??_ADConfig+1,w
  2246  0162  3A00               	xorlw	0	; case 0
  2247  0163  1903               	skipnz
  2248  0164  2966               	goto	l2177
  2249  0165  2957               	goto	l1389
  2250  0166                     l2177:	
  2251                           
  2252                           ; Switch size 1, requested type "simple"
  2253                           ; Number of cases is 4, Range of values is 1 to 20
  2254                           ; switch strategies available:
  2255                           ; Name         Instructions Cycles
  2256                           ; simple_byte           13     7 (average)
  2257                           ; direct_byte           71    11 (fixed)
  2258                           ; jumptable            263     9 (fixed)
  2259                           ;	Chosen strategy is simple_byte
  2260  0166  0874               	movf	??_ADConfig,w
  2261  0167  3A01               	xorlw	1	; case 1
  2262  0168  1903               	skipnz
  2263  0169  2946               	goto	l1381
  2264  016A  3A05               	xorlw	5	; case 4
  2265  016B  1903               	skipnz
  2266  016C  294B               	goto	l1383
  2267  016D  3A0C               	xorlw	12	; case 8
  2268  016E  1903               	skipnz
  2269  016F  294C               	goto	l1385
  2270  0170  3A1C               	xorlw	28	; case 20
  2271  0171  1903               	skipnz
  2272  0172  2952               	goto	l1387
  2273  0173  2957               	goto	l1389
  2274  0174                     l183:	
  2275                           ;ADC.c: 34:         case 'H':
  2276                           
  2277  0174  2979               	goto	l186
  2278  0175                     l185:	
  2279                           ;ADC.c: 37:         case 'L':
  2280                           
  2281                           ;ADC.c: 36:             break;
  2282                           
  2283                           ;ADC.c: 35:             ADCON1bits.ADFM = 0;
  2284                           
  2285                           
  2286                           ;ADC.c: 38:             ADCON1bits.ADFM = 1;
  2287  0175  1683               	bsf	3,5	;RP0=1, select bank1
  2288  0176  1303               	bcf	3,6	;RP1=0, select bank1
  2289  0177  179F               	bsf	31,7	;volatile
  2290                           
  2291                           ;ADC.c: 39:             break;
  2292  0178  29D8               	goto	l1413
  2293  0179                     l186:	
  2294                           ;ADC.c: 40:         default:
  2295                           
  2296                           
  2297                           ;ADC.c: 41:             ADCON1bits.ADFM = 0;
  2298  0179  1683               	bsf	3,5	;RP0=1, select bank1
  2299  017A  1303               	bcf	3,6	;RP1=0, select bank1
  2300  017B  139F               	bcf	31,7	;volatile
  2301                           
  2302                           ;ADC.c: 42:     }
  2303  017C  29D8               	goto	l1413
  2304  017D                     l1393:	
  2305  017D  0873               	movf	ADConfig@justificado,w
  2306  017E  00F4               	movwf	??_ADConfig
  2307  017F  01F5               	clrf	??_ADConfig+1
  2308                           
  2309                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2310                           ; Switch size 1, requested type "simple"
  2311                           ; Number of cases is 1, Range of values is 0 to 0
  2312                           ; switch strategies available:
  2313                           ; Name         Instructions Cycles
  2314                           ; simple_byte            4     3 (average)
  2315                           ; direct_byte           11     8 (fixed)
  2316                           ; jumptable            260     6 (fixed)
  2317                           ;	Chosen strategy is simple_byte
  2318  0180  0875               	movf	??_ADConfig+1,w
  2319  0181  3A00               	xorlw	0	; case 0
  2320  0182  1903               	skipnz
  2321  0183  2985               	goto	l2179
  2322  0184  2979               	goto	l186
  2323  0185                     l2179:	
  2324                           
  2325                           ; Switch size 1, requested type "simple"
  2326                           ; Number of cases is 2, Range of values is 72 to 76
  2327                           ; switch strategies available:
  2328                           ; Name         Instructions Cycles
  2329                           ; simple_byte            7     4 (average)
  2330                           ; direct_byte           26    11 (fixed)
  2331                           ; jumptable            263     9 (fixed)
  2332                           ;	Chosen strategy is simple_byte
  2333  0185  0874               	movf	??_ADConfig,w
  2334  0186  3A48               	xorlw	72	; case 72
  2335  0187  1903               	skipnz
  2336  0188  2974               	goto	l183
  2337  0189  3A04               	xorlw	4	; case 76
  2338  018A  1903               	skipnz
  2339  018B  2975               	goto	l185
  2340  018C  2979               	goto	l186
  2341  018D                     l188:	
  2342                           ;ADC.c: 44:         case 0:
  2343                           
  2344                           
  2345                           ;ADC.c: 45:             TRISAbits.TRISA0 = 1;
  2346  018D  1405               	bsf	5,0	;volatile
  2347                           
  2348                           ;ADC.c: 46:             ANSELbits.ANS0 = 1;
  2349  018E  1683               	bsf	3,5	;RP0=1, select bank3
  2350  018F  1703               	bsf	3,6	;RP1=1, select bank3
  2351  0190  1408               	bsf	8,0	;volatile
  2352                           
  2353                           ;ADC.c: 47:             ADCON0bits.CHS = 0;
  2354  0191  30C3               	movlw	-61
  2355  0192  1283               	bcf	3,5	;RP0=0, select bank0
  2356  0193  1303               	bcf	3,6	;RP1=0, select bank0
  2357  0194  059F               	andwf	31,f	;volatile
  2358                           
  2359                           ;ADC.c: 48:             break;
  2360  0195  29FA               	goto	l189
  2361  0196                     l190:	
  2362                           ;ADC.c: 49:         case 1:
  2363                           
  2364                           
  2365                           ;ADC.c: 50:             TRISAbits.TRISA1 = 1;
  2366  0196  1485               	bsf	5,1	;volatile
  2367                           
  2368                           ;ADC.c: 51:             ANSELbits.ANS1 = 1;
  2369  0197  1683               	bsf	3,5	;RP0=1, select bank3
  2370  0198  1703               	bsf	3,6	;RP1=1, select bank3
  2371  0199  1488               	bsf	8,1	;volatile
  2372                           
  2373                           ;ADC.c: 52:             ADCON0bits.CHS = 1;
  2374  019A  1283               	bcf	3,5	;RP0=0, select bank0
  2375  019B  1303               	bcf	3,6	;RP1=0, select bank0
  2376  019C  081F               	movf	31,w	;volatile
  2377  019D  39C3               	andlw	-61
  2378  019E  3804               	iorlw	4
  2379  019F  29D6               	goto	L19
  2380  01A0                     l191:	
  2381                           ;ADC.c: 54:         case 2:
  2382                           
  2383                           ;ADC.c: 53:             break;
  2384                           
  2385                           
  2386                           ;ADC.c: 55:             TRISAbits.TRISA2 = 1;
  2387  01A0  1505               	bsf	5,2	;volatile
  2388                           
  2389                           ;ADC.c: 56:             ANSELbits.ANS2 = 1;
  2390  01A1  1683               	bsf	3,5	;RP0=1, select bank3
  2391  01A2  1703               	bsf	3,6	;RP1=1, select bank3
  2392  01A3  1508               	bsf	8,2	;volatile
  2393                           
  2394                           ;ADC.c: 57:             ADCON0bits.CHS = 2;
  2395  01A4  1283               	bcf	3,5	;RP0=0, select bank0
  2396  01A5  1303               	bcf	3,6	;RP1=0, select bank0
  2397  01A6  081F               	movf	31,w	;volatile
  2398  01A7  39C3               	andlw	-61
  2399  01A8  3808               	iorlw	8
  2400  01A9  29D6               	goto	L19
  2401  01AA                     l192:	
  2402                           ;ADC.c: 59:         case 3:
  2403                           
  2404                           ;ADC.c: 58:             break;
  2405                           
  2406                           
  2407                           ;ADC.c: 60:             TRISAbits.TRISA3 = 1;
  2408  01AA  1585               	bsf	5,3	;volatile
  2409                           
  2410                           ;ADC.c: 61:             ANSELbits.ANS3 = 1;
  2411  01AB  1683               	bsf	3,5	;RP0=1, select bank3
  2412  01AC  1703               	bsf	3,6	;RP1=1, select bank3
  2413  01AD  1588               	bsf	8,3	;volatile
  2414  01AE  29B3               	goto	L20
  2415  01AF                     l193:	
  2416                           ;ADC.c: 64:         case 4:
  2417                           
  2418                           ;ADC.c: 63:             break;
  2419                           
  2420                           ;ADC.c: 62:             ADCON0bits.CHS = 3;
  2421                           
  2422                           
  2423                           ;ADC.c: 65:             TRISAbits.TRISA5 = 1;
  2424  01AF  1685               	bsf	5,5	;volatile
  2425                           
  2426                           ;ADC.c: 66:             ANSELbits.ANS4 = 1;
  2427  01B0  1683               	bsf	3,5	;RP0=1, select bank3
  2428  01B1  1703               	bsf	3,6	;RP1=1, select bank3
  2429  01B2  1608               	bsf	8,4	;volatile
  2430  01B3                     L20:	
  2431                           
  2432                           ;ADC.c: 67:             ADCON0bits.CHS = 3;
  2433  01B3  1283               	bcf	3,5	;RP0=0, select bank0
  2434  01B4  1303               	bcf	3,6	;RP1=0, select bank0
  2435  01B5  081F               	movf	31,w	;volatile
  2436  01B6  39C3               	andlw	-61
  2437  01B7  380C               	iorlw	12
  2438  01B8  29D6               	goto	L19
  2439  01B9                     l194:	
  2440                           ;ADC.c: 69:         case 5:
  2441                           
  2442                           ;ADC.c: 68:             break;
  2443                           
  2444                           
  2445                           ;ADC.c: 70:             TRISEbits.TRISE0 = 1;
  2446  01B9  1409               	bsf	9,0	;volatile
  2447                           
  2448                           ;ADC.c: 71:             ANSELbits.ANS5 = 1;
  2449  01BA  1683               	bsf	3,5	;RP0=1, select bank3
  2450  01BB  1703               	bsf	3,6	;RP1=1, select bank3
  2451  01BC  1688               	bsf	8,5	;volatile
  2452                           
  2453                           ;ADC.c: 72:             ADCON0bits.CHS = 5;
  2454  01BD  1283               	bcf	3,5	;RP0=0, select bank0
  2455  01BE  1303               	bcf	3,6	;RP1=0, select bank0
  2456  01BF  081F               	movf	31,w	;volatile
  2457  01C0  39C3               	andlw	-61
  2458  01C1  3814               	iorlw	20
  2459  01C2  29D6               	goto	L19
  2460  01C3                     l195:	
  2461                           ;ADC.c: 74:         case 6:
  2462                           
  2463                           ;ADC.c: 73:             break;
  2464                           
  2465                           
  2466                           ;ADC.c: 75:             TRISEbits.TRISE1 = 1;
  2467  01C3  1489               	bsf	9,1	;volatile
  2468                           
  2469                           ;ADC.c: 76:             ANSELbits.ANS6 = 1;
  2470  01C4  1683               	bsf	3,5	;RP0=1, select bank3
  2471  01C5  1703               	bsf	3,6	;RP1=1, select bank3
  2472  01C6  1708               	bsf	8,6	;volatile
  2473                           
  2474                           ;ADC.c: 77:             ADCON0bits.CHS = 6;
  2475  01C7  1283               	bcf	3,5	;RP0=0, select bank0
  2476  01C8  1303               	bcf	3,6	;RP1=0, select bank0
  2477  01C9  081F               	movf	31,w	;volatile
  2478  01CA  39C3               	andlw	-61
  2479  01CB  3818               	iorlw	24
  2480  01CC  29D6               	goto	L19
  2481  01CD                     l196:	
  2482                           ;ADC.c: 79:         case 7:
  2483                           
  2484                           ;ADC.c: 78:             break;
  2485                           
  2486                           
  2487                           ;ADC.c: 80:             TRISEbits.TRISE2 = 1;
  2488  01CD  1509               	bsf	9,2	;volatile
  2489                           
  2490                           ;ADC.c: 81:             ANSELbits.ANS7 = 1;
  2491  01CE  1683               	bsf	3,5	;RP0=1, select bank3
  2492  01CF  1703               	bsf	3,6	;RP1=1, select bank3
  2493  01D0  1788               	bsf	8,7	;volatile
  2494                           
  2495                           ;ADC.c: 82:             ADCON0bits.CHS = 7;
  2496  01D1  1283               	bcf	3,5	;RP0=0, select bank0
  2497  01D2  1303               	bcf	3,6	;RP1=0, select bank0
  2498  01D3  081F               	movf	31,w	;volatile
  2499  01D4  39C3               	andlw	-61
  2500  01D5  381C               	iorlw	28
  2501  01D6                     L19:	
  2502  01D6  009F               	movwf	31	;volatile
  2503                           
  2504                           ;ADC.c: 83:             break;
  2505  01D7  29FA               	goto	l189
  2506  01D8                     l1413:	
  2507  01D8  0872               	movf	ADConfig@canal,w
  2508  01D9  00F4               	movwf	??_ADConfig
  2509  01DA  01F5               	clrf	??_ADConfig+1
  2510                           
  2511                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2512                           ; Switch size 1, requested type "simple"
  2513                           ; Number of cases is 1, Range of values is 0 to 0
  2514                           ; switch strategies available:
  2515                           ; Name         Instructions Cycles
  2516                           ; simple_byte            4     3 (average)
  2517                           ; direct_byte           11     8 (fixed)
  2518                           ; jumptable            260     6 (fixed)
  2519                           ;	Chosen strategy is simple_byte
  2520  01DB  0875               	movf	??_ADConfig+1,w
  2521  01DC  3A00               	xorlw	0	; case 0
  2522  01DD  1903               	skipnz
  2523  01DE  29E0               	goto	l2181
  2524  01DF  29FA               	goto	l189
  2525  01E0                     l2181:	
  2526                           
  2527                           ; Switch size 1, requested type "simple"
  2528                           ; Number of cases is 8, Range of values is 0 to 7
  2529                           ; switch strategies available:
  2530                           ; Name         Instructions Cycles
  2531                           ; simple_byte           25    13 (average)
  2532                           ; direct_byte           32     8 (fixed)
  2533                           ; jumptable            260     6 (fixed)
  2534                           ;	Chosen strategy is simple_byte
  2535  01E0  0874               	movf	??_ADConfig,w
  2536  01E1  3A00               	xorlw	0	; case 0
  2537  01E2  1903               	skipnz
  2538  01E3  298D               	goto	l188
  2539  01E4  3A01               	xorlw	1	; case 1
  2540  01E5  1903               	skipnz
  2541  01E6  2996               	goto	l190
  2542  01E7  3A03               	xorlw	3	; case 2
  2543  01E8  1903               	skipnz
  2544  01E9  29A0               	goto	l191
  2545  01EA  3A01               	xorlw	1	; case 3
  2546  01EB  1903               	skipnz
  2547  01EC  29AA               	goto	l192
  2548  01ED  3A07               	xorlw	7	; case 4
  2549  01EE  1903               	skipnz
  2550  01EF  29AF               	goto	l193
  2551  01F0  3A01               	xorlw	1	; case 5
  2552  01F1  1903               	skipnz
  2553  01F2  29B9               	goto	l194
  2554  01F3  3A03               	xorlw	3	; case 6
  2555  01F4  1903               	skipnz
  2556  01F5  29C3               	goto	l195
  2557  01F6  3A01               	xorlw	1	; case 7
  2558  01F7  1903               	skipnz
  2559  01F8  29CD               	goto	l196
  2560  01F9  29FA               	goto	l189
  2561  01FA                     l189:	
  2562                           
  2563                           ;ADC.c: 88:     ADCON0bits.ADON = 1;
  2564  01FA  1283               	bcf	3,5	;RP0=0, select bank0
  2565  01FB  141F               	bsf	31,0	;volatile
  2566                           
  2567                           ;ADC.c: 89:     PIR1bits.ADIF = 0;
  2568  01FC  130C               	bcf	12,6	;volatile
  2569                           
  2570                           ;ADC.c: 90:     PIE1bits.ADIE = 1;
  2571  01FD  1683               	bsf	3,5	;RP0=1, select bank1
  2572  01FE  1303               	bcf	3,6	;RP1=0, select bank1
  2573  01FF  170C               	bsf	12,6	;volatile
  2574                           
  2575                           ;ADC.c: 91:     INTCONbits.PEIE = 1;
  2576  0200  170B               	bsf	11,6	;volatile
  2577                           
  2578                           ;ADC.c: 92:     INTCONbits.GIE = 1;
  2579  0201  178B               	bsf	11,7	;volatile
  2580                           
  2581                           ;ADC.c: 93:     _delay((unsigned long)((30)*(4000000/4000.0)));
  2582  0202  3027               	movlw	39
  2583  0203  00F5               	movwf	??_ADConfig+1
  2584  0204  30F5               	movlw	245
  2585  0205  00F4               	movwf	??_ADConfig
  2586  0206                     u487:	
  2587  0206  0BF4               	decfsz	??_ADConfig,f
  2588  0207  2A06               	goto	u487
  2589  0208  0BF5               	decfsz	??_ADConfig+1,f
  2590  0209  2A06               	goto	u487
  2591                           
  2592                           ;ADC.c: 94:     ADCON0bits.GO_nDONE = 1;
  2593  020A  1283               	bcf	3,5	;RP0=0, select bank0
  2594  020B  1303               	bcf	3,6	;RP1=0, select bank0
  2595  020C  149F               	bsf	31,1	;volatile
  2596  020D  0008               	return
  2597  020E                     __end_of_ADConfig:	
  2598                           
  2599                           	psect	text11
  2600  02AC                     __ptext11:	
  2601 ;; *************** function _ADC_CHselect *****************
  2602 ;; Defined at:
  2603 ;;		line 121 in file "ADC.c"
  2604 ;; Parameters:    Size  Location     Type
  2605 ;;  canal           1    wreg     unsigned char 
  2606 ;; Auto vars:     Size  Location     Type
  2607 ;;  canal           1    4[COMMON] unsigned char 
  2608 ;; Return value:  Size  Location     Type
  2609 ;;                  1    wreg      void 
  2610 ;; Registers used:
  2611 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2612 ;; Tracked objects:
  2613 ;;		On entry : 0/0
  2614 ;;		On exit  : 0/0
  2615 ;;		Unchanged: 0/0
  2616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2617 ;;      Params:         0       0       0       0       0
  2618 ;;      Locals:         1       0       0       0       0
  2619 ;;      Temps:          2       0       0       0       0
  2620 ;;      Totals:         3       0       0       0       0
  2621 ;;Total ram usage:        3 bytes
  2622 ;; Hardware stack levels used:    1
  2623 ;; Hardware stack levels required when called:    1
  2624 ;; This function calls:
  2625 ;;		Nothing
  2626 ;; This function is called by:
  2627 ;;		_main
  2628 ;; This function uses a non-reentrant model
  2629 ;;
  2630                           
  2631                           
  2632                           ;psect for function _ADC_CHselect
  2633  02AC                     _ADC_CHselect:	
  2634                           
  2635                           ;incstack = 0
  2636                           ; Regs used in _ADC_CHselect: [wreg-fsr0h+status,2+status,0]
  2637                           ;ADC_CHselect@canal stored from wreg
  2638  02AC  00F4               	movwf	ADC_CHselect@canal
  2639                           
  2640                           ;ADC.c: 122:     switch (canal){
  2641  02AD  2B14               	goto	l1495
  2642  02AE                     l212:	
  2643                           ;ADC.c: 123:         case 0:
  2644                           
  2645                           
  2646                           ;ADC.c: 124:             TRISAbits.TRISA0 = 1;
  2647  02AE  1683               	bsf	3,5	;RP0=1, select bank1
  2648  02AF  1303               	bcf	3,6	;RP1=0, select bank1
  2649  02B0  1405               	bsf	5,0	;volatile
  2650                           
  2651                           ;ADC.c: 125:             ANSELbits.ANS0 = 1;
  2652  02B1  1683               	bsf	3,5	;RP0=1, select bank3
  2653  02B2  1703               	bsf	3,6	;RP1=1, select bank3
  2654  02B3  1408               	bsf	8,0	;volatile
  2655                           
  2656                           ;ADC.c: 126:             ADCON0bits.CHS = 0;
  2657  02B4  30C3               	movlw	-61
  2658  02B5  1283               	bcf	3,5	;RP0=0, select bank0
  2659  02B6  1303               	bcf	3,6	;RP1=0, select bank0
  2660  02B7  059F               	andwf	31,f	;volatile
  2661                           
  2662                           ;ADC.c: 127:             break;
  2663  02B8  0008               	return
  2664  02B9                     l214:	
  2665                           ;ADC.c: 128:         case 1:
  2666                           
  2667                           
  2668                           ;ADC.c: 129:             TRISAbits.TRISA1 = 1;
  2669  02B9  1683               	bsf	3,5	;RP0=1, select bank1
  2670  02BA  1303               	bcf	3,6	;RP1=0, select bank1
  2671  02BB  1485               	bsf	5,1	;volatile
  2672                           
  2673                           ;ADC.c: 130:             ANSELbits.ANS1 = 1;
  2674  02BC  1683               	bsf	3,5	;RP0=1, select bank3
  2675  02BD  1703               	bsf	3,6	;RP1=1, select bank3
  2676  02BE  1488               	bsf	8,1	;volatile
  2677                           
  2678                           ;ADC.c: 131:             ADCON0bits.CHS = 1;
  2679  02BF  1283               	bcf	3,5	;RP0=0, select bank0
  2680  02C0  1303               	bcf	3,6	;RP1=0, select bank0
  2681  02C1  081F               	movf	31,w	;volatile
  2682  02C2  39C3               	andlw	-61
  2683  02C3  3804               	iorlw	4
  2684  02C4  009F               	movwf	31	;volatile
  2685                           
  2686                           ;ADC.c: 132:             break;
  2687  02C5  0008               	return
  2688  02C6                     l215:	
  2689                           ;ADC.c: 133:         case 2:
  2690                           
  2691                           
  2692                           ;ADC.c: 134:             TRISAbits.TRISA2 = 1;
  2693  02C6  1683               	bsf	3,5	;RP0=1, select bank1
  2694  02C7  1303               	bcf	3,6	;RP1=0, select bank1
  2695  02C8  1505               	bsf	5,2	;volatile
  2696                           
  2697                           ;ADC.c: 135:             ANSELbits.ANS2 = 1;
  2698  02C9  1683               	bsf	3,5	;RP0=1, select bank3
  2699  02CA  1703               	bsf	3,6	;RP1=1, select bank3
  2700  02CB  1508               	bsf	8,2	;volatile
  2701                           
  2702                           ;ADC.c: 136:             ADCON0bits.CHS = 2;
  2703  02CC  1283               	bcf	3,5	;RP0=0, select bank0
  2704  02CD  1303               	bcf	3,6	;RP1=0, select bank0
  2705  02CE  081F               	movf	31,w	;volatile
  2706  02CF  39C3               	andlw	-61
  2707  02D0  3808               	iorlw	8
  2708  02D1  009F               	movwf	31	;volatile
  2709                           
  2710                           ;ADC.c: 137:             break;
  2711  02D2  0008               	return
  2712  02D3                     l216:	
  2713                           ;ADC.c: 138:         case 3:
  2714                           
  2715                           
  2716                           ;ADC.c: 139:             TRISAbits.TRISA3 = 1;
  2717  02D3  1683               	bsf	3,5	;RP0=1, select bank1
  2718  02D4  1303               	bcf	3,6	;RP1=0, select bank1
  2719  02D5  1585               	bsf	5,3	;volatile
  2720                           
  2721                           ;ADC.c: 140:             ANSELbits.ANS3 = 1;
  2722  02D6  1683               	bsf	3,5	;RP0=1, select bank3
  2723  02D7  1703               	bsf	3,6	;RP1=1, select bank3
  2724  02D8  1588               	bsf	8,3	;volatile
  2725                           
  2726                           ;ADC.c: 141:             ADCON0bits.CHS = 3;
  2727  02D9  1283               	bcf	3,5	;RP0=0, select bank0
  2728  02DA  1303               	bcf	3,6	;RP1=0, select bank0
  2729  02DB  081F               	movf	31,w	;volatile
  2730  02DC  39C3               	andlw	-61
  2731  02DD  380C               	iorlw	12
  2732  02DE  009F               	movwf	31	;volatile
  2733                           
  2734                           ;ADC.c: 142:             break;
  2735  02DF  0008               	return
  2736  02E0                     l217:	
  2737                           ;ADC.c: 143:         case 4:
  2738                           
  2739                           
  2740                           ;ADC.c: 144:             TRISAbits.TRISA5 = 1;
  2741  02E0  1683               	bsf	3,5	;RP0=1, select bank1
  2742  02E1  1303               	bcf	3,6	;RP1=0, select bank1
  2743  02E2  1685               	bsf	5,5	;volatile
  2744                           
  2745                           ;ADC.c: 145:             ANSELbits.ANS4 = 1;
  2746  02E3  1683               	bsf	3,5	;RP0=1, select bank3
  2747  02E4  1703               	bsf	3,6	;RP1=1, select bank3
  2748  02E5  1608               	bsf	8,4	;volatile
  2749                           
  2750                           ;ADC.c: 146:             ADCON0bits.CHS = 3;
  2751  02E6  1283               	bcf	3,5	;RP0=0, select bank0
  2752  02E7  1303               	bcf	3,6	;RP1=0, select bank0
  2753  02E8  081F               	movf	31,w	;volatile
  2754  02E9  39C3               	andlw	-61
  2755  02EA  380C               	iorlw	12
  2756  02EB  009F               	movwf	31	;volatile
  2757                           
  2758                           ;ADC.c: 147:             break;
  2759  02EC  0008               	return
  2760  02ED                     l218:	
  2761                           ;ADC.c: 148:         case 5:
  2762                           
  2763                           
  2764                           ;ADC.c: 149:             TRISEbits.TRISE0 = 1;
  2765  02ED  1683               	bsf	3,5	;RP0=1, select bank1
  2766  02EE  1303               	bcf	3,6	;RP1=0, select bank1
  2767  02EF  1409               	bsf	9,0	;volatile
  2768                           
  2769                           ;ADC.c: 150:             ANSELbits.ANS5 = 1;
  2770  02F0  1683               	bsf	3,5	;RP0=1, select bank3
  2771  02F1  1703               	bsf	3,6	;RP1=1, select bank3
  2772  02F2  1688               	bsf	8,5	;volatile
  2773                           
  2774                           ;ADC.c: 151:             ADCON0bits.CHS = 5;
  2775  02F3  1283               	bcf	3,5	;RP0=0, select bank0
  2776  02F4  1303               	bcf	3,6	;RP1=0, select bank0
  2777  02F5  081F               	movf	31,w	;volatile
  2778  02F6  39C3               	andlw	-61
  2779  02F7  3814               	iorlw	20
  2780  02F8  009F               	movwf	31	;volatile
  2781                           
  2782                           ;ADC.c: 152:             break;
  2783  02F9  0008               	return
  2784  02FA                     l219:	
  2785                           ;ADC.c: 153:         case 6:
  2786                           
  2787                           
  2788                           ;ADC.c: 154:             TRISEbits.TRISE1 = 1;
  2789  02FA  1683               	bsf	3,5	;RP0=1, select bank1
  2790  02FB  1303               	bcf	3,6	;RP1=0, select bank1
  2791  02FC  1489               	bsf	9,1	;volatile
  2792                           
  2793                           ;ADC.c: 155:             ANSELbits.ANS6 = 1;
  2794  02FD  1683               	bsf	3,5	;RP0=1, select bank3
  2795  02FE  1703               	bsf	3,6	;RP1=1, select bank3
  2796  02FF  1708               	bsf	8,6	;volatile
  2797                           
  2798                           ;ADC.c: 156:             ADCON0bits.CHS = 6;
  2799  0300  1283               	bcf	3,5	;RP0=0, select bank0
  2800  0301  1303               	bcf	3,6	;RP1=0, select bank0
  2801  0302  081F               	movf	31,w	;volatile
  2802  0303  39C3               	andlw	-61
  2803  0304  3818               	iorlw	24
  2804  0305  009F               	movwf	31	;volatile
  2805                           
  2806                           ;ADC.c: 157:             break;
  2807  0306  0008               	return
  2808  0307                     l220:	
  2809                           ;ADC.c: 158:         case 7:
  2810                           
  2811                           
  2812                           ;ADC.c: 159:             TRISEbits.TRISE2 = 1;
  2813  0307  1683               	bsf	3,5	;RP0=1, select bank1
  2814  0308  1303               	bcf	3,6	;RP1=0, select bank1
  2815  0309  1509               	bsf	9,2	;volatile
  2816                           
  2817                           ;ADC.c: 160:             ANSELbits.ANS7 = 1;
  2818  030A  1683               	bsf	3,5	;RP0=1, select bank3
  2819  030B  1703               	bsf	3,6	;RP1=1, select bank3
  2820  030C  1788               	bsf	8,7	;volatile
  2821                           
  2822                           ;ADC.c: 161:             ADCON0bits.CHS = 7;
  2823  030D  1283               	bcf	3,5	;RP0=0, select bank0
  2824  030E  1303               	bcf	3,6	;RP1=0, select bank0
  2825  030F  081F               	movf	31,w	;volatile
  2826  0310  39C3               	andlw	-61
  2827  0311  381C               	iorlw	28
  2828  0312  009F               	movwf	31	;volatile
  2829                           
  2830                           ;ADC.c: 162:             break;
  2831  0313  0008               	return
  2832  0314                     l1495:	
  2833  0314  0874               	movf	ADC_CHselect@canal,w
  2834  0315  00F2               	movwf	??_ADC_CHselect
  2835  0316  01F3               	clrf	??_ADC_CHselect+1
  2836                           
  2837                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2838                           ; Switch size 1, requested type "simple"
  2839                           ; Number of cases is 1, Range of values is 0 to 0
  2840                           ; switch strategies available:
  2841                           ; Name         Instructions Cycles
  2842                           ; simple_byte            4     3 (average)
  2843                           ; direct_byte           11     8 (fixed)
  2844                           ; jumptable            260     6 (fixed)
  2845                           ;	Chosen strategy is simple_byte
  2846  0317  0873               	movf	??_ADC_CHselect+1,w
  2847  0318  3A00               	xorlw	0	; case 0
  2848  0319  1903               	skipnz
  2849  031A  2B1C               	goto	l2183
  2850  031B  2B36               	goto	l221
  2851  031C                     l2183:	
  2852                           
  2853                           ; Switch size 1, requested type "simple"
  2854                           ; Number of cases is 8, Range of values is 0 to 7
  2855                           ; switch strategies available:
  2856                           ; Name         Instructions Cycles
  2857                           ; simple_byte           25    13 (average)
  2858                           ; direct_byte           32     8 (fixed)
  2859                           ; jumptable            260     6 (fixed)
  2860                           ;	Chosen strategy is simple_byte
  2861  031C  0872               	movf	??_ADC_CHselect,w
  2862  031D  3A00               	xorlw	0	; case 0
  2863  031E  1903               	skipnz
  2864  031F  2AAE               	goto	l212
  2865  0320  3A01               	xorlw	1	; case 1
  2866  0321  1903               	skipnz
  2867  0322  2AB9               	goto	l214
  2868  0323  3A03               	xorlw	3	; case 2
  2869  0324  1903               	skipnz
  2870  0325  2AC6               	goto	l215
  2871  0326  3A01               	xorlw	1	; case 3
  2872  0327  1903               	skipnz
  2873  0328  2AD3               	goto	l216
  2874  0329  3A07               	xorlw	7	; case 4
  2875  032A  1903               	skipnz
  2876  032B  2AE0               	goto	l217
  2877  032C  3A01               	xorlw	1	; case 5
  2878  032D  1903               	skipnz
  2879  032E  2AED               	goto	l218
  2880  032F  3A03               	xorlw	3	; case 6
  2881  0330  1903               	skipnz
  2882  0331  2AFA               	goto	l219
  2883  0332  3A01               	xorlw	1	; case 7
  2884  0333  1903               	skipnz
  2885  0334  2B07               	goto	l220
  2886  0335  2B36               	goto	l221
  2887  0336                     l221:	
  2888  0336  0008               	return
  2889  0337                     __end_of_ADC_CHselect:	
  2890                           
  2891                           	psect	text12
  2892  04B5                     __ptext12:	
  2893 ;; *************** function _ISR_ADC *****************
  2894 ;; Defined at:
  2895 ;;		line 44 in file "main.c"
  2896 ;; Parameters:    Size  Location     Type
  2897 ;;		None
  2898 ;; Auto vars:     Size  Location     Type
  2899 ;;		None
  2900 ;; Return value:  Size  Location     Type
  2901 ;;                  1    wreg      void 
  2902 ;; Registers used:
  2903 ;;		None
  2904 ;; Tracked objects:
  2905 ;;		On entry : 0/0
  2906 ;;		On exit  : 0/0
  2907 ;;		Unchanged: 0/0
  2908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2909 ;;      Params:         0       0       0       0       0
  2910 ;;      Locals:         0       0       0       0       0
  2911 ;;      Temps:          2       0       0       0       0
  2912 ;;      Totals:         2       0       0       0       0
  2913 ;;Total ram usage:        2 bytes
  2914 ;; Hardware stack levels used:    1
  2915 ;; This function calls:
  2916 ;;		Nothing
  2917 ;; This function is called by:
  2918 ;;		Interrupt level 1
  2919 ;; This function uses a non-reentrant model
  2920 ;;
  2921                           
  2922                           
  2923                           ;psect for function _ISR_ADC
  2924  04B5                     _ISR_ADC:	
  2925                           
  2926                           ;main.c: 45:     if (PIR1bits.ADIF && PIE1bits.ADIE){
  2927  04B5  1283               	bcf	3,5	;RP0=0, select bank0
  2928  04B6  1303               	bcf	3,6	;RP1=0, select bank0
  2929  04B7  1F0C               	btfss	12,6	;volatile
  2930  04B8  2CC0               	goto	i1l50
  2931  04B9  1683               	bsf	3,5	;RP0=1, select bank1
  2932  04BA  1303               	bcf	3,6	;RP1=0, select bank1
  2933  04BB  1F0C               	btfss	12,6	;volatile
  2934  04BC  2CC0               	goto	i1l50
  2935                           
  2936                           ;main.c: 46:         PIE1bits.ADIE = 0;
  2937  04BD  130C               	bcf	12,6	;volatile
  2938                           
  2939                           ;main.c: 47:         banderaADC = 1;
  2940  04BE  01FB               	clrf	_banderaADC
  2941  04BF  0AFB               	incf	_banderaADC,f
  2942  04C0                     i1l50:	
  2943  04C0  0871               	movf	??_ISR_ADC+1,w
  2944  04C1  008A               	movwf	10
  2945  04C2  0E70               	swapf	??_ISR_ADC^(0+4294967168),w
  2946  04C3  0083               	movwf	3
  2947  04C4  0EFE               	swapf	126,f
  2948  04C5  0E7E               	swapf	126,w
  2949  04C6  0009               	retfie
  2950  04C7                     __end_of_ISR_ADC:	
  2951  007E                     btemp	set	126	;btemp
  2952  007E                     wtemp0	set	126
  2953                           
  2954                           	psect	intentry
  2955  0004                     __pintentry:	
  2956                           ;incstack = 0
  2957                           ; Regs used in _ISR_ADC: []
  2958                           
  2959  0004                     interrupt_function:	
  2960  007E                     saved_w	set	btemp
  2961  0004  00FE               	movwf	btemp
  2962  0005  0E03               	swapf	3,w
  2963  0006  00F0               	movwf	??_ISR_ADC
  2964  0007  080A               	movf	10,w
  2965  0008  00F1               	movwf	??_ISR_ADC+1
  2966  0009  120A  118A  2CB5   	ljmp	_ISR_ADC


Data Sizes:
    Strings     15
    Constant    0
    Data        1
    BSS         22
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      12
    BANK0            80     18      37
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    LCD_Write_String@a	PTR unsigned char  size(1) Largest target is 15
		 -> STR_1(CODE[15]), 

    num2	PTR unsigned int  size(1) Largest target is 6
		 -> NULL(NULL[0]), mapear@resultado(BANK0[6]), 

    sp__mapear	PTR unsigned int  size(1) Largest target is 6
		 -> mapear@resultado(BANK0[6]), 

    num1	PTR unsigned int  size(1) Largest target is 6
		 -> NULL(NULL[0]), mapear@resultado(BANK0[6]), 


Critical Paths under _main in COMMON

    _main->_LCD_Set_Cursor
    _mapear->___wmul
    _LCD_init->_LCD_Cmd
    _LCD_Write_String->_LCD_Write_Character
    _LCD_Set_Cursor->_LCD_Cmd

Critical Paths under _ISR_ADC in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_mapear

Critical Paths under _ISR_ADC in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR_ADC in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR_ADC in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR_ADC in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    2657
                                             15 BANK0      3     3      0
                       _ADC_CHselect
                           _ADConfig
                       _AnalogRead_8
                     _LCD_Set_Cursor
                _LCD_Write_Character
                   _LCD_Write_String
                           _LCD_init
                             _mapear
                       _uint_to_char
 ---------------------------------------------------------------------------------
 (1) _uint_to_char                                         4     4      0      56
                                              2 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _mapear                                              15    13      2    1650
                                              0 BANK0     15    13      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     548
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) _LCD_init                                             2     2      0      31
                                              5 COMMON     2     2      0
                            _LCD_Cmd
 ---------------------------------------------------------------------------------
 (1) _LCD_Write_String                                     3     3      0     145
                                              4 COMMON     3     3      0
                _LCD_Write_Character
 ---------------------------------------------------------------------------------
 (2) _LCD_Write_Character                                  2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _LCD_Set_Cursor                                       5     4      1     465
                                              5 COMMON     3     2      1
                                              0 BANK0      2     2      0
                            _LCD_Cmd
 ---------------------------------------------------------------------------------
 (2) _LCD_Cmd                                              3     3      0      31
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _AnalogRead_8                                         4     4      0      48
                                              2 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _ADConfig                                             5     3      2     218
                                              2 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (1) _ADC_CHselect                                         3     3      0      22
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR_ADC                                              2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_CHselect
   _ADConfig
   _AnalogRead_8
   _LCD_Set_Cursor
     _LCD_Cmd
   _LCD_Write_Character
   _LCD_Write_String
     _LCD_Write_Character
   _LCD_init
     _LCD_Cmd
   _mapear
     ___wmul
   _uint_to_char

 _ISR_ADC (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     12      25       5       46.3%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      8       C       1       85.7%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      31      12        0.0%
ABS                  0      0      31       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sun Feb 09 00:30:28 2020

                           pc 0002                   __CFG_CP$OFF 0000               mapear@resultado 003A  
                          fsr 0004           ___wmul@multiplicand 0074                           l220 0307  
                         l212 02AE                           l221 0336                           l214 02B9  
                         l215 02C6                           l216 02D3                           l217 02E0  
                         l218 02ED                           l219 02FA                           l307 046C  
                         l190 0196                           l191 01A0                           l183 0174  
                         l192 01AA                           l193 01AF                           l185 0175  
                         l194 01B9                           l186 0179                           l195 01C3  
                         l196 01CD                           l188 018D                           l189 01FA  
                         u305 0298                           u165 046D                           u270 0215  
                         u407 0382                           u175 0474                           u417 038F  
                __CFG_CPD$OFF 0000                           u427 039A                           u347 033B  
                         u437 04D0                           u357 034A                           u285 023C  
                         u447 03EB                           u367 0356                           u295 026A  
                         u457 03F6                           u377 0360                           u467 0402  
                         u387 036A                           u477 040D                           u397 0375  
                         u487 0206                  _uint_to_char 039E                           fsr0 0004  
                         indf 0000         __size_of_ADC_CHselect 008B  __size_of_LCD_Write_Character 000F  
             __end_of_LCD_Cmd 0412                  __CFG_LVP$OFF 0000                _LCD_Set_Cursor 0412  
                        l1413 01D8                          l1343 0464                          l2171 03C1  
                        l1531 03A4                          l2181 01E0                          l1381 0146  
                        l1461 0487                          l2173 0437                          l1541 03AE  
                        l1533 03A6                          l2183 031C                          l1383 014B  
                        l1391 015E                          l2175 0496                          l1455 0443  
                        l1543 03B0                          l1535 03A8                          l1551 03E1  
                        l1527 03A0                          l2177 0166                          l1385 014C  
                        l1393 017D                          l1465 048E                          l1545 03B2  
                        l1537 03AA                          l1529 03A2                          l2169 0131  
                        l2179 0185                          l1387 0152                          l1467 049E  
                        l1459 0485                          l1547 03B4                          l1539 03AC  
                        l1389 0157                          l1549 03B9                          l1495 0314  
                        l1911 0052                          l1907 004E                          l1863 042A  
                        l1855 0416                          l1943 0121                          l1927 00B8  
                        l1865 042F                          l1881 024E                          l1945 0124  
                        l1859 0420                          l1891 028F                          l1947 0139  
                        l1893 02AA                          l1885 0261                          l1887 027C  
                        l1879 0233                          STR_1 04A6                          i1l50 04C0  
             __end_of_ISR_ADC 04C7                  __CFG_WRT$OFF 0000             ?_LCD_Write_String 0070  
                        _main 0023                          _num1 0079                          _num2 0078  
                        btemp 007E                          start 000C            ??_LCD_Write_String 0074  
               __CFG_IESO$OFF 0000              __end_of_ADConfig 020E              __end_of_LCD_init 039E  
                       ?_main 0070                  _ADC_CHselect 02AC                 __CFG_WDTE$OFF 0000  
          uint_to_char@numChr 0075            uint_to_char@numero 0074                         _PORTC 0007  
                       _PORTD 0008                         _TRISC 0087                         _TRISD 0088  
              __CFG_FCMEN$OFF 0000        __end_of_LCD_Set_Cursor 0440                   mapear@F1339 002C  
              __CFG_BOREN$OFF 0000                         pclath 000A                         status 0003  
                       wtemp0 007E                   mapear@valor 0039                __CFG_MCLRE$OFF 0000  
             __initialization 000F                  __end_of_main 0144                        ??_main 0042  
                   ??_LCD_Cmd 0072         __size_of_AnalogRead_8 001D                     ??_ISR_ADC 0070  
             ?_LCD_Set_Cursor 0075                        _ADRESH 001E                        _ADRESL 009E  
 LCD_Write_Character@caracter 0073                __CFG_PWRTE$OFF 0000                        ___wmul 0462  
                      _mapear 020E                  _AnalogRead_8 0483                        _linea2 0020  
                __pdataCOMMON 007B                        saved_w 007E                     ?_ADConfig 0072  
                mapear@limSup 0034       __end_of__initialization 001F                     ?_LCD_init 0070  
              __pcstackCOMMON 0070           _LCD_Write_Character 04C7                    _banderaADC 007B  
        ?_LCD_Write_Character 0070                    ??_ADConfig 0074                LCD_Cmd@comando 0074  
                  __pbssBANK0 0020     LCD_Set_Cursor@corrimiento 0034                    ??_LCD_init 0075  
                  __pmaintext 0023                 ADConfig@canal 0072                       ?___wmul 0072  
                  __pintentry 0004                       ?_mapear 0033     __size_of_LCD_Write_String 0022  
             ADConfig@oscFreq 0076                       _LCD_Cmd 03E3                       _ISR_ADC 04B5  
       ??_LCD_Write_Character 0072                    __stringtab 04A0        AnalogRead_8@conversion 0075  
             __size_of___wmul 0021               __size_of_mapear 009E                     _ANSELbits 0188  
            ??_LCD_Set_Cursor 0076                       __ptext1 039E                       __ptext2 020E  
                     __ptext3 0462                       __ptext4 0337                       __ptext5 0440  
                     __ptext6 04C7                       __ptext7 0412                       __ptext8 03E3  
                     __ptext9 0483                       clrloop0 04D7          end_of_initialization 001F  
                   _PORTCbits 0007                 mapear@limReal 0033                     _TRISAbits 0085  
                   _TRISEbits 0089             LCD_Write_String@a 0076             LCD_Write_String@n 0074  
           __size_of_ADConfig 00CA             __size_of_LCD_init 0067         LCD_Set_Cursor@columna 0075  
              __end_of___wmul 0483              _LCD_Write_String 0440                 __pidataCOMMON 04DE  
              __end_of_mapear 02AC                 ?_uint_to_char 0070           start_initialization 000F  
    __CFG_FOSC$INTRC_NOCLKOUT 0000                      ??___wmul 0076                      ??_mapear 0035  
               ?_ADC_CHselect 0070                ??_uint_to_char 0072                      ?_LCD_Cmd 0070  
                 __pbssCOMMON 0078                     ___latbits 0002                 __pcstackBANK0 0033  
                    ?_ISR_ADC 0070                ??_ADC_CHselect 0072                     __pstrings 04A0  
 __end_of_LCD_Write_Character 04D6                      _ADConfig 0144             interrupt_function 0004  
              ___wmul@product 0076                      _LCD_init 0337                     clear_ram0 04D6  
                    _PIE1bits 008C                      _PIR1bits 000C                 ?_AnalogRead_8 0070  
                  _ADCON0bits 001F                   __stringbase 04A5                    _ADCON1bits 009F  
           ___wmul@multiplier 0072           ADConfig@justificado 0073              __size_of_LCD_Cmd 002F  
            __size_of_ISR_ADC 0012      __end_of_LCD_Write_String 0462          __end_of_uint_to_char 03E3  
              ??_AnalogRead_8 0072            __end_of__stringtab 04A6                      __ptext10 0144  
                    __ptext11 02AC                      __ptext12 04B5             __CFG_BOR4V$BOR40V 0000  
                _valorADC_CH0 0032                  _valorADC_CH5 007A             ADC_CHselect@canal 0074  
     __size_of_LCD_Set_Cursor 002E          __end_of_ADC_CHselect 0337                 __size_of_main 0121  
         LCD_Set_Cursor@linea 0033                    _INTCONbits 000B                      intlevel1 0000  
                   stringcode 04A0              AnalogRead_8@just 0074               mapear@dividendo 0040  
                    stringdir 04A0                      stringtab 04A0          __end_of_AnalogRead_8 04A0  
       __size_of_uint_to_char 0045  
